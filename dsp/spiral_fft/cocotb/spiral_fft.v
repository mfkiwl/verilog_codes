/*
 * This source file contains a Verilog description of an IP core
 * automatically generated by the SPIRAL HDL Generator.
 *
 * This product includes a hardware design developed by Carnegie Mellon University.
 *
 * Copyright (c) 2005-2011 by Peter A. Milder for the SPIRAL Project,
 * Carnegie Mellon University
 *
 * For more information, see the SPIRAL project website at:
 *   http://www.spiral.net
 *
 * This design is provided for internal, non-commercial research use only
 * and is not for redistribution, with or without modifications.
 * 
 * You may not use the name "Carnegie Mellon University" or derivations
 * thereof to endorse or promote products derived from this software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER
 * EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO ANY WARRANTY
 * THAT THE SOFTWARE WILL CONFORM TO SPECIFICATIONS OR BE ERROR-FREE AND ANY
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE,
 * TITLE, OR NON-INFRINGEMENT.  IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY
 * BE LIABLE FOR ANY DAMAGES, INCLUDING BUT NOT LIMITED TO DIRECT, INDIRECT,
 * SPECIAL OR CONSEQUENTIAL DAMAGES, ARISING OUT OF, RESULTING FROM, OR IN
 * ANY WAY CONNECTED WITH THIS SOFTWARE (WHETHER OR NOT BASED UPON WARRANTY,
 * CONTRACT, TORT OR OTHERWISE).
 *
 */

//   Input/output stream: 8 complex words per cycle
//   Throughput: one transform every 128 cycles
//   Latency: 1153 cycles

//   Resources required:
//     116 multipliers (16 x 16 bit)
//     220 adders (16 x 16 bit)
//     48 RAMs (256 words, 32 bits per word)
//     3 RAMs (5 words, 7 bits per word)
//     1 RAMs (5 words, 6 bits per word)
//     1 RAMs (5 words, 5 bits per word)
//     16 RAMs (16 words, 32 bits per word)
//     16 RAMs (128 words, 32 bits per word)
//     16 RAMs (8 words, 32 bits per word)
//     16 RAMs (64 words, 32 bits per word)
//     16 RAMs (32 words, 32 bits per word)
//     8 ROMs (32 words, 16 bits per word)
//     16 ROMs (64 words, 6 bits per word)
//     16 ROMs (32 words, 5 bits per word)
//     8 ROMs (16 words, 16 bits per word)
//     8 ROMs (128 words, 16 bits per word)
//     8 ROMs (8 words, 16 bits per word)
//     48 ROMs (128 words, 7 bits per word)
//     8 ROMs (64 words, 16 bits per word)

// Generated on Fri Jun 10 14:47:40 EDT 2022

// Latency: 1153 clock cycles
// Throughput: 1 transform every 128 cycles


// We use an interleaved complex data format.  X0 represents the
// real portion of the first input, and X1 represents the imaginary
// portion.  The X variables are system inputs and the Y variables
// are system outputs.

// The design uses a system of flag signals to indicate the
// beginning of the input and output data streams.  The 'next'
// input (asserted high), is used to instruct the system that the
// input stream will begin on the following cycle.

// This system has a 'gap' of 128 cycles.  This means that
// 128 cycles must elapse between the beginning of the input
// vectors.

// The output signal 'next_out' (also asserted high) indicates
// that the output vector will begin streaming out of the system
 // on the following cycle.

// The system has a latency of 1153 cycles.  This means that
// the 'next_out' will be asserted 1153 cycles after the user
// asserts 'next'.

// The simple testbench below will demonstrate the timing for loading
// and unloading data vectors.
// The system reset signal is asserted high.

// Please note: when simulating floating point code, you must include
// Xilinx's DSP slice simulation module.


module dft_testbench();
   reg clk, reset, next;
   wire next_out;
   integer i, j, k, l, m;
   reg [15:0] counter;
   reg [15:0] in [15:0];
   wire [15:0] X0;
   wire [15:0] Y0;
   wire [15:0] X1;
   wire [15:0] Y1;
   wire [15:0] X2;
   wire [15:0] Y2;
   wire [15:0] X3;
   wire [15:0] Y3;
   wire [15:0] X4;
   wire [15:0] Y4;
   wire [15:0] X5;
   wire [15:0] Y5;
   wire [15:0] X6;
   wire [15:0] Y6;
   wire [15:0] X7;
   wire [15:0] Y7;
   wire [15:0] X8;
   wire [15:0] Y8;
   wire [15:0] X9;
   wire [15:0] Y9;
   wire [15:0] X10;
   wire [15:0] Y10;
   wire [15:0] X11;
   wire [15:0] Y11;
   wire [15:0] X12;
   wire [15:0] Y12;
   wire [15:0] X13;
   wire [15:0] Y13;
   wire [15:0] X14;
   wire [15:0] Y14;
   wire [15:0] X15;
   wire [15:0] Y15;
   reg clrCnt;
   assign X0 = in[0];
   assign X1 = in[1];
   assign X2 = in[2];
   assign X3 = in[3];
   assign X4 = in[4];
   assign X5 = in[5];
   assign X6 = in[6];
   assign X7 = in[7];
   assign X8 = in[8];
   assign X9 = in[9];
   assign X10 = in[10];
   assign X11 = in[11];
   assign X12 = in[12];
   assign X13 = in[13];
   assign X14 = in[14];
   assign X15 = in[15];

   initial clk = 0;

   always #10000 clk = ~clk;


   // Instantiate top-level module of core 'X' signals are system inputs
   // and 'Y' signals are system outputs
   dft_top dft_top_instance (.clk(clk), .reset(reset), .next(next), .next_out(next_out),
    .X0(X0), .Y0(Y0),
    .X1(X1), .Y1(Y1),
    .X2(X2), .Y2(Y2),
    .X3(X3), .Y3(Y3),
    .X4(X4), .Y4(Y4),
    .X5(X5), .Y5(Y5),
    .X6(X6), .Y6(Y6),
    .X7(X7), .Y7(Y7),
    .X8(X8), .Y8(Y8),
    .X9(X9), .Y9(Y9),
    .X10(X10), .Y10(Y10),
    .X11(X11), .Y11(Y11),
    .X12(X12), .Y12(Y12),
    .X13(X13), .Y13(Y13),
    .X14(X14), .Y14(Y14),
    .X15(X15), .Y15(Y15));

   // You can use this counter to verify that the gap and latency are as expected.
   always @(posedge clk) begin
      if (clrCnt) counter <= 0;
      else counter <= counter+1;
   end


   initial begin
      @(posedge clk);
      @(posedge clk);

      // On the next cycle, begin loading input vector.
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // The 1024 complex data points enter the system over 128 cycles
      for (j=0; j < 127; j = j+1) begin
          // Input: 8 complex words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= j*16 + k;
         end
         @(posedge clk);
      end
      j = 127;
      for (k=0; k < 16; k = k+1) begin
         in[k] <= j*16 + k;
      end


      @(posedge clk);
      // Wait until the next data vector can be entered
      while (counter < 126)
        @(posedge clk);

      // On the next cycle, we will start the next data vector
      next <= 1;
      clrCnt <= 1;
      @(posedge clk);
      clrCnt <= 0;
      next <= 0;

      // Start entering next input vector
      for (j=0; j < 127; j = j+1) begin
         // Input 16 words per cycle
         for (k=0; k < 16; k = k+1) begin
            in[k] <= 2048 + j*16 + k;
          end
          @(posedge clk);
       end
       j = 127;
       for (k=0; k < 16; k = k+1) begin
          in[k] <= 2048 + j*16 + k;
       end
   end


   initial begin
      // set initial values
      in[0] <= 0;
      in[1] <= 0;
      in[2] <= 0;
      in[3] <= 0;
      in[4] <= 0;
      in[5] <= 0;
      in[6] <= 0;
      in[7] <= 0;
      in[8] <= 0;
      in[9] <= 0;
      in[10] <= 0;
      in[11] <= 0;
      in[12] <= 0;
      in[13] <= 0;
      in[14] <= 0;
      in[15] <= 0;
      next <= 0;
      reset <= 0;

      @(posedge clk);
      reset <= 1;
      @(posedge clk);
      reset <= 0;
      @(posedge clk);
      @(posedge clk);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 1---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      // Wait until next_out goes high, then wait one clock cycle and begin receiving data
      @(posedge next_out);
      @(posedge clk); #1;
      $display("--- begin output 2---");

      for (m=0; m < 127; m=m+1) begin
         $display("%x", Y0);
         $display("%x", Y1);
         $display("%x", Y2);
         $display("%x", Y3);
         $display("%x", Y4);
         $display("%x", Y5);
         $display("%x", Y6);
         $display("%x", Y7);
         $display("%x", Y8);
         $display("%x", Y9);
         $display("%x", Y10);
         $display("%x", Y11);
         $display("%x", Y12);
         $display("%x", Y13);
         $display("%x", Y14);
         $display("%x", Y15);
         @(posedge clk); #1;
      end
      $display("%x", Y0);
      $display("%x", Y1);
      $display("%x", Y2);
      $display("%x", Y3);
      $display("%x", Y4);
      $display("%x", Y5);
      $display("%x", Y6);
      $display("%x", Y7);
      $display("%x", Y8);
      $display("%x", Y9);
      $display("%x", Y10);
      $display("%x", Y11);
      $display("%x", Y12);
      $display("%x", Y13);
      $display("%x", Y14);
      $display("%x", Y15);
      $finish;
   end
endmodule

// Latency: 1153
// Gap: 128
// module_name_is:dft_top
module dft_top(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [15:0] t0_0;
   wire [15:0] t0_1;
   wire [15:0] t0_2;
   wire [15:0] t0_3;
   wire [15:0] t0_4;
   wire [15:0] t0_5;
   wire [15:0] t0_6;
   wire [15:0] t0_7;
   wire [15:0] t0_8;
   wire [15:0] t0_9;
   wire [15:0] t0_10;
   wire [15:0] t0_11;
   wire [15:0] t0_12;
   wire [15:0] t0_13;
   wire [15:0] t0_14;
   wire [15:0] t0_15;
   wire next_0;
   wire [15:0] t1_0;
   wire [15:0] t1_1;
   wire [15:0] t1_2;
   wire [15:0] t1_3;
   wire [15:0] t1_4;
   wire [15:0] t1_5;
   wire [15:0] t1_6;
   wire [15:0] t1_7;
   wire [15:0] t1_8;
   wire [15:0] t1_9;
   wire [15:0] t1_10;
   wire [15:0] t1_11;
   wire [15:0] t1_12;
   wire [15:0] t1_13;
   wire [15:0] t1_14;
   wire [15:0] t1_15;
   wire next_1;
   wire [15:0] t2_0;
   wire [15:0] t2_1;
   wire [15:0] t2_2;
   wire [15:0] t2_3;
   wire [15:0] t2_4;
   wire [15:0] t2_5;
   wire [15:0] t2_6;
   wire [15:0] t2_7;
   wire [15:0] t2_8;
   wire [15:0] t2_9;
   wire [15:0] t2_10;
   wire [15:0] t2_11;
   wire [15:0] t2_12;
   wire [15:0] t2_13;
   wire [15:0] t2_14;
   wire [15:0] t2_15;
   wire next_2;
   wire [15:0] t3_0;
   wire [15:0] t3_1;
   wire [15:0] t3_2;
   wire [15:0] t3_3;
   wire [15:0] t3_4;
   wire [15:0] t3_5;
   wire [15:0] t3_6;
   wire [15:0] t3_7;
   wire [15:0] t3_8;
   wire [15:0] t3_9;
   wire [15:0] t3_10;
   wire [15:0] t3_11;
   wire [15:0] t3_12;
   wire [15:0] t3_13;
   wire [15:0] t3_14;
   wire [15:0] t3_15;
   wire next_3;
   wire [15:0] t4_0;
   wire [15:0] t4_1;
   wire [15:0] t4_2;
   wire [15:0] t4_3;
   wire [15:0] t4_4;
   wire [15:0] t4_5;
   wire [15:0] t4_6;
   wire [15:0] t4_7;
   wire [15:0] t4_8;
   wire [15:0] t4_9;
   wire [15:0] t4_10;
   wire [15:0] t4_11;
   wire [15:0] t4_12;
   wire [15:0] t4_13;
   wire [15:0] t4_14;
   wire [15:0] t4_15;
   wire next_4;
   wire [15:0] t5_0;
   wire [15:0] t5_1;
   wire [15:0] t5_2;
   wire [15:0] t5_3;
   wire [15:0] t5_4;
   wire [15:0] t5_5;
   wire [15:0] t5_6;
   wire [15:0] t5_7;
   wire [15:0] t5_8;
   wire [15:0] t5_9;
   wire [15:0] t5_10;
   wire [15:0] t5_11;
   wire [15:0] t5_12;
   wire [15:0] t5_13;
   wire [15:0] t5_14;
   wire [15:0] t5_15;
   wire next_5;
   wire [15:0] t6_0;
   wire [15:0] t6_1;
   wire [15:0] t6_2;
   wire [15:0] t6_3;
   wire [15:0] t6_4;
   wire [15:0] t6_5;
   wire [15:0] t6_6;
   wire [15:0] t6_7;
   wire [15:0] t6_8;
   wire [15:0] t6_9;
   wire [15:0] t6_10;
   wire [15:0] t6_11;
   wire [15:0] t6_12;
   wire [15:0] t6_13;
   wire [15:0] t6_14;
   wire [15:0] t6_15;
   wire next_6;
   wire [15:0] t7_0;
   wire [15:0] t7_1;
   wire [15:0] t7_2;
   wire [15:0] t7_3;
   wire [15:0] t7_4;
   wire [15:0] t7_5;
   wire [15:0] t7_6;
   wire [15:0] t7_7;
   wire [15:0] t7_8;
   wire [15:0] t7_9;
   wire [15:0] t7_10;
   wire [15:0] t7_11;
   wire [15:0] t7_12;
   wire [15:0] t7_13;
   wire [15:0] t7_14;
   wire [15:0] t7_15;
   wire next_7;
   wire [15:0] t8_0;
   wire [15:0] t8_1;
   wire [15:0] t8_2;
   wire [15:0] t8_3;
   wire [15:0] t8_4;
   wire [15:0] t8_5;
   wire [15:0] t8_6;
   wire [15:0] t8_7;
   wire [15:0] t8_8;
   wire [15:0] t8_9;
   wire [15:0] t8_10;
   wire [15:0] t8_11;
   wire [15:0] t8_12;
   wire [15:0] t8_13;
   wire [15:0] t8_14;
   wire [15:0] t8_15;
   wire next_8;
   wire [15:0] t9_0;
   wire [15:0] t9_1;
   wire [15:0] t9_2;
   wire [15:0] t9_3;
   wire [15:0] t9_4;
   wire [15:0] t9_5;
   wire [15:0] t9_6;
   wire [15:0] t9_7;
   wire [15:0] t9_8;
   wire [15:0] t9_9;
   wire [15:0] t9_10;
   wire [15:0] t9_11;
   wire [15:0] t9_12;
   wire [15:0] t9_13;
   wire [15:0] t9_14;
   wire [15:0] t9_15;
   wire next_9;
   wire [15:0] t10_0;
   wire [15:0] t10_1;
   wire [15:0] t10_2;
   wire [15:0] t10_3;
   wire [15:0] t10_4;
   wire [15:0] t10_5;
   wire [15:0] t10_6;
   wire [15:0] t10_7;
   wire [15:0] t10_8;
   wire [15:0] t10_9;
   wire [15:0] t10_10;
   wire [15:0] t10_11;
   wire [15:0] t10_12;
   wire [15:0] t10_13;
   wire [15:0] t10_14;
   wire [15:0] t10_15;
   wire next_10;
   wire [15:0] t11_0;
   wire [15:0] t11_1;
   wire [15:0] t11_2;
   wire [15:0] t11_3;
   wire [15:0] t11_4;
   wire [15:0] t11_5;
   wire [15:0] t11_6;
   wire [15:0] t11_7;
   wire [15:0] t11_8;
   wire [15:0] t11_9;
   wire [15:0] t11_10;
   wire [15:0] t11_11;
   wire [15:0] t11_12;
   wire [15:0] t11_13;
   wire [15:0] t11_14;
   wire [15:0] t11_15;
   wire next_11;
   wire [15:0] t12_0;
   wire [15:0] t12_1;
   wire [15:0] t12_2;
   wire [15:0] t12_3;
   wire [15:0] t12_4;
   wire [15:0] t12_5;
   wire [15:0] t12_6;
   wire [15:0] t12_7;
   wire [15:0] t12_8;
   wire [15:0] t12_9;
   wire [15:0] t12_10;
   wire [15:0] t12_11;
   wire [15:0] t12_12;
   wire [15:0] t12_13;
   wire [15:0] t12_14;
   wire [15:0] t12_15;
   wire next_12;
   wire [15:0] t13_0;
   wire [15:0] t13_1;
   wire [15:0] t13_2;
   wire [15:0] t13_3;
   wire [15:0] t13_4;
   wire [15:0] t13_5;
   wire [15:0] t13_6;
   wire [15:0] t13_7;
   wire [15:0] t13_8;
   wire [15:0] t13_9;
   wire [15:0] t13_10;
   wire [15:0] t13_11;
   wire [15:0] t13_12;
   wire [15:0] t13_13;
   wire [15:0] t13_14;
   wire [15:0] t13_15;
   wire next_13;
   wire [15:0] t14_0;
   wire [15:0] t14_1;
   wire [15:0] t14_2;
   wire [15:0] t14_3;
   wire [15:0] t14_4;
   wire [15:0] t14_5;
   wire [15:0] t14_6;
   wire [15:0] t14_7;
   wire [15:0] t14_8;
   wire [15:0] t14_9;
   wire [15:0] t14_10;
   wire [15:0] t14_11;
   wire [15:0] t14_12;
   wire [15:0] t14_13;
   wire [15:0] t14_14;
   wire [15:0] t14_15;
   wire next_14;
   wire [15:0] t15_0;
   wire [15:0] t15_1;
   wire [15:0] t15_2;
   wire [15:0] t15_3;
   wire [15:0] t15_4;
   wire [15:0] t15_5;
   wire [15:0] t15_6;
   wire [15:0] t15_7;
   wire [15:0] t15_8;
   wire [15:0] t15_9;
   wire [15:0] t15_10;
   wire [15:0] t15_11;
   wire [15:0] t15_12;
   wire [15:0] t15_13;
   wire [15:0] t15_14;
   wire [15:0] t15_15;
   wire next_15;
   wire [15:0] t16_0;
   wire [15:0] t16_1;
   wire [15:0] t16_2;
   wire [15:0] t16_3;
   wire [15:0] t16_4;
   wire [15:0] t16_5;
   wire [15:0] t16_6;
   wire [15:0] t16_7;
   wire [15:0] t16_8;
   wire [15:0] t16_9;
   wire [15:0] t16_10;
   wire [15:0] t16_11;
   wire [15:0] t16_12;
   wire [15:0] t16_13;
   wire [15:0] t16_14;
   wire [15:0] t16_15;
   wire next_16;
   wire [15:0] t17_0;
   wire [15:0] t17_1;
   wire [15:0] t17_2;
   wire [15:0] t17_3;
   wire [15:0] t17_4;
   wire [15:0] t17_5;
   wire [15:0] t17_6;
   wire [15:0] t17_7;
   wire [15:0] t17_8;
   wire [15:0] t17_9;
   wire [15:0] t17_10;
   wire [15:0] t17_11;
   wire [15:0] t17_12;
   wire [15:0] t17_13;
   wire [15:0] t17_14;
   wire [15:0] t17_15;
   wire next_17;
   wire [15:0] t18_0;
   wire [15:0] t18_1;
   wire [15:0] t18_2;
   wire [15:0] t18_3;
   wire [15:0] t18_4;
   wire [15:0] t18_5;
   wire [15:0] t18_6;
   wire [15:0] t18_7;
   wire [15:0] t18_8;
   wire [15:0] t18_9;
   wire [15:0] t18_10;
   wire [15:0] t18_11;
   wire [15:0] t18_12;
   wire [15:0] t18_13;
   wire [15:0] t18_14;
   wire [15:0] t18_15;
   wire next_18;
   wire [15:0] t19_0;
   wire [15:0] t19_1;
   wire [15:0] t19_2;
   wire [15:0] t19_3;
   wire [15:0] t19_4;
   wire [15:0] t19_5;
   wire [15:0] t19_6;
   wire [15:0] t19_7;
   wire [15:0] t19_8;
   wire [15:0] t19_9;
   wire [15:0] t19_10;
   wire [15:0] t19_11;
   wire [15:0] t19_12;
   wire [15:0] t19_13;
   wire [15:0] t19_14;
   wire [15:0] t19_15;
   wire next_19;
   wire [15:0] t20_0;
   wire [15:0] t20_1;
   wire [15:0] t20_2;
   wire [15:0] t20_3;
   wire [15:0] t20_4;
   wire [15:0] t20_5;
   wire [15:0] t20_6;
   wire [15:0] t20_7;
   wire [15:0] t20_8;
   wire [15:0] t20_9;
   wire [15:0] t20_10;
   wire [15:0] t20_11;
   wire [15:0] t20_12;
   wire [15:0] t20_13;
   wire [15:0] t20_14;
   wire [15:0] t20_15;
   wire next_20;
   wire [15:0] t21_0;
   wire [15:0] t21_1;
   wire [15:0] t21_2;
   wire [15:0] t21_3;
   wire [15:0] t21_4;
   wire [15:0] t21_5;
   wire [15:0] t21_6;
   wire [15:0] t21_7;
   wire [15:0] t21_8;
   wire [15:0] t21_9;
   wire [15:0] t21_10;
   wire [15:0] t21_11;
   wire [15:0] t21_12;
   wire [15:0] t21_13;
   wire [15:0] t21_14;
   wire [15:0] t21_15;
   wire next_21;
   wire [15:0] t22_0;
   wire [15:0] t22_1;
   wire [15:0] t22_2;
   wire [15:0] t22_3;
   wire [15:0] t22_4;
   wire [15:0] t22_5;
   wire [15:0] t22_6;
   wire [15:0] t22_7;
   wire [15:0] t22_8;
   wire [15:0] t22_9;
   wire [15:0] t22_10;
   wire [15:0] t22_11;
   wire [15:0] t22_12;
   wire [15:0] t22_13;
   wire [15:0] t22_14;
   wire [15:0] t22_15;
   wire next_22;
   wire [15:0] t23_0;
   wire [15:0] t23_1;
   wire [15:0] t23_2;
   wire [15:0] t23_3;
   wire [15:0] t23_4;
   wire [15:0] t23_5;
   wire [15:0] t23_6;
   wire [15:0] t23_7;
   wire [15:0] t23_8;
   wire [15:0] t23_9;
   wire [15:0] t23_10;
   wire [15:0] t23_11;
   wire [15:0] t23_12;
   wire [15:0] t23_13;
   wire [15:0] t23_14;
   wire [15:0] t23_15;
   wire next_23;
   wire [15:0] t24_0;
   wire [15:0] t24_1;
   wire [15:0] t24_2;
   wire [15:0] t24_3;
   wire [15:0] t24_4;
   wire [15:0] t24_5;
   wire [15:0] t24_6;
   wire [15:0] t24_7;
   wire [15:0] t24_8;
   wire [15:0] t24_9;
   wire [15:0] t24_10;
   wire [15:0] t24_11;
   wire [15:0] t24_12;
   wire [15:0] t24_13;
   wire [15:0] t24_14;
   wire [15:0] t24_15;
   wire next_24;
   wire [15:0] t25_0;
   wire [15:0] t25_1;
   wire [15:0] t25_2;
   wire [15:0] t25_3;
   wire [15:0] t25_4;
   wire [15:0] t25_5;
   wire [15:0] t25_6;
   wire [15:0] t25_7;
   wire [15:0] t25_8;
   wire [15:0] t25_9;
   wire [15:0] t25_10;
   wire [15:0] t25_11;
   wire [15:0] t25_12;
   wire [15:0] t25_13;
   wire [15:0] t25_14;
   wire [15:0] t25_15;
   wire next_25;
   wire [15:0] t26_0;
   wire [15:0] t26_1;
   wire [15:0] t26_2;
   wire [15:0] t26_3;
   wire [15:0] t26_4;
   wire [15:0] t26_5;
   wire [15:0] t26_6;
   wire [15:0] t26_7;
   wire [15:0] t26_8;
   wire [15:0] t26_9;
   wire [15:0] t26_10;
   wire [15:0] t26_11;
   wire [15:0] t26_12;
   wire [15:0] t26_13;
   wire [15:0] t26_14;
   wire [15:0] t26_15;
   wire next_26;
   assign t0_0 = X0;
   assign Y0 = t26_0;
   assign t0_1 = X1;
   assign Y1 = t26_1;
   assign t0_2 = X2;
   assign Y2 = t26_2;
   assign t0_3 = X3;
   assign Y3 = t26_3;
   assign t0_4 = X4;
   assign Y4 = t26_4;
   assign t0_5 = X5;
   assign Y5 = t26_5;
   assign t0_6 = X6;
   assign Y6 = t26_6;
   assign t0_7 = X7;
   assign Y7 = t26_7;
   assign t0_8 = X8;
   assign Y8 = t26_8;
   assign t0_9 = X9;
   assign Y9 = t26_9;
   assign t0_10 = X10;
   assign Y10 = t26_10;
   assign t0_11 = X11;
   assign Y11 = t26_11;
   assign t0_12 = X12;
   assign Y12 = t26_12;
   assign t0_13 = X13;
   assign Y13 = t26_13;
   assign t0_14 = X14;
   assign Y14 = t26_14;
   assign t0_15 = X15;
   assign Y15 = t26_15;
   assign next_0 = next;
   assign next_out = next_26;

// latency=262, gap=128
   rc59568 stage0(.clk(clk), .reset(reset), .next(next_0), .next_out(next_1),
    .X0(t0_0), .Y0(t1_0),
    .X1(t0_1), .Y1(t1_1),
    .X2(t0_2), .Y2(t1_2),
    .X3(t0_3), .Y3(t1_3),
    .X4(t0_4), .Y4(t1_4),
    .X5(t0_5), .Y5(t1_5),
    .X6(t0_6), .Y6(t1_6),
    .X7(t0_7), .Y7(t1_7),
    .X8(t0_8), .Y8(t1_8),
    .X9(t0_9), .Y9(t1_9),
    .X10(t0_10), .Y10(t1_10),
    .X11(t0_11), .Y11(t1_11),
    .X12(t0_12), .Y12(t1_12),
    .X13(t0_13), .Y13(t1_13),
    .X14(t0_14), .Y14(t1_14),
    .X15(t0_15), .Y15(t1_15));


// latency=2, gap=128
   codeBlock59570 stage1(.clk(clk), .reset(reset), .next_in(next_1), .next_out(next_2),
       .X0_in(t1_0), .Y0(t2_0),
       .X1_in(t1_1), .Y1(t2_1),
       .X2_in(t1_2), .Y2(t2_2),
       .X3_in(t1_3), .Y3(t2_3),
       .X4_in(t1_4), .Y4(t2_4),
       .X5_in(t1_5), .Y5(t2_5),
       .X6_in(t1_6), .Y6(t2_6),
       .X7_in(t1_7), .Y7(t2_7),
       .X8_in(t1_8), .Y8(t2_8),
       .X9_in(t1_9), .Y9(t2_9),
       .X10_in(t1_10), .Y10(t2_10),
       .X11_in(t1_11), .Y11(t2_11),
       .X12_in(t1_12), .Y12(t2_12),
       .X13_in(t1_13), .Y13(t2_13),
       .X14_in(t1_14), .Y14(t2_14),
       .X15_in(t1_15), .Y15(t2_15));


// latency=2, gap=128
   codeBlock59877 stage2(.clk(clk), .reset(reset), .next_in(next_2), .next_out(next_3),
       .X0_in(t2_0), .Y0(t3_0),
       .X1_in(t2_1), .Y1(t3_1),
       .X2_in(t2_2), .Y2(t3_2),
       .X3_in(t2_3), .Y3(t3_3),
       .X4_in(t2_4), .Y4(t3_4),
       .X5_in(t2_5), .Y5(t3_5),
       .X6_in(t2_6), .Y6(t3_6),
       .X7_in(t2_7), .Y7(t3_7),
       .X8_in(t2_8), .Y8(t3_8),
       .X9_in(t2_9), .Y9(t3_9),
       .X10_in(t2_10), .Y10(t3_10),
       .X11_in(t2_11), .Y11(t3_11),
       .X12_in(t2_12), .Y12(t3_12),
       .X13_in(t2_13), .Y13(t3_13),
       .X14_in(t2_14), .Y14(t3_14),
       .X15_in(t2_15), .Y15(t3_15));


// latency=5, gap=128
   codeBlock60184 stage3(.clk(clk), .reset(reset), .next_in(next_3), .next_out(next_4),
       .X0_in(t3_0), .Y0(t4_0),
       .X1_in(t3_1), .Y1(t4_1),
       .X2_in(t3_2), .Y2(t4_2),
       .X3_in(t3_3), .Y3(t4_3),
       .X4_in(t3_4), .Y4(t4_4),
       .X5_in(t3_5), .Y5(t4_5),
       .X6_in(t3_6), .Y6(t4_6),
       .X7_in(t3_7), .Y7(t4_7),
       .X8_in(t3_8), .Y8(t4_8),
       .X9_in(t3_9), .Y9(t4_9),
       .X10_in(t3_10), .Y10(t4_10),
       .X11_in(t3_11), .Y11(t4_11),
       .X12_in(t3_12), .Y12(t4_12),
       .X13_in(t3_13), .Y13(t4_13),
       .X14_in(t3_14), .Y14(t4_14),
       .X15_in(t3_15), .Y15(t4_15));


// latency=10, gap=128
   rc60534 stage4(.clk(clk), .reset(reset), .next(next_4), .next_out(next_5),
    .X0(t4_0), .Y0(t5_0),
    .X1(t4_1), .Y1(t5_1),
    .X2(t4_2), .Y2(t5_2),
    .X3(t4_3), .Y3(t5_3),
    .X4(t4_4), .Y4(t5_4),
    .X5(t4_5), .Y5(t5_5),
    .X6(t4_6), .Y6(t5_6),
    .X7(t4_7), .Y7(t5_7),
    .X8(t4_8), .Y8(t5_8),
    .X9(t4_9), .Y9(t5_9),
    .X10(t4_10), .Y10(t5_10),
    .X11(t4_11), .Y11(t5_11),
    .X12(t4_12), .Y12(t5_12),
    .X13(t4_13), .Y13(t5_13),
    .X14(t4_14), .Y14(t5_14),
    .X15(t4_15), .Y15(t5_15));


// latency=8, gap=128
   DirSum_61243 stage5(.next(next_5), .clk(clk), .reset(reset), .next_out(next_6),
       .X0(t5_0), .Y0(t6_0),
       .X1(t5_1), .Y1(t6_1),
       .X2(t5_2), .Y2(t6_2),
       .X3(t5_3), .Y3(t6_3),
       .X4(t5_4), .Y4(t6_4),
       .X5(t5_5), .Y5(t6_5),
       .X6(t5_6), .Y6(t6_6),
       .X7(t5_7), .Y7(t6_7),
       .X8(t5_8), .Y8(t6_8),
       .X9(t5_9), .Y9(t6_9),
       .X10(t5_10), .Y10(t6_10),
       .X11(t5_11), .Y11(t6_11),
       .X12(t5_12), .Y12(t6_12),
       .X13(t5_13), .Y13(t6_13),
       .X14(t5_14), .Y14(t6_14),
       .X15(t5_15), .Y15(t6_15));


// latency=2, gap=128
   codeBlock61246 stage6(.clk(clk), .reset(reset), .next_in(next_6), .next_out(next_7),
       .X0_in(t6_0), .Y0(t7_0),
       .X1_in(t6_1), .Y1(t7_1),
       .X2_in(t6_2), .Y2(t7_2),
       .X3_in(t6_3), .Y3(t7_3),
       .X4_in(t6_4), .Y4(t7_4),
       .X5_in(t6_5), .Y5(t7_5),
       .X6_in(t6_6), .Y6(t7_6),
       .X7_in(t6_7), .Y7(t7_7),
       .X8_in(t6_8), .Y8(t7_8),
       .X9_in(t6_9), .Y9(t7_9),
       .X10_in(t6_10), .Y10(t7_10),
       .X11_in(t6_11), .Y11(t7_11),
       .X12_in(t6_12), .Y12(t7_12),
       .X13_in(t6_13), .Y13(t7_13),
       .X14_in(t6_14), .Y14(t7_14),
       .X15_in(t6_15), .Y15(t7_15));


// latency=14, gap=128
   rc61556 stage7(.clk(clk), .reset(reset), .next(next_7), .next_out(next_8),
    .X0(t7_0), .Y0(t8_0),
    .X1(t7_1), .Y1(t8_1),
    .X2(t7_2), .Y2(t8_2),
    .X3(t7_3), .Y3(t8_3),
    .X4(t7_4), .Y4(t8_4),
    .X5(t7_5), .Y5(t8_5),
    .X6(t7_6), .Y6(t8_6),
    .X7(t7_7), .Y7(t8_7),
    .X8(t7_8), .Y8(t8_8),
    .X9(t7_9), .Y9(t8_9),
    .X10(t7_10), .Y10(t8_10),
    .X11(t7_11), .Y11(t8_11),
    .X12(t7_12), .Y12(t8_12),
    .X13(t7_13), .Y13(t8_13),
    .X14(t7_14), .Y14(t8_14),
    .X15(t7_15), .Y15(t8_15));


// latency=8, gap=128
   DirSum_62297 stage8(.next(next_8), .clk(clk), .reset(reset), .next_out(next_9),
       .X0(t8_0), .Y0(t9_0),
       .X1(t8_1), .Y1(t9_1),
       .X2(t8_2), .Y2(t9_2),
       .X3(t8_3), .Y3(t9_3),
       .X4(t8_4), .Y4(t9_4),
       .X5(t8_5), .Y5(t9_5),
       .X6(t8_6), .Y6(t9_6),
       .X7(t8_7), .Y7(t9_7),
       .X8(t8_8), .Y8(t9_8),
       .X9(t8_9), .Y9(t9_9),
       .X10(t8_10), .Y10(t9_10),
       .X11(t8_11), .Y11(t9_11),
       .X12(t8_12), .Y12(t9_12),
       .X13(t8_13), .Y13(t9_13),
       .X14(t8_14), .Y14(t9_14),
       .X15(t8_15), .Y15(t9_15));


// latency=2, gap=128
   codeBlock62300 stage9(.clk(clk), .reset(reset), .next_in(next_9), .next_out(next_10),
       .X0_in(t9_0), .Y0(t10_0),
       .X1_in(t9_1), .Y1(t10_1),
       .X2_in(t9_2), .Y2(t10_2),
       .X3_in(t9_3), .Y3(t10_3),
       .X4_in(t9_4), .Y4(t10_4),
       .X5_in(t9_5), .Y5(t10_5),
       .X6_in(t9_6), .Y6(t10_6),
       .X7_in(t9_7), .Y7(t10_7),
       .X8_in(t9_8), .Y8(t10_8),
       .X9_in(t9_9), .Y9(t10_9),
       .X10_in(t9_10), .Y10(t10_10),
       .X11_in(t9_11), .Y11(t10_11),
       .X12_in(t9_12), .Y12(t10_12),
       .X13_in(t9_13), .Y13(t10_13),
       .X14_in(t9_14), .Y14(t10_14),
       .X15_in(t9_15), .Y15(t10_15));


// latency=22, gap=128
   rc62610 stage10(.clk(clk), .reset(reset), .next(next_10), .next_out(next_11),
    .X0(t10_0), .Y0(t11_0),
    .X1(t10_1), .Y1(t11_1),
    .X2(t10_2), .Y2(t11_2),
    .X3(t10_3), .Y3(t11_3),
    .X4(t10_4), .Y4(t11_4),
    .X5(t10_5), .Y5(t11_5),
    .X6(t10_6), .Y6(t11_6),
    .X7(t10_7), .Y7(t11_7),
    .X8(t10_8), .Y8(t11_8),
    .X9(t10_9), .Y9(t11_9),
    .X10(t10_10), .Y10(t11_10),
    .X11(t10_11), .Y11(t11_11),
    .X12(t10_12), .Y12(t11_12),
    .X13(t10_13), .Y13(t11_13),
    .X14(t10_14), .Y14(t11_14),
    .X15(t10_15), .Y15(t11_15));


// latency=8, gap=128
   DirSum_63415 stage11(.next(next_11), .clk(clk), .reset(reset), .next_out(next_12),
       .X0(t11_0), .Y0(t12_0),
       .X1(t11_1), .Y1(t12_1),
       .X2(t11_2), .Y2(t12_2),
       .X3(t11_3), .Y3(t12_3),
       .X4(t11_4), .Y4(t12_4),
       .X5(t11_5), .Y5(t12_5),
       .X6(t11_6), .Y6(t12_6),
       .X7(t11_7), .Y7(t12_7),
       .X8(t11_8), .Y8(t12_8),
       .X9(t11_9), .Y9(t12_9),
       .X10(t11_10), .Y10(t12_10),
       .X11(t11_11), .Y11(t12_11),
       .X12(t11_12), .Y12(t12_12),
       .X13(t11_13), .Y13(t12_13),
       .X14(t11_14), .Y14(t12_14),
       .X15(t11_15), .Y15(t12_15));


// latency=2, gap=128
   codeBlock63418 stage12(.clk(clk), .reset(reset), .next_in(next_12), .next_out(next_13),
       .X0_in(t12_0), .Y0(t13_0),
       .X1_in(t12_1), .Y1(t13_1),
       .X2_in(t12_2), .Y2(t13_2),
       .X3_in(t12_3), .Y3(t13_3),
       .X4_in(t12_4), .Y4(t13_4),
       .X5_in(t12_5), .Y5(t13_5),
       .X6_in(t12_6), .Y6(t13_6),
       .X7_in(t12_7), .Y7(t13_7),
       .X8_in(t12_8), .Y8(t13_8),
       .X9_in(t12_9), .Y9(t13_9),
       .X10_in(t12_10), .Y10(t13_10),
       .X11_in(t12_11), .Y11(t13_11),
       .X12_in(t12_12), .Y12(t13_12),
       .X13_in(t12_13), .Y13(t13_13),
       .X14_in(t12_14), .Y14(t13_14),
       .X15_in(t12_15), .Y15(t13_15));


// latency=38, gap=128
   rc63728 stage13(.clk(clk), .reset(reset), .next(next_13), .next_out(next_14),
    .X0(t13_0), .Y0(t14_0),
    .X1(t13_1), .Y1(t14_1),
    .X2(t13_2), .Y2(t14_2),
    .X3(t13_3), .Y3(t14_3),
    .X4(t13_4), .Y4(t14_4),
    .X5(t13_5), .Y5(t14_5),
    .X6(t13_6), .Y6(t14_6),
    .X7(t13_7), .Y7(t14_7),
    .X8(t13_8), .Y8(t14_8),
    .X9(t13_9), .Y9(t14_9),
    .X10(t13_10), .Y10(t14_10),
    .X11(t13_11), .Y11(t14_11),
    .X12(t13_12), .Y12(t14_12),
    .X13(t13_13), .Y13(t14_13),
    .X14(t13_14), .Y14(t14_14),
    .X15(t13_15), .Y15(t14_15));


// latency=8, gap=128
   DirSum_64661 stage14(.next(next_14), .clk(clk), .reset(reset), .next_out(next_15),
       .X0(t14_0), .Y0(t15_0),
       .X1(t14_1), .Y1(t15_1),
       .X2(t14_2), .Y2(t15_2),
       .X3(t14_3), .Y3(t15_3),
       .X4(t14_4), .Y4(t15_4),
       .X5(t14_5), .Y5(t15_5),
       .X6(t14_6), .Y6(t15_6),
       .X7(t14_7), .Y7(t15_7),
       .X8(t14_8), .Y8(t15_8),
       .X9(t14_9), .Y9(t15_9),
       .X10(t14_10), .Y10(t15_10),
       .X11(t14_11), .Y11(t15_11),
       .X12(t14_12), .Y12(t15_12),
       .X13(t14_13), .Y13(t15_13),
       .X14(t14_14), .Y14(t15_14),
       .X15(t14_15), .Y15(t15_15));


// latency=2, gap=128
   codeBlock64664 stage15(.clk(clk), .reset(reset), .next_in(next_15), .next_out(next_16),
       .X0_in(t15_0), .Y0(t16_0),
       .X1_in(t15_1), .Y1(t16_1),
       .X2_in(t15_2), .Y2(t16_2),
       .X3_in(t15_3), .Y3(t16_3),
       .X4_in(t15_4), .Y4(t16_4),
       .X5_in(t15_5), .Y5(t16_5),
       .X6_in(t15_6), .Y6(t16_6),
       .X7_in(t15_7), .Y7(t16_7),
       .X8_in(t15_8), .Y8(t16_8),
       .X9_in(t15_9), .Y9(t16_9),
       .X10_in(t15_10), .Y10(t16_10),
       .X11_in(t15_11), .Y11(t16_11),
       .X12_in(t15_12), .Y12(t16_12),
       .X13_in(t15_13), .Y13(t16_13),
       .X14_in(t15_14), .Y14(t16_14),
       .X15_in(t15_15), .Y15(t16_15));


// latency=70, gap=128
   rc64974 stage16(.clk(clk), .reset(reset), .next(next_16), .next_out(next_17),
    .X0(t16_0), .Y0(t17_0),
    .X1(t16_1), .Y1(t17_1),
    .X2(t16_2), .Y2(t17_2),
    .X3(t16_3), .Y3(t17_3),
    .X4(t16_4), .Y4(t17_4),
    .X5(t16_5), .Y5(t17_5),
    .X6(t16_6), .Y6(t17_6),
    .X7(t16_7), .Y7(t17_7),
    .X8(t16_8), .Y8(t17_8),
    .X9(t16_9), .Y9(t17_9),
    .X10(t16_10), .Y10(t17_10),
    .X11(t16_11), .Y11(t17_11),
    .X12(t16_12), .Y12(t17_12),
    .X13(t16_13), .Y13(t17_13),
    .X14(t16_14), .Y14(t17_14),
    .X15(t16_15), .Y15(t17_15));


// latency=8, gap=128
   DirSum_66163 stage17(.next(next_17), .clk(clk), .reset(reset), .next_out(next_18),
       .X0(t17_0), .Y0(t18_0),
       .X1(t17_1), .Y1(t18_1),
       .X2(t17_2), .Y2(t18_2),
       .X3(t17_3), .Y3(t18_3),
       .X4(t17_4), .Y4(t18_4),
       .X5(t17_5), .Y5(t18_5),
       .X6(t17_6), .Y6(t18_6),
       .X7(t17_7), .Y7(t18_7),
       .X8(t17_8), .Y8(t18_8),
       .X9(t17_9), .Y9(t18_9),
       .X10(t17_10), .Y10(t18_10),
       .X11(t17_11), .Y11(t18_11),
       .X12(t17_12), .Y12(t18_12),
       .X13(t17_13), .Y13(t18_13),
       .X14(t17_14), .Y14(t18_14),
       .X15(t17_15), .Y15(t18_15));


// latency=2, gap=128
   codeBlock66166 stage18(.clk(clk), .reset(reset), .next_in(next_18), .next_out(next_19),
       .X0_in(t18_0), .Y0(t19_0),
       .X1_in(t18_1), .Y1(t19_1),
       .X2_in(t18_2), .Y2(t19_2),
       .X3_in(t18_3), .Y3(t19_3),
       .X4_in(t18_4), .Y4(t19_4),
       .X5_in(t18_5), .Y5(t19_5),
       .X6_in(t18_6), .Y6(t19_6),
       .X7_in(t18_7), .Y7(t19_7),
       .X8_in(t18_8), .Y8(t19_8),
       .X9_in(t18_9), .Y9(t19_9),
       .X10_in(t18_10), .Y10(t19_10),
       .X11_in(t18_11), .Y11(t19_11),
       .X12_in(t18_12), .Y12(t19_12),
       .X13_in(t18_13), .Y13(t19_13),
       .X14_in(t18_14), .Y14(t19_14),
       .X15_in(t18_15), .Y15(t19_15));


// latency=134, gap=128
   rc66476 stage19(.clk(clk), .reset(reset), .next(next_19), .next_out(next_20),
    .X0(t19_0), .Y0(t20_0),
    .X1(t19_1), .Y1(t20_1),
    .X2(t19_2), .Y2(t20_2),
    .X3(t19_3), .Y3(t20_3),
    .X4(t19_4), .Y4(t20_4),
    .X5(t19_5), .Y5(t20_5),
    .X6(t19_6), .Y6(t20_6),
    .X7(t19_7), .Y7(t20_7),
    .X8(t19_8), .Y8(t20_8),
    .X9(t19_9), .Y9(t20_9),
    .X10(t19_10), .Y10(t20_10),
    .X11(t19_11), .Y11(t20_11),
    .X12(t19_12), .Y12(t20_12),
    .X13(t19_13), .Y13(t20_13),
    .X14(t19_14), .Y14(t20_14),
    .X15(t19_15), .Y15(t20_15));


// latency=8, gap=128
   DirSum_68177 stage20(.next(next_20), .clk(clk), .reset(reset), .next_out(next_21),
       .X0(t20_0), .Y0(t21_0),
       .X1(t20_1), .Y1(t21_1),
       .X2(t20_2), .Y2(t21_2),
       .X3(t20_3), .Y3(t21_3),
       .X4(t20_4), .Y4(t21_4),
       .X5(t20_5), .Y5(t21_5),
       .X6(t20_6), .Y6(t21_6),
       .X7(t20_7), .Y7(t21_7),
       .X8(t20_8), .Y8(t21_8),
       .X9(t20_9), .Y9(t21_9),
       .X10(t20_10), .Y10(t21_10),
       .X11(t20_11), .Y11(t21_11),
       .X12(t20_12), .Y12(t21_12),
       .X13(t20_13), .Y13(t21_13),
       .X14(t20_14), .Y14(t21_14),
       .X15(t20_15), .Y15(t21_15));


// latency=2, gap=128
   codeBlock68180 stage21(.clk(clk), .reset(reset), .next_in(next_21), .next_out(next_22),
       .X0_in(t21_0), .Y0(t22_0),
       .X1_in(t21_1), .Y1(t22_1),
       .X2_in(t21_2), .Y2(t22_2),
       .X3_in(t21_3), .Y3(t22_3),
       .X4_in(t21_4), .Y4(t22_4),
       .X5_in(t21_5), .Y5(t22_5),
       .X6_in(t21_6), .Y6(t22_6),
       .X7_in(t21_7), .Y7(t22_7),
       .X8_in(t21_8), .Y8(t22_8),
       .X9_in(t21_9), .Y9(t22_9),
       .X10_in(t21_10), .Y10(t22_10),
       .X11_in(t21_11), .Y11(t22_11),
       .X12_in(t21_12), .Y12(t22_12),
       .X13_in(t21_13), .Y13(t22_13),
       .X14_in(t21_14), .Y14(t22_14),
       .X15_in(t21_15), .Y15(t22_15));


// latency=262, gap=128
   rc68490 stage22(.clk(clk), .reset(reset), .next(next_22), .next_out(next_23),
    .X0(t22_0), .Y0(t23_0),
    .X1(t22_1), .Y1(t23_1),
    .X2(t22_2), .Y2(t23_2),
    .X3(t22_3), .Y3(t23_3),
    .X4(t22_4), .Y4(t23_4),
    .X5(t22_5), .Y5(t23_5),
    .X6(t22_6), .Y6(t23_6),
    .X7(t22_7), .Y7(t23_7),
    .X8(t22_8), .Y8(t23_8),
    .X9(t22_9), .Y9(t23_9),
    .X10(t22_10), .Y10(t23_10),
    .X11(t22_11), .Y11(t23_11),
    .X12(t22_12), .Y12(t23_12),
    .X13(t22_13), .Y13(t23_13),
    .X14(t22_14), .Y14(t23_14),
    .X15(t22_15), .Y15(t23_15));


// latency=8, gap=128
   DirSum_71214 stage23(.next(next_23), .clk(clk), .reset(reset), .next_out(next_24),
       .X0(t23_0), .Y0(t24_0),
       .X1(t23_1), .Y1(t24_1),
       .X2(t23_2), .Y2(t24_2),
       .X3(t23_3), .Y3(t24_3),
       .X4(t23_4), .Y4(t24_4),
       .X5(t23_5), .Y5(t24_5),
       .X6(t23_6), .Y6(t24_6),
       .X7(t23_7), .Y7(t24_7),
       .X8(t23_8), .Y8(t24_8),
       .X9(t23_9), .Y9(t24_9),
       .X10(t23_10), .Y10(t24_10),
       .X11(t23_11), .Y11(t24_11),
       .X12(t23_12), .Y12(t24_12),
       .X13(t23_13), .Y13(t24_13),
       .X14(t23_14), .Y14(t24_14),
       .X15(t23_15), .Y15(t24_15));


// latency=2, gap=128
   codeBlock71217 stage24(.clk(clk), .reset(reset), .next_in(next_24), .next_out(next_25),
       .X0_in(t24_0), .Y0(t25_0),
       .X1_in(t24_1), .Y1(t25_1),
       .X2_in(t24_2), .Y2(t25_2),
       .X3_in(t24_3), .Y3(t25_3),
       .X4_in(t24_4), .Y4(t25_4),
       .X5_in(t24_5), .Y5(t25_5),
       .X6_in(t24_6), .Y6(t25_6),
       .X7_in(t24_7), .Y7(t25_7),
       .X8_in(t24_8), .Y8(t25_8),
       .X9_in(t24_9), .Y9(t25_9),
       .X10_in(t24_10), .Y10(t25_10),
       .X11_in(t24_11), .Y11(t25_11),
       .X12_in(t24_12), .Y12(t25_12),
       .X13_in(t24_13), .Y13(t25_13),
       .X14_in(t24_14), .Y14(t25_14),
       .X15_in(t24_15), .Y15(t25_15));


// latency=262, gap=128
   rc71527 stage25(.clk(clk), .reset(reset), .next(next_25), .next_out(next_26),
    .X0(t25_0), .Y0(t26_0),
    .X1(t25_1), .Y1(t26_1),
    .X2(t25_2), .Y2(t26_2),
    .X3(t25_3), .Y3(t26_3),
    .X4(t25_4), .Y4(t26_4),
    .X5(t25_5), .Y5(t26_5),
    .X6(t25_6), .Y6(t26_6),
    .X7(t25_7), .Y7(t26_7),
    .X8(t25_8), .Y8(t26_8),
    .X9(t25_9), .Y9(t26_9),
    .X10(t25_10), .Y10(t26_10),
    .X11(t25_11), .Y11(t26_11),
    .X12(t25_12), .Y12(t26_12),
    .X13(t25_13), .Y13(t26_13),
    .X14(t25_14), .Y14(t26_14),
    .X15(t25_15), .Y15(t26_15));


endmodule

// Latency: 262
// Gap: 128
module rc59568(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm59566 instPerm76519(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet59566(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [11:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 12'b111111111111;
        7'd1: control <= 12'b111111111111;
        7'd2: control <= 12'b111111111111;
        7'd3: control <= 12'b111111111111;
        7'd4: control <= 12'b111111111111;
        7'd5: control <= 12'b111111111111;
        7'd6: control <= 12'b111111111111;
        7'd7: control <= 12'b111111111111;
        7'd8: control <= 12'b111111111111;
        7'd9: control <= 12'b111111111111;
        7'd10: control <= 12'b111111111111;
        7'd11: control <= 12'b111111111111;
        7'd12: control <= 12'b111111111111;
        7'd13: control <= 12'b111111111111;
        7'd14: control <= 12'b111111111111;
        7'd15: control <= 12'b111111111111;
        7'd16: control <= 12'b000011111111;
        7'd17: control <= 12'b000011111111;
        7'd18: control <= 12'b000011111111;
        7'd19: control <= 12'b000011111111;
        7'd20: control <= 12'b000011111111;
        7'd21: control <= 12'b000011111111;
        7'd22: control <= 12'b000011111111;
        7'd23: control <= 12'b000011111111;
        7'd24: control <= 12'b000011111111;
        7'd25: control <= 12'b000011111111;
        7'd26: control <= 12'b000011111111;
        7'd27: control <= 12'b000011111111;
        7'd28: control <= 12'b000011111111;
        7'd29: control <= 12'b000011111111;
        7'd30: control <= 12'b000011111111;
        7'd31: control <= 12'b000011111111;
        7'd32: control <= 12'b111100001111;
        7'd33: control <= 12'b111100001111;
        7'd34: control <= 12'b111100001111;
        7'd35: control <= 12'b111100001111;
        7'd36: control <= 12'b111100001111;
        7'd37: control <= 12'b111100001111;
        7'd38: control <= 12'b111100001111;
        7'd39: control <= 12'b111100001111;
        7'd40: control <= 12'b111100001111;
        7'd41: control <= 12'b111100001111;
        7'd42: control <= 12'b111100001111;
        7'd43: control <= 12'b111100001111;
        7'd44: control <= 12'b111100001111;
        7'd45: control <= 12'b111100001111;
        7'd46: control <= 12'b111100001111;
        7'd47: control <= 12'b111100001111;
        7'd48: control <= 12'b000000001111;
        7'd49: control <= 12'b000000001111;
        7'd50: control <= 12'b000000001111;
        7'd51: control <= 12'b000000001111;
        7'd52: control <= 12'b000000001111;
        7'd53: control <= 12'b000000001111;
        7'd54: control <= 12'b000000001111;
        7'd55: control <= 12'b000000001111;
        7'd56: control <= 12'b000000001111;
        7'd57: control <= 12'b000000001111;
        7'd58: control <= 12'b000000001111;
        7'd59: control <= 12'b000000001111;
        7'd60: control <= 12'b000000001111;
        7'd61: control <= 12'b000000001111;
        7'd62: control <= 12'b000000001111;
        7'd63: control <= 12'b000000001111;
        7'd64: control <= 12'b111111110000;
        7'd65: control <= 12'b111111110000;
        7'd66: control <= 12'b111111110000;
        7'd67: control <= 12'b111111110000;
        7'd68: control <= 12'b111111110000;
        7'd69: control <= 12'b111111110000;
        7'd70: control <= 12'b111111110000;
        7'd71: control <= 12'b111111110000;
        7'd72: control <= 12'b111111110000;
        7'd73: control <= 12'b111111110000;
        7'd74: control <= 12'b111111110000;
        7'd75: control <= 12'b111111110000;
        7'd76: control <= 12'b111111110000;
        7'd77: control <= 12'b111111110000;
        7'd78: control <= 12'b111111110000;
        7'd79: control <= 12'b111111110000;
        7'd80: control <= 12'b000011110000;
        7'd81: control <= 12'b000011110000;
        7'd82: control <= 12'b000011110000;
        7'd83: control <= 12'b000011110000;
        7'd84: control <= 12'b000011110000;
        7'd85: control <= 12'b000011110000;
        7'd86: control <= 12'b000011110000;
        7'd87: control <= 12'b000011110000;
        7'd88: control <= 12'b000011110000;
        7'd89: control <= 12'b000011110000;
        7'd90: control <= 12'b000011110000;
        7'd91: control <= 12'b000011110000;
        7'd92: control <= 12'b000011110000;
        7'd93: control <= 12'b000011110000;
        7'd94: control <= 12'b000011110000;
        7'd95: control <= 12'b000011110000;
        7'd96: control <= 12'b111100000000;
        7'd97: control <= 12'b111100000000;
        7'd98: control <= 12'b111100000000;
        7'd99: control <= 12'b111100000000;
        7'd100: control <= 12'b111100000000;
        7'd101: control <= 12'b111100000000;
        7'd102: control <= 12'b111100000000;
        7'd103: control <= 12'b111100000000;
        7'd104: control <= 12'b111100000000;
        7'd105: control <= 12'b111100000000;
        7'd106: control <= 12'b111100000000;
        7'd107: control <= 12'b111100000000;
        7'd108: control <= 12'b111100000000;
        7'd109: control <= 12'b111100000000;
        7'd110: control <= 12'b111100000000;
        7'd111: control <= 12'b111100000000;
        7'd112: control <= 12'b000000000000;
        7'd113: control <= 12'b000000000000;
        7'd114: control <= 12'b000000000000;
        7'd115: control <= 12'b000000000000;
        7'd116: control <= 12'b000000000000;
        7'd117: control <= 12'b000000000000;
        7'd118: control <= 12'b000000000000;
        7'd119: control <= 12'b000000000000;
        7'd120: control <= 12'b000000000000;
        7'd121: control <= 12'b000000000000;
        7'd122: control <= 12'b000000000000;
        7'd123: control <= 12'b000000000000;
        7'd124: control <= 12'b000000000000;
        7'd125: control <= 12'b000000000000;
        7'd126: control <= 12'b000000000000;
        7'd127: control <= 12'b000000000000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [11:0] control0;
   reg [11:0] control1;
   reg [11:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[11] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[11] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[10] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[10] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[9] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[9] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[8] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[8] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= (control1[7] == 0) ? t6_0 : t6_1;
         t7_1 <= (control1[7] == 0) ? t6_1 : t6_0;
         t7_2 <= (control1[6] == 0) ? t6_2 : t6_3;
         t7_3 <= (control1[6] == 0) ? t6_3 : t6_2;
         t7_4 <= (control1[5] == 0) ? t6_4 : t6_5;
         t7_5 <= (control1[5] == 0) ? t6_5 : t6_4;
         t7_6 <= (control1[4] == 0) ? t6_6 : t6_7;
         t7_7 <= (control1[4] == 0) ? t6_7 : t6_6;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= (control2[3] == 0) ? t8_0 : t8_1;
         t9_1 <= (control2[3] == 0) ? t8_1 : t8_0;
         t9_2 <= (control2[2] == 0) ? t8_2 : t8_3;
         t9_3 <= (control2[2] == 0) ? t8_3 : t8_2;
         t9_4 <= (control2[1] == 0) ? t8_4 : t8_5;
         t9_5 <= (control2[1] == 0) ? t8_5 : t8_4;
         t9_6 <= (control2[0] == 0) ? t8_6 : t8_7;
         t9_7 <= (control2[0] == 0) ? t8_7 : t8_6;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm59566(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm0;
   assign tm0 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76524(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76525(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_76536(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76537(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_76540(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76541(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_76544(.X(tm0), .Y(tm0_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76547(.X(tm0_d), .Y(tm0_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_76552(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 112;
	     {1'd0,  7'd1}: s1rd0 <= 120;
	     {1'd0,  7'd2}: s1rd0 <= 116;
	     {1'd0,  7'd3}: s1rd0 <= 124;
	     {1'd0,  7'd4}: s1rd0 <= 114;
	     {1'd0,  7'd5}: s1rd0 <= 122;
	     {1'd0,  7'd6}: s1rd0 <= 118;
	     {1'd0,  7'd7}: s1rd0 <= 126;
	     {1'd0,  7'd8}: s1rd0 <= 113;
	     {1'd0,  7'd9}: s1rd0 <= 121;
	     {1'd0,  7'd10}: s1rd0 <= 117;
	     {1'd0,  7'd11}: s1rd0 <= 125;
	     {1'd0,  7'd12}: s1rd0 <= 115;
	     {1'd0,  7'd13}: s1rd0 <= 123;
	     {1'd0,  7'd14}: s1rd0 <= 119;
	     {1'd0,  7'd15}: s1rd0 <= 127;
	     {1'd0,  7'd16}: s1rd0 <= 48;
	     {1'd0,  7'd17}: s1rd0 <= 56;
	     {1'd0,  7'd18}: s1rd0 <= 52;
	     {1'd0,  7'd19}: s1rd0 <= 60;
	     {1'd0,  7'd20}: s1rd0 <= 50;
	     {1'd0,  7'd21}: s1rd0 <= 58;
	     {1'd0,  7'd22}: s1rd0 <= 54;
	     {1'd0,  7'd23}: s1rd0 <= 62;
	     {1'd0,  7'd24}: s1rd0 <= 49;
	     {1'd0,  7'd25}: s1rd0 <= 57;
	     {1'd0,  7'd26}: s1rd0 <= 53;
	     {1'd0,  7'd27}: s1rd0 <= 61;
	     {1'd0,  7'd28}: s1rd0 <= 51;
	     {1'd0,  7'd29}: s1rd0 <= 59;
	     {1'd0,  7'd30}: s1rd0 <= 55;
	     {1'd0,  7'd31}: s1rd0 <= 63;
	     {1'd0,  7'd32}: s1rd0 <= 80;
	     {1'd0,  7'd33}: s1rd0 <= 88;
	     {1'd0,  7'd34}: s1rd0 <= 84;
	     {1'd0,  7'd35}: s1rd0 <= 92;
	     {1'd0,  7'd36}: s1rd0 <= 82;
	     {1'd0,  7'd37}: s1rd0 <= 90;
	     {1'd0,  7'd38}: s1rd0 <= 86;
	     {1'd0,  7'd39}: s1rd0 <= 94;
	     {1'd0,  7'd40}: s1rd0 <= 81;
	     {1'd0,  7'd41}: s1rd0 <= 89;
	     {1'd0,  7'd42}: s1rd0 <= 85;
	     {1'd0,  7'd43}: s1rd0 <= 93;
	     {1'd0,  7'd44}: s1rd0 <= 83;
	     {1'd0,  7'd45}: s1rd0 <= 91;
	     {1'd0,  7'd46}: s1rd0 <= 87;
	     {1'd0,  7'd47}: s1rd0 <= 95;
	     {1'd0,  7'd48}: s1rd0 <= 16;
	     {1'd0,  7'd49}: s1rd0 <= 24;
	     {1'd0,  7'd50}: s1rd0 <= 20;
	     {1'd0,  7'd51}: s1rd0 <= 28;
	     {1'd0,  7'd52}: s1rd0 <= 18;
	     {1'd0,  7'd53}: s1rd0 <= 26;
	     {1'd0,  7'd54}: s1rd0 <= 22;
	     {1'd0,  7'd55}: s1rd0 <= 30;
	     {1'd0,  7'd56}: s1rd0 <= 17;
	     {1'd0,  7'd57}: s1rd0 <= 25;
	     {1'd0,  7'd58}: s1rd0 <= 21;
	     {1'd0,  7'd59}: s1rd0 <= 29;
	     {1'd0,  7'd60}: s1rd0 <= 19;
	     {1'd0,  7'd61}: s1rd0 <= 27;
	     {1'd0,  7'd62}: s1rd0 <= 23;
	     {1'd0,  7'd63}: s1rd0 <= 31;
	     {1'd0,  7'd64}: s1rd0 <= 96;
	     {1'd0,  7'd65}: s1rd0 <= 104;
	     {1'd0,  7'd66}: s1rd0 <= 100;
	     {1'd0,  7'd67}: s1rd0 <= 108;
	     {1'd0,  7'd68}: s1rd0 <= 98;
	     {1'd0,  7'd69}: s1rd0 <= 106;
	     {1'd0,  7'd70}: s1rd0 <= 102;
	     {1'd0,  7'd71}: s1rd0 <= 110;
	     {1'd0,  7'd72}: s1rd0 <= 97;
	     {1'd0,  7'd73}: s1rd0 <= 105;
	     {1'd0,  7'd74}: s1rd0 <= 101;
	     {1'd0,  7'd75}: s1rd0 <= 109;
	     {1'd0,  7'd76}: s1rd0 <= 99;
	     {1'd0,  7'd77}: s1rd0 <= 107;
	     {1'd0,  7'd78}: s1rd0 <= 103;
	     {1'd0,  7'd79}: s1rd0 <= 111;
	     {1'd0,  7'd80}: s1rd0 <= 32;
	     {1'd0,  7'd81}: s1rd0 <= 40;
	     {1'd0,  7'd82}: s1rd0 <= 36;
	     {1'd0,  7'd83}: s1rd0 <= 44;
	     {1'd0,  7'd84}: s1rd0 <= 34;
	     {1'd0,  7'd85}: s1rd0 <= 42;
	     {1'd0,  7'd86}: s1rd0 <= 38;
	     {1'd0,  7'd87}: s1rd0 <= 46;
	     {1'd0,  7'd88}: s1rd0 <= 33;
	     {1'd0,  7'd89}: s1rd0 <= 41;
	     {1'd0,  7'd90}: s1rd0 <= 37;
	     {1'd0,  7'd91}: s1rd0 <= 45;
	     {1'd0,  7'd92}: s1rd0 <= 35;
	     {1'd0,  7'd93}: s1rd0 <= 43;
	     {1'd0,  7'd94}: s1rd0 <= 39;
	     {1'd0,  7'd95}: s1rd0 <= 47;
	     {1'd0,  7'd96}: s1rd0 <= 64;
	     {1'd0,  7'd97}: s1rd0 <= 72;
	     {1'd0,  7'd98}: s1rd0 <= 68;
	     {1'd0,  7'd99}: s1rd0 <= 76;
	     {1'd0,  7'd100}: s1rd0 <= 66;
	     {1'd0,  7'd101}: s1rd0 <= 74;
	     {1'd0,  7'd102}: s1rd0 <= 70;
	     {1'd0,  7'd103}: s1rd0 <= 78;
	     {1'd0,  7'd104}: s1rd0 <= 65;
	     {1'd0,  7'd105}: s1rd0 <= 73;
	     {1'd0,  7'd106}: s1rd0 <= 69;
	     {1'd0,  7'd107}: s1rd0 <= 77;
	     {1'd0,  7'd108}: s1rd0 <= 67;
	     {1'd0,  7'd109}: s1rd0 <= 75;
	     {1'd0,  7'd110}: s1rd0 <= 71;
	     {1'd0,  7'd111}: s1rd0 <= 79;
	     {1'd0,  7'd112}: s1rd0 <= 0;
	     {1'd0,  7'd113}: s1rd0 <= 8;
	     {1'd0,  7'd114}: s1rd0 <= 4;
	     {1'd0,  7'd115}: s1rd0 <= 12;
	     {1'd0,  7'd116}: s1rd0 <= 2;
	     {1'd0,  7'd117}: s1rd0 <= 10;
	     {1'd0,  7'd118}: s1rd0 <= 6;
	     {1'd0,  7'd119}: s1rd0 <= 14;
	     {1'd0,  7'd120}: s1rd0 <= 1;
	     {1'd0,  7'd121}: s1rd0 <= 9;
	     {1'd0,  7'd122}: s1rd0 <= 5;
	     {1'd0,  7'd123}: s1rd0 <= 13;
	     {1'd0,  7'd124}: s1rd0 <= 3;
	     {1'd0,  7'd125}: s1rd0 <= 11;
	     {1'd0,  7'd126}: s1rd0 <= 7;
	     {1'd0,  7'd127}: s1rd0 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 48;
	     {1'd0,  7'd1}: s1rd1 <= 56;
	     {1'd0,  7'd2}: s1rd1 <= 52;
	     {1'd0,  7'd3}: s1rd1 <= 60;
	     {1'd0,  7'd4}: s1rd1 <= 50;
	     {1'd0,  7'd5}: s1rd1 <= 58;
	     {1'd0,  7'd6}: s1rd1 <= 54;
	     {1'd0,  7'd7}: s1rd1 <= 62;
	     {1'd0,  7'd8}: s1rd1 <= 49;
	     {1'd0,  7'd9}: s1rd1 <= 57;
	     {1'd0,  7'd10}: s1rd1 <= 53;
	     {1'd0,  7'd11}: s1rd1 <= 61;
	     {1'd0,  7'd12}: s1rd1 <= 51;
	     {1'd0,  7'd13}: s1rd1 <= 59;
	     {1'd0,  7'd14}: s1rd1 <= 55;
	     {1'd0,  7'd15}: s1rd1 <= 63;
	     {1'd0,  7'd16}: s1rd1 <= 112;
	     {1'd0,  7'd17}: s1rd1 <= 120;
	     {1'd0,  7'd18}: s1rd1 <= 116;
	     {1'd0,  7'd19}: s1rd1 <= 124;
	     {1'd0,  7'd20}: s1rd1 <= 114;
	     {1'd0,  7'd21}: s1rd1 <= 122;
	     {1'd0,  7'd22}: s1rd1 <= 118;
	     {1'd0,  7'd23}: s1rd1 <= 126;
	     {1'd0,  7'd24}: s1rd1 <= 113;
	     {1'd0,  7'd25}: s1rd1 <= 121;
	     {1'd0,  7'd26}: s1rd1 <= 117;
	     {1'd0,  7'd27}: s1rd1 <= 125;
	     {1'd0,  7'd28}: s1rd1 <= 115;
	     {1'd0,  7'd29}: s1rd1 <= 123;
	     {1'd0,  7'd30}: s1rd1 <= 119;
	     {1'd0,  7'd31}: s1rd1 <= 127;
	     {1'd0,  7'd32}: s1rd1 <= 16;
	     {1'd0,  7'd33}: s1rd1 <= 24;
	     {1'd0,  7'd34}: s1rd1 <= 20;
	     {1'd0,  7'd35}: s1rd1 <= 28;
	     {1'd0,  7'd36}: s1rd1 <= 18;
	     {1'd0,  7'd37}: s1rd1 <= 26;
	     {1'd0,  7'd38}: s1rd1 <= 22;
	     {1'd0,  7'd39}: s1rd1 <= 30;
	     {1'd0,  7'd40}: s1rd1 <= 17;
	     {1'd0,  7'd41}: s1rd1 <= 25;
	     {1'd0,  7'd42}: s1rd1 <= 21;
	     {1'd0,  7'd43}: s1rd1 <= 29;
	     {1'd0,  7'd44}: s1rd1 <= 19;
	     {1'd0,  7'd45}: s1rd1 <= 27;
	     {1'd0,  7'd46}: s1rd1 <= 23;
	     {1'd0,  7'd47}: s1rd1 <= 31;
	     {1'd0,  7'd48}: s1rd1 <= 80;
	     {1'd0,  7'd49}: s1rd1 <= 88;
	     {1'd0,  7'd50}: s1rd1 <= 84;
	     {1'd0,  7'd51}: s1rd1 <= 92;
	     {1'd0,  7'd52}: s1rd1 <= 82;
	     {1'd0,  7'd53}: s1rd1 <= 90;
	     {1'd0,  7'd54}: s1rd1 <= 86;
	     {1'd0,  7'd55}: s1rd1 <= 94;
	     {1'd0,  7'd56}: s1rd1 <= 81;
	     {1'd0,  7'd57}: s1rd1 <= 89;
	     {1'd0,  7'd58}: s1rd1 <= 85;
	     {1'd0,  7'd59}: s1rd1 <= 93;
	     {1'd0,  7'd60}: s1rd1 <= 83;
	     {1'd0,  7'd61}: s1rd1 <= 91;
	     {1'd0,  7'd62}: s1rd1 <= 87;
	     {1'd0,  7'd63}: s1rd1 <= 95;
	     {1'd0,  7'd64}: s1rd1 <= 32;
	     {1'd0,  7'd65}: s1rd1 <= 40;
	     {1'd0,  7'd66}: s1rd1 <= 36;
	     {1'd0,  7'd67}: s1rd1 <= 44;
	     {1'd0,  7'd68}: s1rd1 <= 34;
	     {1'd0,  7'd69}: s1rd1 <= 42;
	     {1'd0,  7'd70}: s1rd1 <= 38;
	     {1'd0,  7'd71}: s1rd1 <= 46;
	     {1'd0,  7'd72}: s1rd1 <= 33;
	     {1'd0,  7'd73}: s1rd1 <= 41;
	     {1'd0,  7'd74}: s1rd1 <= 37;
	     {1'd0,  7'd75}: s1rd1 <= 45;
	     {1'd0,  7'd76}: s1rd1 <= 35;
	     {1'd0,  7'd77}: s1rd1 <= 43;
	     {1'd0,  7'd78}: s1rd1 <= 39;
	     {1'd0,  7'd79}: s1rd1 <= 47;
	     {1'd0,  7'd80}: s1rd1 <= 96;
	     {1'd0,  7'd81}: s1rd1 <= 104;
	     {1'd0,  7'd82}: s1rd1 <= 100;
	     {1'd0,  7'd83}: s1rd1 <= 108;
	     {1'd0,  7'd84}: s1rd1 <= 98;
	     {1'd0,  7'd85}: s1rd1 <= 106;
	     {1'd0,  7'd86}: s1rd1 <= 102;
	     {1'd0,  7'd87}: s1rd1 <= 110;
	     {1'd0,  7'd88}: s1rd1 <= 97;
	     {1'd0,  7'd89}: s1rd1 <= 105;
	     {1'd0,  7'd90}: s1rd1 <= 101;
	     {1'd0,  7'd91}: s1rd1 <= 109;
	     {1'd0,  7'd92}: s1rd1 <= 99;
	     {1'd0,  7'd93}: s1rd1 <= 107;
	     {1'd0,  7'd94}: s1rd1 <= 103;
	     {1'd0,  7'd95}: s1rd1 <= 111;
	     {1'd0,  7'd96}: s1rd1 <= 0;
	     {1'd0,  7'd97}: s1rd1 <= 8;
	     {1'd0,  7'd98}: s1rd1 <= 4;
	     {1'd0,  7'd99}: s1rd1 <= 12;
	     {1'd0,  7'd100}: s1rd1 <= 2;
	     {1'd0,  7'd101}: s1rd1 <= 10;
	     {1'd0,  7'd102}: s1rd1 <= 6;
	     {1'd0,  7'd103}: s1rd1 <= 14;
	     {1'd0,  7'd104}: s1rd1 <= 1;
	     {1'd0,  7'd105}: s1rd1 <= 9;
	     {1'd0,  7'd106}: s1rd1 <= 5;
	     {1'd0,  7'd107}: s1rd1 <= 13;
	     {1'd0,  7'd108}: s1rd1 <= 3;
	     {1'd0,  7'd109}: s1rd1 <= 11;
	     {1'd0,  7'd110}: s1rd1 <= 7;
	     {1'd0,  7'd111}: s1rd1 <= 15;
	     {1'd0,  7'd112}: s1rd1 <= 64;
	     {1'd0,  7'd113}: s1rd1 <= 72;
	     {1'd0,  7'd114}: s1rd1 <= 68;
	     {1'd0,  7'd115}: s1rd1 <= 76;
	     {1'd0,  7'd116}: s1rd1 <= 66;
	     {1'd0,  7'd117}: s1rd1 <= 74;
	     {1'd0,  7'd118}: s1rd1 <= 70;
	     {1'd0,  7'd119}: s1rd1 <= 78;
	     {1'd0,  7'd120}: s1rd1 <= 65;
	     {1'd0,  7'd121}: s1rd1 <= 73;
	     {1'd0,  7'd122}: s1rd1 <= 69;
	     {1'd0,  7'd123}: s1rd1 <= 77;
	     {1'd0,  7'd124}: s1rd1 <= 67;
	     {1'd0,  7'd125}: s1rd1 <= 75;
	     {1'd0,  7'd126}: s1rd1 <= 71;
	     {1'd0,  7'd127}: s1rd1 <= 79;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 80;
	     {1'd0,  7'd1}: s1rd2 <= 88;
	     {1'd0,  7'd2}: s1rd2 <= 84;
	     {1'd0,  7'd3}: s1rd2 <= 92;
	     {1'd0,  7'd4}: s1rd2 <= 82;
	     {1'd0,  7'd5}: s1rd2 <= 90;
	     {1'd0,  7'd6}: s1rd2 <= 86;
	     {1'd0,  7'd7}: s1rd2 <= 94;
	     {1'd0,  7'd8}: s1rd2 <= 81;
	     {1'd0,  7'd9}: s1rd2 <= 89;
	     {1'd0,  7'd10}: s1rd2 <= 85;
	     {1'd0,  7'd11}: s1rd2 <= 93;
	     {1'd0,  7'd12}: s1rd2 <= 83;
	     {1'd0,  7'd13}: s1rd2 <= 91;
	     {1'd0,  7'd14}: s1rd2 <= 87;
	     {1'd0,  7'd15}: s1rd2 <= 95;
	     {1'd0,  7'd16}: s1rd2 <= 16;
	     {1'd0,  7'd17}: s1rd2 <= 24;
	     {1'd0,  7'd18}: s1rd2 <= 20;
	     {1'd0,  7'd19}: s1rd2 <= 28;
	     {1'd0,  7'd20}: s1rd2 <= 18;
	     {1'd0,  7'd21}: s1rd2 <= 26;
	     {1'd0,  7'd22}: s1rd2 <= 22;
	     {1'd0,  7'd23}: s1rd2 <= 30;
	     {1'd0,  7'd24}: s1rd2 <= 17;
	     {1'd0,  7'd25}: s1rd2 <= 25;
	     {1'd0,  7'd26}: s1rd2 <= 21;
	     {1'd0,  7'd27}: s1rd2 <= 29;
	     {1'd0,  7'd28}: s1rd2 <= 19;
	     {1'd0,  7'd29}: s1rd2 <= 27;
	     {1'd0,  7'd30}: s1rd2 <= 23;
	     {1'd0,  7'd31}: s1rd2 <= 31;
	     {1'd0,  7'd32}: s1rd2 <= 112;
	     {1'd0,  7'd33}: s1rd2 <= 120;
	     {1'd0,  7'd34}: s1rd2 <= 116;
	     {1'd0,  7'd35}: s1rd2 <= 124;
	     {1'd0,  7'd36}: s1rd2 <= 114;
	     {1'd0,  7'd37}: s1rd2 <= 122;
	     {1'd0,  7'd38}: s1rd2 <= 118;
	     {1'd0,  7'd39}: s1rd2 <= 126;
	     {1'd0,  7'd40}: s1rd2 <= 113;
	     {1'd0,  7'd41}: s1rd2 <= 121;
	     {1'd0,  7'd42}: s1rd2 <= 117;
	     {1'd0,  7'd43}: s1rd2 <= 125;
	     {1'd0,  7'd44}: s1rd2 <= 115;
	     {1'd0,  7'd45}: s1rd2 <= 123;
	     {1'd0,  7'd46}: s1rd2 <= 119;
	     {1'd0,  7'd47}: s1rd2 <= 127;
	     {1'd0,  7'd48}: s1rd2 <= 48;
	     {1'd0,  7'd49}: s1rd2 <= 56;
	     {1'd0,  7'd50}: s1rd2 <= 52;
	     {1'd0,  7'd51}: s1rd2 <= 60;
	     {1'd0,  7'd52}: s1rd2 <= 50;
	     {1'd0,  7'd53}: s1rd2 <= 58;
	     {1'd0,  7'd54}: s1rd2 <= 54;
	     {1'd0,  7'd55}: s1rd2 <= 62;
	     {1'd0,  7'd56}: s1rd2 <= 49;
	     {1'd0,  7'd57}: s1rd2 <= 57;
	     {1'd0,  7'd58}: s1rd2 <= 53;
	     {1'd0,  7'd59}: s1rd2 <= 61;
	     {1'd0,  7'd60}: s1rd2 <= 51;
	     {1'd0,  7'd61}: s1rd2 <= 59;
	     {1'd0,  7'd62}: s1rd2 <= 55;
	     {1'd0,  7'd63}: s1rd2 <= 63;
	     {1'd0,  7'd64}: s1rd2 <= 64;
	     {1'd0,  7'd65}: s1rd2 <= 72;
	     {1'd0,  7'd66}: s1rd2 <= 68;
	     {1'd0,  7'd67}: s1rd2 <= 76;
	     {1'd0,  7'd68}: s1rd2 <= 66;
	     {1'd0,  7'd69}: s1rd2 <= 74;
	     {1'd0,  7'd70}: s1rd2 <= 70;
	     {1'd0,  7'd71}: s1rd2 <= 78;
	     {1'd0,  7'd72}: s1rd2 <= 65;
	     {1'd0,  7'd73}: s1rd2 <= 73;
	     {1'd0,  7'd74}: s1rd2 <= 69;
	     {1'd0,  7'd75}: s1rd2 <= 77;
	     {1'd0,  7'd76}: s1rd2 <= 67;
	     {1'd0,  7'd77}: s1rd2 <= 75;
	     {1'd0,  7'd78}: s1rd2 <= 71;
	     {1'd0,  7'd79}: s1rd2 <= 79;
	     {1'd0,  7'd80}: s1rd2 <= 0;
	     {1'd0,  7'd81}: s1rd2 <= 8;
	     {1'd0,  7'd82}: s1rd2 <= 4;
	     {1'd0,  7'd83}: s1rd2 <= 12;
	     {1'd0,  7'd84}: s1rd2 <= 2;
	     {1'd0,  7'd85}: s1rd2 <= 10;
	     {1'd0,  7'd86}: s1rd2 <= 6;
	     {1'd0,  7'd87}: s1rd2 <= 14;
	     {1'd0,  7'd88}: s1rd2 <= 1;
	     {1'd0,  7'd89}: s1rd2 <= 9;
	     {1'd0,  7'd90}: s1rd2 <= 5;
	     {1'd0,  7'd91}: s1rd2 <= 13;
	     {1'd0,  7'd92}: s1rd2 <= 3;
	     {1'd0,  7'd93}: s1rd2 <= 11;
	     {1'd0,  7'd94}: s1rd2 <= 7;
	     {1'd0,  7'd95}: s1rd2 <= 15;
	     {1'd0,  7'd96}: s1rd2 <= 96;
	     {1'd0,  7'd97}: s1rd2 <= 104;
	     {1'd0,  7'd98}: s1rd2 <= 100;
	     {1'd0,  7'd99}: s1rd2 <= 108;
	     {1'd0,  7'd100}: s1rd2 <= 98;
	     {1'd0,  7'd101}: s1rd2 <= 106;
	     {1'd0,  7'd102}: s1rd2 <= 102;
	     {1'd0,  7'd103}: s1rd2 <= 110;
	     {1'd0,  7'd104}: s1rd2 <= 97;
	     {1'd0,  7'd105}: s1rd2 <= 105;
	     {1'd0,  7'd106}: s1rd2 <= 101;
	     {1'd0,  7'd107}: s1rd2 <= 109;
	     {1'd0,  7'd108}: s1rd2 <= 99;
	     {1'd0,  7'd109}: s1rd2 <= 107;
	     {1'd0,  7'd110}: s1rd2 <= 103;
	     {1'd0,  7'd111}: s1rd2 <= 111;
	     {1'd0,  7'd112}: s1rd2 <= 32;
	     {1'd0,  7'd113}: s1rd2 <= 40;
	     {1'd0,  7'd114}: s1rd2 <= 36;
	     {1'd0,  7'd115}: s1rd2 <= 44;
	     {1'd0,  7'd116}: s1rd2 <= 34;
	     {1'd0,  7'd117}: s1rd2 <= 42;
	     {1'd0,  7'd118}: s1rd2 <= 38;
	     {1'd0,  7'd119}: s1rd2 <= 46;
	     {1'd0,  7'd120}: s1rd2 <= 33;
	     {1'd0,  7'd121}: s1rd2 <= 41;
	     {1'd0,  7'd122}: s1rd2 <= 37;
	     {1'd0,  7'd123}: s1rd2 <= 45;
	     {1'd0,  7'd124}: s1rd2 <= 35;
	     {1'd0,  7'd125}: s1rd2 <= 43;
	     {1'd0,  7'd126}: s1rd2 <= 39;
	     {1'd0,  7'd127}: s1rd2 <= 47;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 16;
	     {1'd0,  7'd1}: s1rd3 <= 24;
	     {1'd0,  7'd2}: s1rd3 <= 20;
	     {1'd0,  7'd3}: s1rd3 <= 28;
	     {1'd0,  7'd4}: s1rd3 <= 18;
	     {1'd0,  7'd5}: s1rd3 <= 26;
	     {1'd0,  7'd6}: s1rd3 <= 22;
	     {1'd0,  7'd7}: s1rd3 <= 30;
	     {1'd0,  7'd8}: s1rd3 <= 17;
	     {1'd0,  7'd9}: s1rd3 <= 25;
	     {1'd0,  7'd10}: s1rd3 <= 21;
	     {1'd0,  7'd11}: s1rd3 <= 29;
	     {1'd0,  7'd12}: s1rd3 <= 19;
	     {1'd0,  7'd13}: s1rd3 <= 27;
	     {1'd0,  7'd14}: s1rd3 <= 23;
	     {1'd0,  7'd15}: s1rd3 <= 31;
	     {1'd0,  7'd16}: s1rd3 <= 80;
	     {1'd0,  7'd17}: s1rd3 <= 88;
	     {1'd0,  7'd18}: s1rd3 <= 84;
	     {1'd0,  7'd19}: s1rd3 <= 92;
	     {1'd0,  7'd20}: s1rd3 <= 82;
	     {1'd0,  7'd21}: s1rd3 <= 90;
	     {1'd0,  7'd22}: s1rd3 <= 86;
	     {1'd0,  7'd23}: s1rd3 <= 94;
	     {1'd0,  7'd24}: s1rd3 <= 81;
	     {1'd0,  7'd25}: s1rd3 <= 89;
	     {1'd0,  7'd26}: s1rd3 <= 85;
	     {1'd0,  7'd27}: s1rd3 <= 93;
	     {1'd0,  7'd28}: s1rd3 <= 83;
	     {1'd0,  7'd29}: s1rd3 <= 91;
	     {1'd0,  7'd30}: s1rd3 <= 87;
	     {1'd0,  7'd31}: s1rd3 <= 95;
	     {1'd0,  7'd32}: s1rd3 <= 48;
	     {1'd0,  7'd33}: s1rd3 <= 56;
	     {1'd0,  7'd34}: s1rd3 <= 52;
	     {1'd0,  7'd35}: s1rd3 <= 60;
	     {1'd0,  7'd36}: s1rd3 <= 50;
	     {1'd0,  7'd37}: s1rd3 <= 58;
	     {1'd0,  7'd38}: s1rd3 <= 54;
	     {1'd0,  7'd39}: s1rd3 <= 62;
	     {1'd0,  7'd40}: s1rd3 <= 49;
	     {1'd0,  7'd41}: s1rd3 <= 57;
	     {1'd0,  7'd42}: s1rd3 <= 53;
	     {1'd0,  7'd43}: s1rd3 <= 61;
	     {1'd0,  7'd44}: s1rd3 <= 51;
	     {1'd0,  7'd45}: s1rd3 <= 59;
	     {1'd0,  7'd46}: s1rd3 <= 55;
	     {1'd0,  7'd47}: s1rd3 <= 63;
	     {1'd0,  7'd48}: s1rd3 <= 112;
	     {1'd0,  7'd49}: s1rd3 <= 120;
	     {1'd0,  7'd50}: s1rd3 <= 116;
	     {1'd0,  7'd51}: s1rd3 <= 124;
	     {1'd0,  7'd52}: s1rd3 <= 114;
	     {1'd0,  7'd53}: s1rd3 <= 122;
	     {1'd0,  7'd54}: s1rd3 <= 118;
	     {1'd0,  7'd55}: s1rd3 <= 126;
	     {1'd0,  7'd56}: s1rd3 <= 113;
	     {1'd0,  7'd57}: s1rd3 <= 121;
	     {1'd0,  7'd58}: s1rd3 <= 117;
	     {1'd0,  7'd59}: s1rd3 <= 125;
	     {1'd0,  7'd60}: s1rd3 <= 115;
	     {1'd0,  7'd61}: s1rd3 <= 123;
	     {1'd0,  7'd62}: s1rd3 <= 119;
	     {1'd0,  7'd63}: s1rd3 <= 127;
	     {1'd0,  7'd64}: s1rd3 <= 0;
	     {1'd0,  7'd65}: s1rd3 <= 8;
	     {1'd0,  7'd66}: s1rd3 <= 4;
	     {1'd0,  7'd67}: s1rd3 <= 12;
	     {1'd0,  7'd68}: s1rd3 <= 2;
	     {1'd0,  7'd69}: s1rd3 <= 10;
	     {1'd0,  7'd70}: s1rd3 <= 6;
	     {1'd0,  7'd71}: s1rd3 <= 14;
	     {1'd0,  7'd72}: s1rd3 <= 1;
	     {1'd0,  7'd73}: s1rd3 <= 9;
	     {1'd0,  7'd74}: s1rd3 <= 5;
	     {1'd0,  7'd75}: s1rd3 <= 13;
	     {1'd0,  7'd76}: s1rd3 <= 3;
	     {1'd0,  7'd77}: s1rd3 <= 11;
	     {1'd0,  7'd78}: s1rd3 <= 7;
	     {1'd0,  7'd79}: s1rd3 <= 15;
	     {1'd0,  7'd80}: s1rd3 <= 64;
	     {1'd0,  7'd81}: s1rd3 <= 72;
	     {1'd0,  7'd82}: s1rd3 <= 68;
	     {1'd0,  7'd83}: s1rd3 <= 76;
	     {1'd0,  7'd84}: s1rd3 <= 66;
	     {1'd0,  7'd85}: s1rd3 <= 74;
	     {1'd0,  7'd86}: s1rd3 <= 70;
	     {1'd0,  7'd87}: s1rd3 <= 78;
	     {1'd0,  7'd88}: s1rd3 <= 65;
	     {1'd0,  7'd89}: s1rd3 <= 73;
	     {1'd0,  7'd90}: s1rd3 <= 69;
	     {1'd0,  7'd91}: s1rd3 <= 77;
	     {1'd0,  7'd92}: s1rd3 <= 67;
	     {1'd0,  7'd93}: s1rd3 <= 75;
	     {1'd0,  7'd94}: s1rd3 <= 71;
	     {1'd0,  7'd95}: s1rd3 <= 79;
	     {1'd0,  7'd96}: s1rd3 <= 32;
	     {1'd0,  7'd97}: s1rd3 <= 40;
	     {1'd0,  7'd98}: s1rd3 <= 36;
	     {1'd0,  7'd99}: s1rd3 <= 44;
	     {1'd0,  7'd100}: s1rd3 <= 34;
	     {1'd0,  7'd101}: s1rd3 <= 42;
	     {1'd0,  7'd102}: s1rd3 <= 38;
	     {1'd0,  7'd103}: s1rd3 <= 46;
	     {1'd0,  7'd104}: s1rd3 <= 33;
	     {1'd0,  7'd105}: s1rd3 <= 41;
	     {1'd0,  7'd106}: s1rd3 <= 37;
	     {1'd0,  7'd107}: s1rd3 <= 45;
	     {1'd0,  7'd108}: s1rd3 <= 35;
	     {1'd0,  7'd109}: s1rd3 <= 43;
	     {1'd0,  7'd110}: s1rd3 <= 39;
	     {1'd0,  7'd111}: s1rd3 <= 47;
	     {1'd0,  7'd112}: s1rd3 <= 96;
	     {1'd0,  7'd113}: s1rd3 <= 104;
	     {1'd0,  7'd114}: s1rd3 <= 100;
	     {1'd0,  7'd115}: s1rd3 <= 108;
	     {1'd0,  7'd116}: s1rd3 <= 98;
	     {1'd0,  7'd117}: s1rd3 <= 106;
	     {1'd0,  7'd118}: s1rd3 <= 102;
	     {1'd0,  7'd119}: s1rd3 <= 110;
	     {1'd0,  7'd120}: s1rd3 <= 97;
	     {1'd0,  7'd121}: s1rd3 <= 105;
	     {1'd0,  7'd122}: s1rd3 <= 101;
	     {1'd0,  7'd123}: s1rd3 <= 109;
	     {1'd0,  7'd124}: s1rd3 <= 99;
	     {1'd0,  7'd125}: s1rd3 <= 107;
	     {1'd0,  7'd126}: s1rd3 <= 103;
	     {1'd0,  7'd127}: s1rd3 <= 111;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 96;
	     {1'd0,  7'd1}: s1rd4 <= 104;
	     {1'd0,  7'd2}: s1rd4 <= 100;
	     {1'd0,  7'd3}: s1rd4 <= 108;
	     {1'd0,  7'd4}: s1rd4 <= 98;
	     {1'd0,  7'd5}: s1rd4 <= 106;
	     {1'd0,  7'd6}: s1rd4 <= 102;
	     {1'd0,  7'd7}: s1rd4 <= 110;
	     {1'd0,  7'd8}: s1rd4 <= 97;
	     {1'd0,  7'd9}: s1rd4 <= 105;
	     {1'd0,  7'd10}: s1rd4 <= 101;
	     {1'd0,  7'd11}: s1rd4 <= 109;
	     {1'd0,  7'd12}: s1rd4 <= 99;
	     {1'd0,  7'd13}: s1rd4 <= 107;
	     {1'd0,  7'd14}: s1rd4 <= 103;
	     {1'd0,  7'd15}: s1rd4 <= 111;
	     {1'd0,  7'd16}: s1rd4 <= 32;
	     {1'd0,  7'd17}: s1rd4 <= 40;
	     {1'd0,  7'd18}: s1rd4 <= 36;
	     {1'd0,  7'd19}: s1rd4 <= 44;
	     {1'd0,  7'd20}: s1rd4 <= 34;
	     {1'd0,  7'd21}: s1rd4 <= 42;
	     {1'd0,  7'd22}: s1rd4 <= 38;
	     {1'd0,  7'd23}: s1rd4 <= 46;
	     {1'd0,  7'd24}: s1rd4 <= 33;
	     {1'd0,  7'd25}: s1rd4 <= 41;
	     {1'd0,  7'd26}: s1rd4 <= 37;
	     {1'd0,  7'd27}: s1rd4 <= 45;
	     {1'd0,  7'd28}: s1rd4 <= 35;
	     {1'd0,  7'd29}: s1rd4 <= 43;
	     {1'd0,  7'd30}: s1rd4 <= 39;
	     {1'd0,  7'd31}: s1rd4 <= 47;
	     {1'd0,  7'd32}: s1rd4 <= 64;
	     {1'd0,  7'd33}: s1rd4 <= 72;
	     {1'd0,  7'd34}: s1rd4 <= 68;
	     {1'd0,  7'd35}: s1rd4 <= 76;
	     {1'd0,  7'd36}: s1rd4 <= 66;
	     {1'd0,  7'd37}: s1rd4 <= 74;
	     {1'd0,  7'd38}: s1rd4 <= 70;
	     {1'd0,  7'd39}: s1rd4 <= 78;
	     {1'd0,  7'd40}: s1rd4 <= 65;
	     {1'd0,  7'd41}: s1rd4 <= 73;
	     {1'd0,  7'd42}: s1rd4 <= 69;
	     {1'd0,  7'd43}: s1rd4 <= 77;
	     {1'd0,  7'd44}: s1rd4 <= 67;
	     {1'd0,  7'd45}: s1rd4 <= 75;
	     {1'd0,  7'd46}: s1rd4 <= 71;
	     {1'd0,  7'd47}: s1rd4 <= 79;
	     {1'd0,  7'd48}: s1rd4 <= 0;
	     {1'd0,  7'd49}: s1rd4 <= 8;
	     {1'd0,  7'd50}: s1rd4 <= 4;
	     {1'd0,  7'd51}: s1rd4 <= 12;
	     {1'd0,  7'd52}: s1rd4 <= 2;
	     {1'd0,  7'd53}: s1rd4 <= 10;
	     {1'd0,  7'd54}: s1rd4 <= 6;
	     {1'd0,  7'd55}: s1rd4 <= 14;
	     {1'd0,  7'd56}: s1rd4 <= 1;
	     {1'd0,  7'd57}: s1rd4 <= 9;
	     {1'd0,  7'd58}: s1rd4 <= 5;
	     {1'd0,  7'd59}: s1rd4 <= 13;
	     {1'd0,  7'd60}: s1rd4 <= 3;
	     {1'd0,  7'd61}: s1rd4 <= 11;
	     {1'd0,  7'd62}: s1rd4 <= 7;
	     {1'd0,  7'd63}: s1rd4 <= 15;
	     {1'd0,  7'd64}: s1rd4 <= 112;
	     {1'd0,  7'd65}: s1rd4 <= 120;
	     {1'd0,  7'd66}: s1rd4 <= 116;
	     {1'd0,  7'd67}: s1rd4 <= 124;
	     {1'd0,  7'd68}: s1rd4 <= 114;
	     {1'd0,  7'd69}: s1rd4 <= 122;
	     {1'd0,  7'd70}: s1rd4 <= 118;
	     {1'd0,  7'd71}: s1rd4 <= 126;
	     {1'd0,  7'd72}: s1rd4 <= 113;
	     {1'd0,  7'd73}: s1rd4 <= 121;
	     {1'd0,  7'd74}: s1rd4 <= 117;
	     {1'd0,  7'd75}: s1rd4 <= 125;
	     {1'd0,  7'd76}: s1rd4 <= 115;
	     {1'd0,  7'd77}: s1rd4 <= 123;
	     {1'd0,  7'd78}: s1rd4 <= 119;
	     {1'd0,  7'd79}: s1rd4 <= 127;
	     {1'd0,  7'd80}: s1rd4 <= 48;
	     {1'd0,  7'd81}: s1rd4 <= 56;
	     {1'd0,  7'd82}: s1rd4 <= 52;
	     {1'd0,  7'd83}: s1rd4 <= 60;
	     {1'd0,  7'd84}: s1rd4 <= 50;
	     {1'd0,  7'd85}: s1rd4 <= 58;
	     {1'd0,  7'd86}: s1rd4 <= 54;
	     {1'd0,  7'd87}: s1rd4 <= 62;
	     {1'd0,  7'd88}: s1rd4 <= 49;
	     {1'd0,  7'd89}: s1rd4 <= 57;
	     {1'd0,  7'd90}: s1rd4 <= 53;
	     {1'd0,  7'd91}: s1rd4 <= 61;
	     {1'd0,  7'd92}: s1rd4 <= 51;
	     {1'd0,  7'd93}: s1rd4 <= 59;
	     {1'd0,  7'd94}: s1rd4 <= 55;
	     {1'd0,  7'd95}: s1rd4 <= 63;
	     {1'd0,  7'd96}: s1rd4 <= 80;
	     {1'd0,  7'd97}: s1rd4 <= 88;
	     {1'd0,  7'd98}: s1rd4 <= 84;
	     {1'd0,  7'd99}: s1rd4 <= 92;
	     {1'd0,  7'd100}: s1rd4 <= 82;
	     {1'd0,  7'd101}: s1rd4 <= 90;
	     {1'd0,  7'd102}: s1rd4 <= 86;
	     {1'd0,  7'd103}: s1rd4 <= 94;
	     {1'd0,  7'd104}: s1rd4 <= 81;
	     {1'd0,  7'd105}: s1rd4 <= 89;
	     {1'd0,  7'd106}: s1rd4 <= 85;
	     {1'd0,  7'd107}: s1rd4 <= 93;
	     {1'd0,  7'd108}: s1rd4 <= 83;
	     {1'd0,  7'd109}: s1rd4 <= 91;
	     {1'd0,  7'd110}: s1rd4 <= 87;
	     {1'd0,  7'd111}: s1rd4 <= 95;
	     {1'd0,  7'd112}: s1rd4 <= 16;
	     {1'd0,  7'd113}: s1rd4 <= 24;
	     {1'd0,  7'd114}: s1rd4 <= 20;
	     {1'd0,  7'd115}: s1rd4 <= 28;
	     {1'd0,  7'd116}: s1rd4 <= 18;
	     {1'd0,  7'd117}: s1rd4 <= 26;
	     {1'd0,  7'd118}: s1rd4 <= 22;
	     {1'd0,  7'd119}: s1rd4 <= 30;
	     {1'd0,  7'd120}: s1rd4 <= 17;
	     {1'd0,  7'd121}: s1rd4 <= 25;
	     {1'd0,  7'd122}: s1rd4 <= 21;
	     {1'd0,  7'd123}: s1rd4 <= 29;
	     {1'd0,  7'd124}: s1rd4 <= 19;
	     {1'd0,  7'd125}: s1rd4 <= 27;
	     {1'd0,  7'd126}: s1rd4 <= 23;
	     {1'd0,  7'd127}: s1rd4 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 32;
	     {1'd0,  7'd1}: s1rd5 <= 40;
	     {1'd0,  7'd2}: s1rd5 <= 36;
	     {1'd0,  7'd3}: s1rd5 <= 44;
	     {1'd0,  7'd4}: s1rd5 <= 34;
	     {1'd0,  7'd5}: s1rd5 <= 42;
	     {1'd0,  7'd6}: s1rd5 <= 38;
	     {1'd0,  7'd7}: s1rd5 <= 46;
	     {1'd0,  7'd8}: s1rd5 <= 33;
	     {1'd0,  7'd9}: s1rd5 <= 41;
	     {1'd0,  7'd10}: s1rd5 <= 37;
	     {1'd0,  7'd11}: s1rd5 <= 45;
	     {1'd0,  7'd12}: s1rd5 <= 35;
	     {1'd0,  7'd13}: s1rd5 <= 43;
	     {1'd0,  7'd14}: s1rd5 <= 39;
	     {1'd0,  7'd15}: s1rd5 <= 47;
	     {1'd0,  7'd16}: s1rd5 <= 96;
	     {1'd0,  7'd17}: s1rd5 <= 104;
	     {1'd0,  7'd18}: s1rd5 <= 100;
	     {1'd0,  7'd19}: s1rd5 <= 108;
	     {1'd0,  7'd20}: s1rd5 <= 98;
	     {1'd0,  7'd21}: s1rd5 <= 106;
	     {1'd0,  7'd22}: s1rd5 <= 102;
	     {1'd0,  7'd23}: s1rd5 <= 110;
	     {1'd0,  7'd24}: s1rd5 <= 97;
	     {1'd0,  7'd25}: s1rd5 <= 105;
	     {1'd0,  7'd26}: s1rd5 <= 101;
	     {1'd0,  7'd27}: s1rd5 <= 109;
	     {1'd0,  7'd28}: s1rd5 <= 99;
	     {1'd0,  7'd29}: s1rd5 <= 107;
	     {1'd0,  7'd30}: s1rd5 <= 103;
	     {1'd0,  7'd31}: s1rd5 <= 111;
	     {1'd0,  7'd32}: s1rd5 <= 0;
	     {1'd0,  7'd33}: s1rd5 <= 8;
	     {1'd0,  7'd34}: s1rd5 <= 4;
	     {1'd0,  7'd35}: s1rd5 <= 12;
	     {1'd0,  7'd36}: s1rd5 <= 2;
	     {1'd0,  7'd37}: s1rd5 <= 10;
	     {1'd0,  7'd38}: s1rd5 <= 6;
	     {1'd0,  7'd39}: s1rd5 <= 14;
	     {1'd0,  7'd40}: s1rd5 <= 1;
	     {1'd0,  7'd41}: s1rd5 <= 9;
	     {1'd0,  7'd42}: s1rd5 <= 5;
	     {1'd0,  7'd43}: s1rd5 <= 13;
	     {1'd0,  7'd44}: s1rd5 <= 3;
	     {1'd0,  7'd45}: s1rd5 <= 11;
	     {1'd0,  7'd46}: s1rd5 <= 7;
	     {1'd0,  7'd47}: s1rd5 <= 15;
	     {1'd0,  7'd48}: s1rd5 <= 64;
	     {1'd0,  7'd49}: s1rd5 <= 72;
	     {1'd0,  7'd50}: s1rd5 <= 68;
	     {1'd0,  7'd51}: s1rd5 <= 76;
	     {1'd0,  7'd52}: s1rd5 <= 66;
	     {1'd0,  7'd53}: s1rd5 <= 74;
	     {1'd0,  7'd54}: s1rd5 <= 70;
	     {1'd0,  7'd55}: s1rd5 <= 78;
	     {1'd0,  7'd56}: s1rd5 <= 65;
	     {1'd0,  7'd57}: s1rd5 <= 73;
	     {1'd0,  7'd58}: s1rd5 <= 69;
	     {1'd0,  7'd59}: s1rd5 <= 77;
	     {1'd0,  7'd60}: s1rd5 <= 67;
	     {1'd0,  7'd61}: s1rd5 <= 75;
	     {1'd0,  7'd62}: s1rd5 <= 71;
	     {1'd0,  7'd63}: s1rd5 <= 79;
	     {1'd0,  7'd64}: s1rd5 <= 48;
	     {1'd0,  7'd65}: s1rd5 <= 56;
	     {1'd0,  7'd66}: s1rd5 <= 52;
	     {1'd0,  7'd67}: s1rd5 <= 60;
	     {1'd0,  7'd68}: s1rd5 <= 50;
	     {1'd0,  7'd69}: s1rd5 <= 58;
	     {1'd0,  7'd70}: s1rd5 <= 54;
	     {1'd0,  7'd71}: s1rd5 <= 62;
	     {1'd0,  7'd72}: s1rd5 <= 49;
	     {1'd0,  7'd73}: s1rd5 <= 57;
	     {1'd0,  7'd74}: s1rd5 <= 53;
	     {1'd0,  7'd75}: s1rd5 <= 61;
	     {1'd0,  7'd76}: s1rd5 <= 51;
	     {1'd0,  7'd77}: s1rd5 <= 59;
	     {1'd0,  7'd78}: s1rd5 <= 55;
	     {1'd0,  7'd79}: s1rd5 <= 63;
	     {1'd0,  7'd80}: s1rd5 <= 112;
	     {1'd0,  7'd81}: s1rd5 <= 120;
	     {1'd0,  7'd82}: s1rd5 <= 116;
	     {1'd0,  7'd83}: s1rd5 <= 124;
	     {1'd0,  7'd84}: s1rd5 <= 114;
	     {1'd0,  7'd85}: s1rd5 <= 122;
	     {1'd0,  7'd86}: s1rd5 <= 118;
	     {1'd0,  7'd87}: s1rd5 <= 126;
	     {1'd0,  7'd88}: s1rd5 <= 113;
	     {1'd0,  7'd89}: s1rd5 <= 121;
	     {1'd0,  7'd90}: s1rd5 <= 117;
	     {1'd0,  7'd91}: s1rd5 <= 125;
	     {1'd0,  7'd92}: s1rd5 <= 115;
	     {1'd0,  7'd93}: s1rd5 <= 123;
	     {1'd0,  7'd94}: s1rd5 <= 119;
	     {1'd0,  7'd95}: s1rd5 <= 127;
	     {1'd0,  7'd96}: s1rd5 <= 16;
	     {1'd0,  7'd97}: s1rd5 <= 24;
	     {1'd0,  7'd98}: s1rd5 <= 20;
	     {1'd0,  7'd99}: s1rd5 <= 28;
	     {1'd0,  7'd100}: s1rd5 <= 18;
	     {1'd0,  7'd101}: s1rd5 <= 26;
	     {1'd0,  7'd102}: s1rd5 <= 22;
	     {1'd0,  7'd103}: s1rd5 <= 30;
	     {1'd0,  7'd104}: s1rd5 <= 17;
	     {1'd0,  7'd105}: s1rd5 <= 25;
	     {1'd0,  7'd106}: s1rd5 <= 21;
	     {1'd0,  7'd107}: s1rd5 <= 29;
	     {1'd0,  7'd108}: s1rd5 <= 19;
	     {1'd0,  7'd109}: s1rd5 <= 27;
	     {1'd0,  7'd110}: s1rd5 <= 23;
	     {1'd0,  7'd111}: s1rd5 <= 31;
	     {1'd0,  7'd112}: s1rd5 <= 80;
	     {1'd0,  7'd113}: s1rd5 <= 88;
	     {1'd0,  7'd114}: s1rd5 <= 84;
	     {1'd0,  7'd115}: s1rd5 <= 92;
	     {1'd0,  7'd116}: s1rd5 <= 82;
	     {1'd0,  7'd117}: s1rd5 <= 90;
	     {1'd0,  7'd118}: s1rd5 <= 86;
	     {1'd0,  7'd119}: s1rd5 <= 94;
	     {1'd0,  7'd120}: s1rd5 <= 81;
	     {1'd0,  7'd121}: s1rd5 <= 89;
	     {1'd0,  7'd122}: s1rd5 <= 85;
	     {1'd0,  7'd123}: s1rd5 <= 93;
	     {1'd0,  7'd124}: s1rd5 <= 83;
	     {1'd0,  7'd125}: s1rd5 <= 91;
	     {1'd0,  7'd126}: s1rd5 <= 87;
	     {1'd0,  7'd127}: s1rd5 <= 95;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 64;
	     {1'd0,  7'd1}: s1rd6 <= 72;
	     {1'd0,  7'd2}: s1rd6 <= 68;
	     {1'd0,  7'd3}: s1rd6 <= 76;
	     {1'd0,  7'd4}: s1rd6 <= 66;
	     {1'd0,  7'd5}: s1rd6 <= 74;
	     {1'd0,  7'd6}: s1rd6 <= 70;
	     {1'd0,  7'd7}: s1rd6 <= 78;
	     {1'd0,  7'd8}: s1rd6 <= 65;
	     {1'd0,  7'd9}: s1rd6 <= 73;
	     {1'd0,  7'd10}: s1rd6 <= 69;
	     {1'd0,  7'd11}: s1rd6 <= 77;
	     {1'd0,  7'd12}: s1rd6 <= 67;
	     {1'd0,  7'd13}: s1rd6 <= 75;
	     {1'd0,  7'd14}: s1rd6 <= 71;
	     {1'd0,  7'd15}: s1rd6 <= 79;
	     {1'd0,  7'd16}: s1rd6 <= 0;
	     {1'd0,  7'd17}: s1rd6 <= 8;
	     {1'd0,  7'd18}: s1rd6 <= 4;
	     {1'd0,  7'd19}: s1rd6 <= 12;
	     {1'd0,  7'd20}: s1rd6 <= 2;
	     {1'd0,  7'd21}: s1rd6 <= 10;
	     {1'd0,  7'd22}: s1rd6 <= 6;
	     {1'd0,  7'd23}: s1rd6 <= 14;
	     {1'd0,  7'd24}: s1rd6 <= 1;
	     {1'd0,  7'd25}: s1rd6 <= 9;
	     {1'd0,  7'd26}: s1rd6 <= 5;
	     {1'd0,  7'd27}: s1rd6 <= 13;
	     {1'd0,  7'd28}: s1rd6 <= 3;
	     {1'd0,  7'd29}: s1rd6 <= 11;
	     {1'd0,  7'd30}: s1rd6 <= 7;
	     {1'd0,  7'd31}: s1rd6 <= 15;
	     {1'd0,  7'd32}: s1rd6 <= 96;
	     {1'd0,  7'd33}: s1rd6 <= 104;
	     {1'd0,  7'd34}: s1rd6 <= 100;
	     {1'd0,  7'd35}: s1rd6 <= 108;
	     {1'd0,  7'd36}: s1rd6 <= 98;
	     {1'd0,  7'd37}: s1rd6 <= 106;
	     {1'd0,  7'd38}: s1rd6 <= 102;
	     {1'd0,  7'd39}: s1rd6 <= 110;
	     {1'd0,  7'd40}: s1rd6 <= 97;
	     {1'd0,  7'd41}: s1rd6 <= 105;
	     {1'd0,  7'd42}: s1rd6 <= 101;
	     {1'd0,  7'd43}: s1rd6 <= 109;
	     {1'd0,  7'd44}: s1rd6 <= 99;
	     {1'd0,  7'd45}: s1rd6 <= 107;
	     {1'd0,  7'd46}: s1rd6 <= 103;
	     {1'd0,  7'd47}: s1rd6 <= 111;
	     {1'd0,  7'd48}: s1rd6 <= 32;
	     {1'd0,  7'd49}: s1rd6 <= 40;
	     {1'd0,  7'd50}: s1rd6 <= 36;
	     {1'd0,  7'd51}: s1rd6 <= 44;
	     {1'd0,  7'd52}: s1rd6 <= 34;
	     {1'd0,  7'd53}: s1rd6 <= 42;
	     {1'd0,  7'd54}: s1rd6 <= 38;
	     {1'd0,  7'd55}: s1rd6 <= 46;
	     {1'd0,  7'd56}: s1rd6 <= 33;
	     {1'd0,  7'd57}: s1rd6 <= 41;
	     {1'd0,  7'd58}: s1rd6 <= 37;
	     {1'd0,  7'd59}: s1rd6 <= 45;
	     {1'd0,  7'd60}: s1rd6 <= 35;
	     {1'd0,  7'd61}: s1rd6 <= 43;
	     {1'd0,  7'd62}: s1rd6 <= 39;
	     {1'd0,  7'd63}: s1rd6 <= 47;
	     {1'd0,  7'd64}: s1rd6 <= 80;
	     {1'd0,  7'd65}: s1rd6 <= 88;
	     {1'd0,  7'd66}: s1rd6 <= 84;
	     {1'd0,  7'd67}: s1rd6 <= 92;
	     {1'd0,  7'd68}: s1rd6 <= 82;
	     {1'd0,  7'd69}: s1rd6 <= 90;
	     {1'd0,  7'd70}: s1rd6 <= 86;
	     {1'd0,  7'd71}: s1rd6 <= 94;
	     {1'd0,  7'd72}: s1rd6 <= 81;
	     {1'd0,  7'd73}: s1rd6 <= 89;
	     {1'd0,  7'd74}: s1rd6 <= 85;
	     {1'd0,  7'd75}: s1rd6 <= 93;
	     {1'd0,  7'd76}: s1rd6 <= 83;
	     {1'd0,  7'd77}: s1rd6 <= 91;
	     {1'd0,  7'd78}: s1rd6 <= 87;
	     {1'd0,  7'd79}: s1rd6 <= 95;
	     {1'd0,  7'd80}: s1rd6 <= 16;
	     {1'd0,  7'd81}: s1rd6 <= 24;
	     {1'd0,  7'd82}: s1rd6 <= 20;
	     {1'd0,  7'd83}: s1rd6 <= 28;
	     {1'd0,  7'd84}: s1rd6 <= 18;
	     {1'd0,  7'd85}: s1rd6 <= 26;
	     {1'd0,  7'd86}: s1rd6 <= 22;
	     {1'd0,  7'd87}: s1rd6 <= 30;
	     {1'd0,  7'd88}: s1rd6 <= 17;
	     {1'd0,  7'd89}: s1rd6 <= 25;
	     {1'd0,  7'd90}: s1rd6 <= 21;
	     {1'd0,  7'd91}: s1rd6 <= 29;
	     {1'd0,  7'd92}: s1rd6 <= 19;
	     {1'd0,  7'd93}: s1rd6 <= 27;
	     {1'd0,  7'd94}: s1rd6 <= 23;
	     {1'd0,  7'd95}: s1rd6 <= 31;
	     {1'd0,  7'd96}: s1rd6 <= 112;
	     {1'd0,  7'd97}: s1rd6 <= 120;
	     {1'd0,  7'd98}: s1rd6 <= 116;
	     {1'd0,  7'd99}: s1rd6 <= 124;
	     {1'd0,  7'd100}: s1rd6 <= 114;
	     {1'd0,  7'd101}: s1rd6 <= 122;
	     {1'd0,  7'd102}: s1rd6 <= 118;
	     {1'd0,  7'd103}: s1rd6 <= 126;
	     {1'd0,  7'd104}: s1rd6 <= 113;
	     {1'd0,  7'd105}: s1rd6 <= 121;
	     {1'd0,  7'd106}: s1rd6 <= 117;
	     {1'd0,  7'd107}: s1rd6 <= 125;
	     {1'd0,  7'd108}: s1rd6 <= 115;
	     {1'd0,  7'd109}: s1rd6 <= 123;
	     {1'd0,  7'd110}: s1rd6 <= 119;
	     {1'd0,  7'd111}: s1rd6 <= 127;
	     {1'd0,  7'd112}: s1rd6 <= 48;
	     {1'd0,  7'd113}: s1rd6 <= 56;
	     {1'd0,  7'd114}: s1rd6 <= 52;
	     {1'd0,  7'd115}: s1rd6 <= 60;
	     {1'd0,  7'd116}: s1rd6 <= 50;
	     {1'd0,  7'd117}: s1rd6 <= 58;
	     {1'd0,  7'd118}: s1rd6 <= 54;
	     {1'd0,  7'd119}: s1rd6 <= 62;
	     {1'd0,  7'd120}: s1rd6 <= 49;
	     {1'd0,  7'd121}: s1rd6 <= 57;
	     {1'd0,  7'd122}: s1rd6 <= 53;
	     {1'd0,  7'd123}: s1rd6 <= 61;
	     {1'd0,  7'd124}: s1rd6 <= 51;
	     {1'd0,  7'd125}: s1rd6 <= 59;
	     {1'd0,  7'd126}: s1rd6 <= 55;
	     {1'd0,  7'd127}: s1rd6 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm0_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 8;
	     {1'd0,  7'd2}: s1rd7 <= 4;
	     {1'd0,  7'd3}: s1rd7 <= 12;
	     {1'd0,  7'd4}: s1rd7 <= 2;
	     {1'd0,  7'd5}: s1rd7 <= 10;
	     {1'd0,  7'd6}: s1rd7 <= 6;
	     {1'd0,  7'd7}: s1rd7 <= 14;
	     {1'd0,  7'd8}: s1rd7 <= 1;
	     {1'd0,  7'd9}: s1rd7 <= 9;
	     {1'd0,  7'd10}: s1rd7 <= 5;
	     {1'd0,  7'd11}: s1rd7 <= 13;
	     {1'd0,  7'd12}: s1rd7 <= 3;
	     {1'd0,  7'd13}: s1rd7 <= 11;
	     {1'd0,  7'd14}: s1rd7 <= 7;
	     {1'd0,  7'd15}: s1rd7 <= 15;
	     {1'd0,  7'd16}: s1rd7 <= 64;
	     {1'd0,  7'd17}: s1rd7 <= 72;
	     {1'd0,  7'd18}: s1rd7 <= 68;
	     {1'd0,  7'd19}: s1rd7 <= 76;
	     {1'd0,  7'd20}: s1rd7 <= 66;
	     {1'd0,  7'd21}: s1rd7 <= 74;
	     {1'd0,  7'd22}: s1rd7 <= 70;
	     {1'd0,  7'd23}: s1rd7 <= 78;
	     {1'd0,  7'd24}: s1rd7 <= 65;
	     {1'd0,  7'd25}: s1rd7 <= 73;
	     {1'd0,  7'd26}: s1rd7 <= 69;
	     {1'd0,  7'd27}: s1rd7 <= 77;
	     {1'd0,  7'd28}: s1rd7 <= 67;
	     {1'd0,  7'd29}: s1rd7 <= 75;
	     {1'd0,  7'd30}: s1rd7 <= 71;
	     {1'd0,  7'd31}: s1rd7 <= 79;
	     {1'd0,  7'd32}: s1rd7 <= 32;
	     {1'd0,  7'd33}: s1rd7 <= 40;
	     {1'd0,  7'd34}: s1rd7 <= 36;
	     {1'd0,  7'd35}: s1rd7 <= 44;
	     {1'd0,  7'd36}: s1rd7 <= 34;
	     {1'd0,  7'd37}: s1rd7 <= 42;
	     {1'd0,  7'd38}: s1rd7 <= 38;
	     {1'd0,  7'd39}: s1rd7 <= 46;
	     {1'd0,  7'd40}: s1rd7 <= 33;
	     {1'd0,  7'd41}: s1rd7 <= 41;
	     {1'd0,  7'd42}: s1rd7 <= 37;
	     {1'd0,  7'd43}: s1rd7 <= 45;
	     {1'd0,  7'd44}: s1rd7 <= 35;
	     {1'd0,  7'd45}: s1rd7 <= 43;
	     {1'd0,  7'd46}: s1rd7 <= 39;
	     {1'd0,  7'd47}: s1rd7 <= 47;
	     {1'd0,  7'd48}: s1rd7 <= 96;
	     {1'd0,  7'd49}: s1rd7 <= 104;
	     {1'd0,  7'd50}: s1rd7 <= 100;
	     {1'd0,  7'd51}: s1rd7 <= 108;
	     {1'd0,  7'd52}: s1rd7 <= 98;
	     {1'd0,  7'd53}: s1rd7 <= 106;
	     {1'd0,  7'd54}: s1rd7 <= 102;
	     {1'd0,  7'd55}: s1rd7 <= 110;
	     {1'd0,  7'd56}: s1rd7 <= 97;
	     {1'd0,  7'd57}: s1rd7 <= 105;
	     {1'd0,  7'd58}: s1rd7 <= 101;
	     {1'd0,  7'd59}: s1rd7 <= 109;
	     {1'd0,  7'd60}: s1rd7 <= 99;
	     {1'd0,  7'd61}: s1rd7 <= 107;
	     {1'd0,  7'd62}: s1rd7 <= 103;
	     {1'd0,  7'd63}: s1rd7 <= 111;
	     {1'd0,  7'd64}: s1rd7 <= 16;
	     {1'd0,  7'd65}: s1rd7 <= 24;
	     {1'd0,  7'd66}: s1rd7 <= 20;
	     {1'd0,  7'd67}: s1rd7 <= 28;
	     {1'd0,  7'd68}: s1rd7 <= 18;
	     {1'd0,  7'd69}: s1rd7 <= 26;
	     {1'd0,  7'd70}: s1rd7 <= 22;
	     {1'd0,  7'd71}: s1rd7 <= 30;
	     {1'd0,  7'd72}: s1rd7 <= 17;
	     {1'd0,  7'd73}: s1rd7 <= 25;
	     {1'd0,  7'd74}: s1rd7 <= 21;
	     {1'd0,  7'd75}: s1rd7 <= 29;
	     {1'd0,  7'd76}: s1rd7 <= 19;
	     {1'd0,  7'd77}: s1rd7 <= 27;
	     {1'd0,  7'd78}: s1rd7 <= 23;
	     {1'd0,  7'd79}: s1rd7 <= 31;
	     {1'd0,  7'd80}: s1rd7 <= 80;
	     {1'd0,  7'd81}: s1rd7 <= 88;
	     {1'd0,  7'd82}: s1rd7 <= 84;
	     {1'd0,  7'd83}: s1rd7 <= 92;
	     {1'd0,  7'd84}: s1rd7 <= 82;
	     {1'd0,  7'd85}: s1rd7 <= 90;
	     {1'd0,  7'd86}: s1rd7 <= 86;
	     {1'd0,  7'd87}: s1rd7 <= 94;
	     {1'd0,  7'd88}: s1rd7 <= 81;
	     {1'd0,  7'd89}: s1rd7 <= 89;
	     {1'd0,  7'd90}: s1rd7 <= 85;
	     {1'd0,  7'd91}: s1rd7 <= 93;
	     {1'd0,  7'd92}: s1rd7 <= 83;
	     {1'd0,  7'd93}: s1rd7 <= 91;
	     {1'd0,  7'd94}: s1rd7 <= 87;
	     {1'd0,  7'd95}: s1rd7 <= 95;
	     {1'd0,  7'd96}: s1rd7 <= 48;
	     {1'd0,  7'd97}: s1rd7 <= 56;
	     {1'd0,  7'd98}: s1rd7 <= 52;
	     {1'd0,  7'd99}: s1rd7 <= 60;
	     {1'd0,  7'd100}: s1rd7 <= 50;
	     {1'd0,  7'd101}: s1rd7 <= 58;
	     {1'd0,  7'd102}: s1rd7 <= 54;
	     {1'd0,  7'd103}: s1rd7 <= 62;
	     {1'd0,  7'd104}: s1rd7 <= 49;
	     {1'd0,  7'd105}: s1rd7 <= 57;
	     {1'd0,  7'd106}: s1rd7 <= 53;
	     {1'd0,  7'd107}: s1rd7 <= 61;
	     {1'd0,  7'd108}: s1rd7 <= 51;
	     {1'd0,  7'd109}: s1rd7 <= 59;
	     {1'd0,  7'd110}: s1rd7 <= 55;
	     {1'd0,  7'd111}: s1rd7 <= 63;
	     {1'd0,  7'd112}: s1rd7 <= 112;
	     {1'd0,  7'd113}: s1rd7 <= 120;
	     {1'd0,  7'd114}: s1rd7 <= 116;
	     {1'd0,  7'd115}: s1rd7 <= 124;
	     {1'd0,  7'd116}: s1rd7 <= 114;
	     {1'd0,  7'd117}: s1rd7 <= 122;
	     {1'd0,  7'd118}: s1rd7 <= 118;
	     {1'd0,  7'd119}: s1rd7 <= 126;
	     {1'd0,  7'd120}: s1rd7 <= 113;
	     {1'd0,  7'd121}: s1rd7 <= 121;
	     {1'd0,  7'd122}: s1rd7 <= 117;
	     {1'd0,  7'd123}: s1rd7 <= 125;
	     {1'd0,  7'd124}: s1rd7 <= 115;
	     {1'd0,  7'd125}: s1rd7 <= 123;
	     {1'd0,  7'd126}: s1rd7 <= 119;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet59566 sw(tm0_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 112;
	      {1'd0, 7'd1}: s2wr0 <= 113;
	      {1'd0, 7'd2}: s2wr0 <= 114;
	      {1'd0, 7'd3}: s2wr0 <= 115;
	      {1'd0, 7'd4}: s2wr0 <= 116;
	      {1'd0, 7'd5}: s2wr0 <= 117;
	      {1'd0, 7'd6}: s2wr0 <= 118;
	      {1'd0, 7'd7}: s2wr0 <= 119;
	      {1'd0, 7'd8}: s2wr0 <= 120;
	      {1'd0, 7'd9}: s2wr0 <= 121;
	      {1'd0, 7'd10}: s2wr0 <= 122;
	      {1'd0, 7'd11}: s2wr0 <= 123;
	      {1'd0, 7'd12}: s2wr0 <= 124;
	      {1'd0, 7'd13}: s2wr0 <= 125;
	      {1'd0, 7'd14}: s2wr0 <= 126;
	      {1'd0, 7'd15}: s2wr0 <= 127;
	      {1'd0, 7'd16}: s2wr0 <= 48;
	      {1'd0, 7'd17}: s2wr0 <= 49;
	      {1'd0, 7'd18}: s2wr0 <= 50;
	      {1'd0, 7'd19}: s2wr0 <= 51;
	      {1'd0, 7'd20}: s2wr0 <= 52;
	      {1'd0, 7'd21}: s2wr0 <= 53;
	      {1'd0, 7'd22}: s2wr0 <= 54;
	      {1'd0, 7'd23}: s2wr0 <= 55;
	      {1'd0, 7'd24}: s2wr0 <= 56;
	      {1'd0, 7'd25}: s2wr0 <= 57;
	      {1'd0, 7'd26}: s2wr0 <= 58;
	      {1'd0, 7'd27}: s2wr0 <= 59;
	      {1'd0, 7'd28}: s2wr0 <= 60;
	      {1'd0, 7'd29}: s2wr0 <= 61;
	      {1'd0, 7'd30}: s2wr0 <= 62;
	      {1'd0, 7'd31}: s2wr0 <= 63;
	      {1'd0, 7'd32}: s2wr0 <= 80;
	      {1'd0, 7'd33}: s2wr0 <= 81;
	      {1'd0, 7'd34}: s2wr0 <= 82;
	      {1'd0, 7'd35}: s2wr0 <= 83;
	      {1'd0, 7'd36}: s2wr0 <= 84;
	      {1'd0, 7'd37}: s2wr0 <= 85;
	      {1'd0, 7'd38}: s2wr0 <= 86;
	      {1'd0, 7'd39}: s2wr0 <= 87;
	      {1'd0, 7'd40}: s2wr0 <= 88;
	      {1'd0, 7'd41}: s2wr0 <= 89;
	      {1'd0, 7'd42}: s2wr0 <= 90;
	      {1'd0, 7'd43}: s2wr0 <= 91;
	      {1'd0, 7'd44}: s2wr0 <= 92;
	      {1'd0, 7'd45}: s2wr0 <= 93;
	      {1'd0, 7'd46}: s2wr0 <= 94;
	      {1'd0, 7'd47}: s2wr0 <= 95;
	      {1'd0, 7'd48}: s2wr0 <= 16;
	      {1'd0, 7'd49}: s2wr0 <= 17;
	      {1'd0, 7'd50}: s2wr0 <= 18;
	      {1'd0, 7'd51}: s2wr0 <= 19;
	      {1'd0, 7'd52}: s2wr0 <= 20;
	      {1'd0, 7'd53}: s2wr0 <= 21;
	      {1'd0, 7'd54}: s2wr0 <= 22;
	      {1'd0, 7'd55}: s2wr0 <= 23;
	      {1'd0, 7'd56}: s2wr0 <= 24;
	      {1'd0, 7'd57}: s2wr0 <= 25;
	      {1'd0, 7'd58}: s2wr0 <= 26;
	      {1'd0, 7'd59}: s2wr0 <= 27;
	      {1'd0, 7'd60}: s2wr0 <= 28;
	      {1'd0, 7'd61}: s2wr0 <= 29;
	      {1'd0, 7'd62}: s2wr0 <= 30;
	      {1'd0, 7'd63}: s2wr0 <= 31;
	      {1'd0, 7'd64}: s2wr0 <= 96;
	      {1'd0, 7'd65}: s2wr0 <= 97;
	      {1'd0, 7'd66}: s2wr0 <= 98;
	      {1'd0, 7'd67}: s2wr0 <= 99;
	      {1'd0, 7'd68}: s2wr0 <= 100;
	      {1'd0, 7'd69}: s2wr0 <= 101;
	      {1'd0, 7'd70}: s2wr0 <= 102;
	      {1'd0, 7'd71}: s2wr0 <= 103;
	      {1'd0, 7'd72}: s2wr0 <= 104;
	      {1'd0, 7'd73}: s2wr0 <= 105;
	      {1'd0, 7'd74}: s2wr0 <= 106;
	      {1'd0, 7'd75}: s2wr0 <= 107;
	      {1'd0, 7'd76}: s2wr0 <= 108;
	      {1'd0, 7'd77}: s2wr0 <= 109;
	      {1'd0, 7'd78}: s2wr0 <= 110;
	      {1'd0, 7'd79}: s2wr0 <= 111;
	      {1'd0, 7'd80}: s2wr0 <= 32;
	      {1'd0, 7'd81}: s2wr0 <= 33;
	      {1'd0, 7'd82}: s2wr0 <= 34;
	      {1'd0, 7'd83}: s2wr0 <= 35;
	      {1'd0, 7'd84}: s2wr0 <= 36;
	      {1'd0, 7'd85}: s2wr0 <= 37;
	      {1'd0, 7'd86}: s2wr0 <= 38;
	      {1'd0, 7'd87}: s2wr0 <= 39;
	      {1'd0, 7'd88}: s2wr0 <= 40;
	      {1'd0, 7'd89}: s2wr0 <= 41;
	      {1'd0, 7'd90}: s2wr0 <= 42;
	      {1'd0, 7'd91}: s2wr0 <= 43;
	      {1'd0, 7'd92}: s2wr0 <= 44;
	      {1'd0, 7'd93}: s2wr0 <= 45;
	      {1'd0, 7'd94}: s2wr0 <= 46;
	      {1'd0, 7'd95}: s2wr0 <= 47;
	      {1'd0, 7'd96}: s2wr0 <= 64;
	      {1'd0, 7'd97}: s2wr0 <= 65;
	      {1'd0, 7'd98}: s2wr0 <= 66;
	      {1'd0, 7'd99}: s2wr0 <= 67;
	      {1'd0, 7'd100}: s2wr0 <= 68;
	      {1'd0, 7'd101}: s2wr0 <= 69;
	      {1'd0, 7'd102}: s2wr0 <= 70;
	      {1'd0, 7'd103}: s2wr0 <= 71;
	      {1'd0, 7'd104}: s2wr0 <= 72;
	      {1'd0, 7'd105}: s2wr0 <= 73;
	      {1'd0, 7'd106}: s2wr0 <= 74;
	      {1'd0, 7'd107}: s2wr0 <= 75;
	      {1'd0, 7'd108}: s2wr0 <= 76;
	      {1'd0, 7'd109}: s2wr0 <= 77;
	      {1'd0, 7'd110}: s2wr0 <= 78;
	      {1'd0, 7'd111}: s2wr0 <= 79;
	      {1'd0, 7'd112}: s2wr0 <= 0;
	      {1'd0, 7'd113}: s2wr0 <= 1;
	      {1'd0, 7'd114}: s2wr0 <= 2;
	      {1'd0, 7'd115}: s2wr0 <= 3;
	      {1'd0, 7'd116}: s2wr0 <= 4;
	      {1'd0, 7'd117}: s2wr0 <= 5;
	      {1'd0, 7'd118}: s2wr0 <= 6;
	      {1'd0, 7'd119}: s2wr0 <= 7;
	      {1'd0, 7'd120}: s2wr0 <= 8;
	      {1'd0, 7'd121}: s2wr0 <= 9;
	      {1'd0, 7'd122}: s2wr0 <= 10;
	      {1'd0, 7'd123}: s2wr0 <= 11;
	      {1'd0, 7'd124}: s2wr0 <= 12;
	      {1'd0, 7'd125}: s2wr0 <= 13;
	      {1'd0, 7'd126}: s2wr0 <= 14;
	      {1'd0, 7'd127}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 48;
	      {1'd0, 7'd1}: s2wr1 <= 49;
	      {1'd0, 7'd2}: s2wr1 <= 50;
	      {1'd0, 7'd3}: s2wr1 <= 51;
	      {1'd0, 7'd4}: s2wr1 <= 52;
	      {1'd0, 7'd5}: s2wr1 <= 53;
	      {1'd0, 7'd6}: s2wr1 <= 54;
	      {1'd0, 7'd7}: s2wr1 <= 55;
	      {1'd0, 7'd8}: s2wr1 <= 56;
	      {1'd0, 7'd9}: s2wr1 <= 57;
	      {1'd0, 7'd10}: s2wr1 <= 58;
	      {1'd0, 7'd11}: s2wr1 <= 59;
	      {1'd0, 7'd12}: s2wr1 <= 60;
	      {1'd0, 7'd13}: s2wr1 <= 61;
	      {1'd0, 7'd14}: s2wr1 <= 62;
	      {1'd0, 7'd15}: s2wr1 <= 63;
	      {1'd0, 7'd16}: s2wr1 <= 112;
	      {1'd0, 7'd17}: s2wr1 <= 113;
	      {1'd0, 7'd18}: s2wr1 <= 114;
	      {1'd0, 7'd19}: s2wr1 <= 115;
	      {1'd0, 7'd20}: s2wr1 <= 116;
	      {1'd0, 7'd21}: s2wr1 <= 117;
	      {1'd0, 7'd22}: s2wr1 <= 118;
	      {1'd0, 7'd23}: s2wr1 <= 119;
	      {1'd0, 7'd24}: s2wr1 <= 120;
	      {1'd0, 7'd25}: s2wr1 <= 121;
	      {1'd0, 7'd26}: s2wr1 <= 122;
	      {1'd0, 7'd27}: s2wr1 <= 123;
	      {1'd0, 7'd28}: s2wr1 <= 124;
	      {1'd0, 7'd29}: s2wr1 <= 125;
	      {1'd0, 7'd30}: s2wr1 <= 126;
	      {1'd0, 7'd31}: s2wr1 <= 127;
	      {1'd0, 7'd32}: s2wr1 <= 16;
	      {1'd0, 7'd33}: s2wr1 <= 17;
	      {1'd0, 7'd34}: s2wr1 <= 18;
	      {1'd0, 7'd35}: s2wr1 <= 19;
	      {1'd0, 7'd36}: s2wr1 <= 20;
	      {1'd0, 7'd37}: s2wr1 <= 21;
	      {1'd0, 7'd38}: s2wr1 <= 22;
	      {1'd0, 7'd39}: s2wr1 <= 23;
	      {1'd0, 7'd40}: s2wr1 <= 24;
	      {1'd0, 7'd41}: s2wr1 <= 25;
	      {1'd0, 7'd42}: s2wr1 <= 26;
	      {1'd0, 7'd43}: s2wr1 <= 27;
	      {1'd0, 7'd44}: s2wr1 <= 28;
	      {1'd0, 7'd45}: s2wr1 <= 29;
	      {1'd0, 7'd46}: s2wr1 <= 30;
	      {1'd0, 7'd47}: s2wr1 <= 31;
	      {1'd0, 7'd48}: s2wr1 <= 80;
	      {1'd0, 7'd49}: s2wr1 <= 81;
	      {1'd0, 7'd50}: s2wr1 <= 82;
	      {1'd0, 7'd51}: s2wr1 <= 83;
	      {1'd0, 7'd52}: s2wr1 <= 84;
	      {1'd0, 7'd53}: s2wr1 <= 85;
	      {1'd0, 7'd54}: s2wr1 <= 86;
	      {1'd0, 7'd55}: s2wr1 <= 87;
	      {1'd0, 7'd56}: s2wr1 <= 88;
	      {1'd0, 7'd57}: s2wr1 <= 89;
	      {1'd0, 7'd58}: s2wr1 <= 90;
	      {1'd0, 7'd59}: s2wr1 <= 91;
	      {1'd0, 7'd60}: s2wr1 <= 92;
	      {1'd0, 7'd61}: s2wr1 <= 93;
	      {1'd0, 7'd62}: s2wr1 <= 94;
	      {1'd0, 7'd63}: s2wr1 <= 95;
	      {1'd0, 7'd64}: s2wr1 <= 32;
	      {1'd0, 7'd65}: s2wr1 <= 33;
	      {1'd0, 7'd66}: s2wr1 <= 34;
	      {1'd0, 7'd67}: s2wr1 <= 35;
	      {1'd0, 7'd68}: s2wr1 <= 36;
	      {1'd0, 7'd69}: s2wr1 <= 37;
	      {1'd0, 7'd70}: s2wr1 <= 38;
	      {1'd0, 7'd71}: s2wr1 <= 39;
	      {1'd0, 7'd72}: s2wr1 <= 40;
	      {1'd0, 7'd73}: s2wr1 <= 41;
	      {1'd0, 7'd74}: s2wr1 <= 42;
	      {1'd0, 7'd75}: s2wr1 <= 43;
	      {1'd0, 7'd76}: s2wr1 <= 44;
	      {1'd0, 7'd77}: s2wr1 <= 45;
	      {1'd0, 7'd78}: s2wr1 <= 46;
	      {1'd0, 7'd79}: s2wr1 <= 47;
	      {1'd0, 7'd80}: s2wr1 <= 96;
	      {1'd0, 7'd81}: s2wr1 <= 97;
	      {1'd0, 7'd82}: s2wr1 <= 98;
	      {1'd0, 7'd83}: s2wr1 <= 99;
	      {1'd0, 7'd84}: s2wr1 <= 100;
	      {1'd0, 7'd85}: s2wr1 <= 101;
	      {1'd0, 7'd86}: s2wr1 <= 102;
	      {1'd0, 7'd87}: s2wr1 <= 103;
	      {1'd0, 7'd88}: s2wr1 <= 104;
	      {1'd0, 7'd89}: s2wr1 <= 105;
	      {1'd0, 7'd90}: s2wr1 <= 106;
	      {1'd0, 7'd91}: s2wr1 <= 107;
	      {1'd0, 7'd92}: s2wr1 <= 108;
	      {1'd0, 7'd93}: s2wr1 <= 109;
	      {1'd0, 7'd94}: s2wr1 <= 110;
	      {1'd0, 7'd95}: s2wr1 <= 111;
	      {1'd0, 7'd96}: s2wr1 <= 0;
	      {1'd0, 7'd97}: s2wr1 <= 1;
	      {1'd0, 7'd98}: s2wr1 <= 2;
	      {1'd0, 7'd99}: s2wr1 <= 3;
	      {1'd0, 7'd100}: s2wr1 <= 4;
	      {1'd0, 7'd101}: s2wr1 <= 5;
	      {1'd0, 7'd102}: s2wr1 <= 6;
	      {1'd0, 7'd103}: s2wr1 <= 7;
	      {1'd0, 7'd104}: s2wr1 <= 8;
	      {1'd0, 7'd105}: s2wr1 <= 9;
	      {1'd0, 7'd106}: s2wr1 <= 10;
	      {1'd0, 7'd107}: s2wr1 <= 11;
	      {1'd0, 7'd108}: s2wr1 <= 12;
	      {1'd0, 7'd109}: s2wr1 <= 13;
	      {1'd0, 7'd110}: s2wr1 <= 14;
	      {1'd0, 7'd111}: s2wr1 <= 15;
	      {1'd0, 7'd112}: s2wr1 <= 64;
	      {1'd0, 7'd113}: s2wr1 <= 65;
	      {1'd0, 7'd114}: s2wr1 <= 66;
	      {1'd0, 7'd115}: s2wr1 <= 67;
	      {1'd0, 7'd116}: s2wr1 <= 68;
	      {1'd0, 7'd117}: s2wr1 <= 69;
	      {1'd0, 7'd118}: s2wr1 <= 70;
	      {1'd0, 7'd119}: s2wr1 <= 71;
	      {1'd0, 7'd120}: s2wr1 <= 72;
	      {1'd0, 7'd121}: s2wr1 <= 73;
	      {1'd0, 7'd122}: s2wr1 <= 74;
	      {1'd0, 7'd123}: s2wr1 <= 75;
	      {1'd0, 7'd124}: s2wr1 <= 76;
	      {1'd0, 7'd125}: s2wr1 <= 77;
	      {1'd0, 7'd126}: s2wr1 <= 78;
	      {1'd0, 7'd127}: s2wr1 <= 79;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 80;
	      {1'd0, 7'd1}: s2wr2 <= 81;
	      {1'd0, 7'd2}: s2wr2 <= 82;
	      {1'd0, 7'd3}: s2wr2 <= 83;
	      {1'd0, 7'd4}: s2wr2 <= 84;
	      {1'd0, 7'd5}: s2wr2 <= 85;
	      {1'd0, 7'd6}: s2wr2 <= 86;
	      {1'd0, 7'd7}: s2wr2 <= 87;
	      {1'd0, 7'd8}: s2wr2 <= 88;
	      {1'd0, 7'd9}: s2wr2 <= 89;
	      {1'd0, 7'd10}: s2wr2 <= 90;
	      {1'd0, 7'd11}: s2wr2 <= 91;
	      {1'd0, 7'd12}: s2wr2 <= 92;
	      {1'd0, 7'd13}: s2wr2 <= 93;
	      {1'd0, 7'd14}: s2wr2 <= 94;
	      {1'd0, 7'd15}: s2wr2 <= 95;
	      {1'd0, 7'd16}: s2wr2 <= 16;
	      {1'd0, 7'd17}: s2wr2 <= 17;
	      {1'd0, 7'd18}: s2wr2 <= 18;
	      {1'd0, 7'd19}: s2wr2 <= 19;
	      {1'd0, 7'd20}: s2wr2 <= 20;
	      {1'd0, 7'd21}: s2wr2 <= 21;
	      {1'd0, 7'd22}: s2wr2 <= 22;
	      {1'd0, 7'd23}: s2wr2 <= 23;
	      {1'd0, 7'd24}: s2wr2 <= 24;
	      {1'd0, 7'd25}: s2wr2 <= 25;
	      {1'd0, 7'd26}: s2wr2 <= 26;
	      {1'd0, 7'd27}: s2wr2 <= 27;
	      {1'd0, 7'd28}: s2wr2 <= 28;
	      {1'd0, 7'd29}: s2wr2 <= 29;
	      {1'd0, 7'd30}: s2wr2 <= 30;
	      {1'd0, 7'd31}: s2wr2 <= 31;
	      {1'd0, 7'd32}: s2wr2 <= 112;
	      {1'd0, 7'd33}: s2wr2 <= 113;
	      {1'd0, 7'd34}: s2wr2 <= 114;
	      {1'd0, 7'd35}: s2wr2 <= 115;
	      {1'd0, 7'd36}: s2wr2 <= 116;
	      {1'd0, 7'd37}: s2wr2 <= 117;
	      {1'd0, 7'd38}: s2wr2 <= 118;
	      {1'd0, 7'd39}: s2wr2 <= 119;
	      {1'd0, 7'd40}: s2wr2 <= 120;
	      {1'd0, 7'd41}: s2wr2 <= 121;
	      {1'd0, 7'd42}: s2wr2 <= 122;
	      {1'd0, 7'd43}: s2wr2 <= 123;
	      {1'd0, 7'd44}: s2wr2 <= 124;
	      {1'd0, 7'd45}: s2wr2 <= 125;
	      {1'd0, 7'd46}: s2wr2 <= 126;
	      {1'd0, 7'd47}: s2wr2 <= 127;
	      {1'd0, 7'd48}: s2wr2 <= 48;
	      {1'd0, 7'd49}: s2wr2 <= 49;
	      {1'd0, 7'd50}: s2wr2 <= 50;
	      {1'd0, 7'd51}: s2wr2 <= 51;
	      {1'd0, 7'd52}: s2wr2 <= 52;
	      {1'd0, 7'd53}: s2wr2 <= 53;
	      {1'd0, 7'd54}: s2wr2 <= 54;
	      {1'd0, 7'd55}: s2wr2 <= 55;
	      {1'd0, 7'd56}: s2wr2 <= 56;
	      {1'd0, 7'd57}: s2wr2 <= 57;
	      {1'd0, 7'd58}: s2wr2 <= 58;
	      {1'd0, 7'd59}: s2wr2 <= 59;
	      {1'd0, 7'd60}: s2wr2 <= 60;
	      {1'd0, 7'd61}: s2wr2 <= 61;
	      {1'd0, 7'd62}: s2wr2 <= 62;
	      {1'd0, 7'd63}: s2wr2 <= 63;
	      {1'd0, 7'd64}: s2wr2 <= 64;
	      {1'd0, 7'd65}: s2wr2 <= 65;
	      {1'd0, 7'd66}: s2wr2 <= 66;
	      {1'd0, 7'd67}: s2wr2 <= 67;
	      {1'd0, 7'd68}: s2wr2 <= 68;
	      {1'd0, 7'd69}: s2wr2 <= 69;
	      {1'd0, 7'd70}: s2wr2 <= 70;
	      {1'd0, 7'd71}: s2wr2 <= 71;
	      {1'd0, 7'd72}: s2wr2 <= 72;
	      {1'd0, 7'd73}: s2wr2 <= 73;
	      {1'd0, 7'd74}: s2wr2 <= 74;
	      {1'd0, 7'd75}: s2wr2 <= 75;
	      {1'd0, 7'd76}: s2wr2 <= 76;
	      {1'd0, 7'd77}: s2wr2 <= 77;
	      {1'd0, 7'd78}: s2wr2 <= 78;
	      {1'd0, 7'd79}: s2wr2 <= 79;
	      {1'd0, 7'd80}: s2wr2 <= 0;
	      {1'd0, 7'd81}: s2wr2 <= 1;
	      {1'd0, 7'd82}: s2wr2 <= 2;
	      {1'd0, 7'd83}: s2wr2 <= 3;
	      {1'd0, 7'd84}: s2wr2 <= 4;
	      {1'd0, 7'd85}: s2wr2 <= 5;
	      {1'd0, 7'd86}: s2wr2 <= 6;
	      {1'd0, 7'd87}: s2wr2 <= 7;
	      {1'd0, 7'd88}: s2wr2 <= 8;
	      {1'd0, 7'd89}: s2wr2 <= 9;
	      {1'd0, 7'd90}: s2wr2 <= 10;
	      {1'd0, 7'd91}: s2wr2 <= 11;
	      {1'd0, 7'd92}: s2wr2 <= 12;
	      {1'd0, 7'd93}: s2wr2 <= 13;
	      {1'd0, 7'd94}: s2wr2 <= 14;
	      {1'd0, 7'd95}: s2wr2 <= 15;
	      {1'd0, 7'd96}: s2wr2 <= 96;
	      {1'd0, 7'd97}: s2wr2 <= 97;
	      {1'd0, 7'd98}: s2wr2 <= 98;
	      {1'd0, 7'd99}: s2wr2 <= 99;
	      {1'd0, 7'd100}: s2wr2 <= 100;
	      {1'd0, 7'd101}: s2wr2 <= 101;
	      {1'd0, 7'd102}: s2wr2 <= 102;
	      {1'd0, 7'd103}: s2wr2 <= 103;
	      {1'd0, 7'd104}: s2wr2 <= 104;
	      {1'd0, 7'd105}: s2wr2 <= 105;
	      {1'd0, 7'd106}: s2wr2 <= 106;
	      {1'd0, 7'd107}: s2wr2 <= 107;
	      {1'd0, 7'd108}: s2wr2 <= 108;
	      {1'd0, 7'd109}: s2wr2 <= 109;
	      {1'd0, 7'd110}: s2wr2 <= 110;
	      {1'd0, 7'd111}: s2wr2 <= 111;
	      {1'd0, 7'd112}: s2wr2 <= 32;
	      {1'd0, 7'd113}: s2wr2 <= 33;
	      {1'd0, 7'd114}: s2wr2 <= 34;
	      {1'd0, 7'd115}: s2wr2 <= 35;
	      {1'd0, 7'd116}: s2wr2 <= 36;
	      {1'd0, 7'd117}: s2wr2 <= 37;
	      {1'd0, 7'd118}: s2wr2 <= 38;
	      {1'd0, 7'd119}: s2wr2 <= 39;
	      {1'd0, 7'd120}: s2wr2 <= 40;
	      {1'd0, 7'd121}: s2wr2 <= 41;
	      {1'd0, 7'd122}: s2wr2 <= 42;
	      {1'd0, 7'd123}: s2wr2 <= 43;
	      {1'd0, 7'd124}: s2wr2 <= 44;
	      {1'd0, 7'd125}: s2wr2 <= 45;
	      {1'd0, 7'd126}: s2wr2 <= 46;
	      {1'd0, 7'd127}: s2wr2 <= 47;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 16;
	      {1'd0, 7'd1}: s2wr3 <= 17;
	      {1'd0, 7'd2}: s2wr3 <= 18;
	      {1'd0, 7'd3}: s2wr3 <= 19;
	      {1'd0, 7'd4}: s2wr3 <= 20;
	      {1'd0, 7'd5}: s2wr3 <= 21;
	      {1'd0, 7'd6}: s2wr3 <= 22;
	      {1'd0, 7'd7}: s2wr3 <= 23;
	      {1'd0, 7'd8}: s2wr3 <= 24;
	      {1'd0, 7'd9}: s2wr3 <= 25;
	      {1'd0, 7'd10}: s2wr3 <= 26;
	      {1'd0, 7'd11}: s2wr3 <= 27;
	      {1'd0, 7'd12}: s2wr3 <= 28;
	      {1'd0, 7'd13}: s2wr3 <= 29;
	      {1'd0, 7'd14}: s2wr3 <= 30;
	      {1'd0, 7'd15}: s2wr3 <= 31;
	      {1'd0, 7'd16}: s2wr3 <= 80;
	      {1'd0, 7'd17}: s2wr3 <= 81;
	      {1'd0, 7'd18}: s2wr3 <= 82;
	      {1'd0, 7'd19}: s2wr3 <= 83;
	      {1'd0, 7'd20}: s2wr3 <= 84;
	      {1'd0, 7'd21}: s2wr3 <= 85;
	      {1'd0, 7'd22}: s2wr3 <= 86;
	      {1'd0, 7'd23}: s2wr3 <= 87;
	      {1'd0, 7'd24}: s2wr3 <= 88;
	      {1'd0, 7'd25}: s2wr3 <= 89;
	      {1'd0, 7'd26}: s2wr3 <= 90;
	      {1'd0, 7'd27}: s2wr3 <= 91;
	      {1'd0, 7'd28}: s2wr3 <= 92;
	      {1'd0, 7'd29}: s2wr3 <= 93;
	      {1'd0, 7'd30}: s2wr3 <= 94;
	      {1'd0, 7'd31}: s2wr3 <= 95;
	      {1'd0, 7'd32}: s2wr3 <= 48;
	      {1'd0, 7'd33}: s2wr3 <= 49;
	      {1'd0, 7'd34}: s2wr3 <= 50;
	      {1'd0, 7'd35}: s2wr3 <= 51;
	      {1'd0, 7'd36}: s2wr3 <= 52;
	      {1'd0, 7'd37}: s2wr3 <= 53;
	      {1'd0, 7'd38}: s2wr3 <= 54;
	      {1'd0, 7'd39}: s2wr3 <= 55;
	      {1'd0, 7'd40}: s2wr3 <= 56;
	      {1'd0, 7'd41}: s2wr3 <= 57;
	      {1'd0, 7'd42}: s2wr3 <= 58;
	      {1'd0, 7'd43}: s2wr3 <= 59;
	      {1'd0, 7'd44}: s2wr3 <= 60;
	      {1'd0, 7'd45}: s2wr3 <= 61;
	      {1'd0, 7'd46}: s2wr3 <= 62;
	      {1'd0, 7'd47}: s2wr3 <= 63;
	      {1'd0, 7'd48}: s2wr3 <= 112;
	      {1'd0, 7'd49}: s2wr3 <= 113;
	      {1'd0, 7'd50}: s2wr3 <= 114;
	      {1'd0, 7'd51}: s2wr3 <= 115;
	      {1'd0, 7'd52}: s2wr3 <= 116;
	      {1'd0, 7'd53}: s2wr3 <= 117;
	      {1'd0, 7'd54}: s2wr3 <= 118;
	      {1'd0, 7'd55}: s2wr3 <= 119;
	      {1'd0, 7'd56}: s2wr3 <= 120;
	      {1'd0, 7'd57}: s2wr3 <= 121;
	      {1'd0, 7'd58}: s2wr3 <= 122;
	      {1'd0, 7'd59}: s2wr3 <= 123;
	      {1'd0, 7'd60}: s2wr3 <= 124;
	      {1'd0, 7'd61}: s2wr3 <= 125;
	      {1'd0, 7'd62}: s2wr3 <= 126;
	      {1'd0, 7'd63}: s2wr3 <= 127;
	      {1'd0, 7'd64}: s2wr3 <= 0;
	      {1'd0, 7'd65}: s2wr3 <= 1;
	      {1'd0, 7'd66}: s2wr3 <= 2;
	      {1'd0, 7'd67}: s2wr3 <= 3;
	      {1'd0, 7'd68}: s2wr3 <= 4;
	      {1'd0, 7'd69}: s2wr3 <= 5;
	      {1'd0, 7'd70}: s2wr3 <= 6;
	      {1'd0, 7'd71}: s2wr3 <= 7;
	      {1'd0, 7'd72}: s2wr3 <= 8;
	      {1'd0, 7'd73}: s2wr3 <= 9;
	      {1'd0, 7'd74}: s2wr3 <= 10;
	      {1'd0, 7'd75}: s2wr3 <= 11;
	      {1'd0, 7'd76}: s2wr3 <= 12;
	      {1'd0, 7'd77}: s2wr3 <= 13;
	      {1'd0, 7'd78}: s2wr3 <= 14;
	      {1'd0, 7'd79}: s2wr3 <= 15;
	      {1'd0, 7'd80}: s2wr3 <= 64;
	      {1'd0, 7'd81}: s2wr3 <= 65;
	      {1'd0, 7'd82}: s2wr3 <= 66;
	      {1'd0, 7'd83}: s2wr3 <= 67;
	      {1'd0, 7'd84}: s2wr3 <= 68;
	      {1'd0, 7'd85}: s2wr3 <= 69;
	      {1'd0, 7'd86}: s2wr3 <= 70;
	      {1'd0, 7'd87}: s2wr3 <= 71;
	      {1'd0, 7'd88}: s2wr3 <= 72;
	      {1'd0, 7'd89}: s2wr3 <= 73;
	      {1'd0, 7'd90}: s2wr3 <= 74;
	      {1'd0, 7'd91}: s2wr3 <= 75;
	      {1'd0, 7'd92}: s2wr3 <= 76;
	      {1'd0, 7'd93}: s2wr3 <= 77;
	      {1'd0, 7'd94}: s2wr3 <= 78;
	      {1'd0, 7'd95}: s2wr3 <= 79;
	      {1'd0, 7'd96}: s2wr3 <= 32;
	      {1'd0, 7'd97}: s2wr3 <= 33;
	      {1'd0, 7'd98}: s2wr3 <= 34;
	      {1'd0, 7'd99}: s2wr3 <= 35;
	      {1'd0, 7'd100}: s2wr3 <= 36;
	      {1'd0, 7'd101}: s2wr3 <= 37;
	      {1'd0, 7'd102}: s2wr3 <= 38;
	      {1'd0, 7'd103}: s2wr3 <= 39;
	      {1'd0, 7'd104}: s2wr3 <= 40;
	      {1'd0, 7'd105}: s2wr3 <= 41;
	      {1'd0, 7'd106}: s2wr3 <= 42;
	      {1'd0, 7'd107}: s2wr3 <= 43;
	      {1'd0, 7'd108}: s2wr3 <= 44;
	      {1'd0, 7'd109}: s2wr3 <= 45;
	      {1'd0, 7'd110}: s2wr3 <= 46;
	      {1'd0, 7'd111}: s2wr3 <= 47;
	      {1'd0, 7'd112}: s2wr3 <= 96;
	      {1'd0, 7'd113}: s2wr3 <= 97;
	      {1'd0, 7'd114}: s2wr3 <= 98;
	      {1'd0, 7'd115}: s2wr3 <= 99;
	      {1'd0, 7'd116}: s2wr3 <= 100;
	      {1'd0, 7'd117}: s2wr3 <= 101;
	      {1'd0, 7'd118}: s2wr3 <= 102;
	      {1'd0, 7'd119}: s2wr3 <= 103;
	      {1'd0, 7'd120}: s2wr3 <= 104;
	      {1'd0, 7'd121}: s2wr3 <= 105;
	      {1'd0, 7'd122}: s2wr3 <= 106;
	      {1'd0, 7'd123}: s2wr3 <= 107;
	      {1'd0, 7'd124}: s2wr3 <= 108;
	      {1'd0, 7'd125}: s2wr3 <= 109;
	      {1'd0, 7'd126}: s2wr3 <= 110;
	      {1'd0, 7'd127}: s2wr3 <= 111;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 96;
	      {1'd0, 7'd1}: s2wr4 <= 97;
	      {1'd0, 7'd2}: s2wr4 <= 98;
	      {1'd0, 7'd3}: s2wr4 <= 99;
	      {1'd0, 7'd4}: s2wr4 <= 100;
	      {1'd0, 7'd5}: s2wr4 <= 101;
	      {1'd0, 7'd6}: s2wr4 <= 102;
	      {1'd0, 7'd7}: s2wr4 <= 103;
	      {1'd0, 7'd8}: s2wr4 <= 104;
	      {1'd0, 7'd9}: s2wr4 <= 105;
	      {1'd0, 7'd10}: s2wr4 <= 106;
	      {1'd0, 7'd11}: s2wr4 <= 107;
	      {1'd0, 7'd12}: s2wr4 <= 108;
	      {1'd0, 7'd13}: s2wr4 <= 109;
	      {1'd0, 7'd14}: s2wr4 <= 110;
	      {1'd0, 7'd15}: s2wr4 <= 111;
	      {1'd0, 7'd16}: s2wr4 <= 32;
	      {1'd0, 7'd17}: s2wr4 <= 33;
	      {1'd0, 7'd18}: s2wr4 <= 34;
	      {1'd0, 7'd19}: s2wr4 <= 35;
	      {1'd0, 7'd20}: s2wr4 <= 36;
	      {1'd0, 7'd21}: s2wr4 <= 37;
	      {1'd0, 7'd22}: s2wr4 <= 38;
	      {1'd0, 7'd23}: s2wr4 <= 39;
	      {1'd0, 7'd24}: s2wr4 <= 40;
	      {1'd0, 7'd25}: s2wr4 <= 41;
	      {1'd0, 7'd26}: s2wr4 <= 42;
	      {1'd0, 7'd27}: s2wr4 <= 43;
	      {1'd0, 7'd28}: s2wr4 <= 44;
	      {1'd0, 7'd29}: s2wr4 <= 45;
	      {1'd0, 7'd30}: s2wr4 <= 46;
	      {1'd0, 7'd31}: s2wr4 <= 47;
	      {1'd0, 7'd32}: s2wr4 <= 64;
	      {1'd0, 7'd33}: s2wr4 <= 65;
	      {1'd0, 7'd34}: s2wr4 <= 66;
	      {1'd0, 7'd35}: s2wr4 <= 67;
	      {1'd0, 7'd36}: s2wr4 <= 68;
	      {1'd0, 7'd37}: s2wr4 <= 69;
	      {1'd0, 7'd38}: s2wr4 <= 70;
	      {1'd0, 7'd39}: s2wr4 <= 71;
	      {1'd0, 7'd40}: s2wr4 <= 72;
	      {1'd0, 7'd41}: s2wr4 <= 73;
	      {1'd0, 7'd42}: s2wr4 <= 74;
	      {1'd0, 7'd43}: s2wr4 <= 75;
	      {1'd0, 7'd44}: s2wr4 <= 76;
	      {1'd0, 7'd45}: s2wr4 <= 77;
	      {1'd0, 7'd46}: s2wr4 <= 78;
	      {1'd0, 7'd47}: s2wr4 <= 79;
	      {1'd0, 7'd48}: s2wr4 <= 0;
	      {1'd0, 7'd49}: s2wr4 <= 1;
	      {1'd0, 7'd50}: s2wr4 <= 2;
	      {1'd0, 7'd51}: s2wr4 <= 3;
	      {1'd0, 7'd52}: s2wr4 <= 4;
	      {1'd0, 7'd53}: s2wr4 <= 5;
	      {1'd0, 7'd54}: s2wr4 <= 6;
	      {1'd0, 7'd55}: s2wr4 <= 7;
	      {1'd0, 7'd56}: s2wr4 <= 8;
	      {1'd0, 7'd57}: s2wr4 <= 9;
	      {1'd0, 7'd58}: s2wr4 <= 10;
	      {1'd0, 7'd59}: s2wr4 <= 11;
	      {1'd0, 7'd60}: s2wr4 <= 12;
	      {1'd0, 7'd61}: s2wr4 <= 13;
	      {1'd0, 7'd62}: s2wr4 <= 14;
	      {1'd0, 7'd63}: s2wr4 <= 15;
	      {1'd0, 7'd64}: s2wr4 <= 112;
	      {1'd0, 7'd65}: s2wr4 <= 113;
	      {1'd0, 7'd66}: s2wr4 <= 114;
	      {1'd0, 7'd67}: s2wr4 <= 115;
	      {1'd0, 7'd68}: s2wr4 <= 116;
	      {1'd0, 7'd69}: s2wr4 <= 117;
	      {1'd0, 7'd70}: s2wr4 <= 118;
	      {1'd0, 7'd71}: s2wr4 <= 119;
	      {1'd0, 7'd72}: s2wr4 <= 120;
	      {1'd0, 7'd73}: s2wr4 <= 121;
	      {1'd0, 7'd74}: s2wr4 <= 122;
	      {1'd0, 7'd75}: s2wr4 <= 123;
	      {1'd0, 7'd76}: s2wr4 <= 124;
	      {1'd0, 7'd77}: s2wr4 <= 125;
	      {1'd0, 7'd78}: s2wr4 <= 126;
	      {1'd0, 7'd79}: s2wr4 <= 127;
	      {1'd0, 7'd80}: s2wr4 <= 48;
	      {1'd0, 7'd81}: s2wr4 <= 49;
	      {1'd0, 7'd82}: s2wr4 <= 50;
	      {1'd0, 7'd83}: s2wr4 <= 51;
	      {1'd0, 7'd84}: s2wr4 <= 52;
	      {1'd0, 7'd85}: s2wr4 <= 53;
	      {1'd0, 7'd86}: s2wr4 <= 54;
	      {1'd0, 7'd87}: s2wr4 <= 55;
	      {1'd0, 7'd88}: s2wr4 <= 56;
	      {1'd0, 7'd89}: s2wr4 <= 57;
	      {1'd0, 7'd90}: s2wr4 <= 58;
	      {1'd0, 7'd91}: s2wr4 <= 59;
	      {1'd0, 7'd92}: s2wr4 <= 60;
	      {1'd0, 7'd93}: s2wr4 <= 61;
	      {1'd0, 7'd94}: s2wr4 <= 62;
	      {1'd0, 7'd95}: s2wr4 <= 63;
	      {1'd0, 7'd96}: s2wr4 <= 80;
	      {1'd0, 7'd97}: s2wr4 <= 81;
	      {1'd0, 7'd98}: s2wr4 <= 82;
	      {1'd0, 7'd99}: s2wr4 <= 83;
	      {1'd0, 7'd100}: s2wr4 <= 84;
	      {1'd0, 7'd101}: s2wr4 <= 85;
	      {1'd0, 7'd102}: s2wr4 <= 86;
	      {1'd0, 7'd103}: s2wr4 <= 87;
	      {1'd0, 7'd104}: s2wr4 <= 88;
	      {1'd0, 7'd105}: s2wr4 <= 89;
	      {1'd0, 7'd106}: s2wr4 <= 90;
	      {1'd0, 7'd107}: s2wr4 <= 91;
	      {1'd0, 7'd108}: s2wr4 <= 92;
	      {1'd0, 7'd109}: s2wr4 <= 93;
	      {1'd0, 7'd110}: s2wr4 <= 94;
	      {1'd0, 7'd111}: s2wr4 <= 95;
	      {1'd0, 7'd112}: s2wr4 <= 16;
	      {1'd0, 7'd113}: s2wr4 <= 17;
	      {1'd0, 7'd114}: s2wr4 <= 18;
	      {1'd0, 7'd115}: s2wr4 <= 19;
	      {1'd0, 7'd116}: s2wr4 <= 20;
	      {1'd0, 7'd117}: s2wr4 <= 21;
	      {1'd0, 7'd118}: s2wr4 <= 22;
	      {1'd0, 7'd119}: s2wr4 <= 23;
	      {1'd0, 7'd120}: s2wr4 <= 24;
	      {1'd0, 7'd121}: s2wr4 <= 25;
	      {1'd0, 7'd122}: s2wr4 <= 26;
	      {1'd0, 7'd123}: s2wr4 <= 27;
	      {1'd0, 7'd124}: s2wr4 <= 28;
	      {1'd0, 7'd125}: s2wr4 <= 29;
	      {1'd0, 7'd126}: s2wr4 <= 30;
	      {1'd0, 7'd127}: s2wr4 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 32;
	      {1'd0, 7'd1}: s2wr5 <= 33;
	      {1'd0, 7'd2}: s2wr5 <= 34;
	      {1'd0, 7'd3}: s2wr5 <= 35;
	      {1'd0, 7'd4}: s2wr5 <= 36;
	      {1'd0, 7'd5}: s2wr5 <= 37;
	      {1'd0, 7'd6}: s2wr5 <= 38;
	      {1'd0, 7'd7}: s2wr5 <= 39;
	      {1'd0, 7'd8}: s2wr5 <= 40;
	      {1'd0, 7'd9}: s2wr5 <= 41;
	      {1'd0, 7'd10}: s2wr5 <= 42;
	      {1'd0, 7'd11}: s2wr5 <= 43;
	      {1'd0, 7'd12}: s2wr5 <= 44;
	      {1'd0, 7'd13}: s2wr5 <= 45;
	      {1'd0, 7'd14}: s2wr5 <= 46;
	      {1'd0, 7'd15}: s2wr5 <= 47;
	      {1'd0, 7'd16}: s2wr5 <= 96;
	      {1'd0, 7'd17}: s2wr5 <= 97;
	      {1'd0, 7'd18}: s2wr5 <= 98;
	      {1'd0, 7'd19}: s2wr5 <= 99;
	      {1'd0, 7'd20}: s2wr5 <= 100;
	      {1'd0, 7'd21}: s2wr5 <= 101;
	      {1'd0, 7'd22}: s2wr5 <= 102;
	      {1'd0, 7'd23}: s2wr5 <= 103;
	      {1'd0, 7'd24}: s2wr5 <= 104;
	      {1'd0, 7'd25}: s2wr5 <= 105;
	      {1'd0, 7'd26}: s2wr5 <= 106;
	      {1'd0, 7'd27}: s2wr5 <= 107;
	      {1'd0, 7'd28}: s2wr5 <= 108;
	      {1'd0, 7'd29}: s2wr5 <= 109;
	      {1'd0, 7'd30}: s2wr5 <= 110;
	      {1'd0, 7'd31}: s2wr5 <= 111;
	      {1'd0, 7'd32}: s2wr5 <= 0;
	      {1'd0, 7'd33}: s2wr5 <= 1;
	      {1'd0, 7'd34}: s2wr5 <= 2;
	      {1'd0, 7'd35}: s2wr5 <= 3;
	      {1'd0, 7'd36}: s2wr5 <= 4;
	      {1'd0, 7'd37}: s2wr5 <= 5;
	      {1'd0, 7'd38}: s2wr5 <= 6;
	      {1'd0, 7'd39}: s2wr5 <= 7;
	      {1'd0, 7'd40}: s2wr5 <= 8;
	      {1'd0, 7'd41}: s2wr5 <= 9;
	      {1'd0, 7'd42}: s2wr5 <= 10;
	      {1'd0, 7'd43}: s2wr5 <= 11;
	      {1'd0, 7'd44}: s2wr5 <= 12;
	      {1'd0, 7'd45}: s2wr5 <= 13;
	      {1'd0, 7'd46}: s2wr5 <= 14;
	      {1'd0, 7'd47}: s2wr5 <= 15;
	      {1'd0, 7'd48}: s2wr5 <= 64;
	      {1'd0, 7'd49}: s2wr5 <= 65;
	      {1'd0, 7'd50}: s2wr5 <= 66;
	      {1'd0, 7'd51}: s2wr5 <= 67;
	      {1'd0, 7'd52}: s2wr5 <= 68;
	      {1'd0, 7'd53}: s2wr5 <= 69;
	      {1'd0, 7'd54}: s2wr5 <= 70;
	      {1'd0, 7'd55}: s2wr5 <= 71;
	      {1'd0, 7'd56}: s2wr5 <= 72;
	      {1'd0, 7'd57}: s2wr5 <= 73;
	      {1'd0, 7'd58}: s2wr5 <= 74;
	      {1'd0, 7'd59}: s2wr5 <= 75;
	      {1'd0, 7'd60}: s2wr5 <= 76;
	      {1'd0, 7'd61}: s2wr5 <= 77;
	      {1'd0, 7'd62}: s2wr5 <= 78;
	      {1'd0, 7'd63}: s2wr5 <= 79;
	      {1'd0, 7'd64}: s2wr5 <= 48;
	      {1'd0, 7'd65}: s2wr5 <= 49;
	      {1'd0, 7'd66}: s2wr5 <= 50;
	      {1'd0, 7'd67}: s2wr5 <= 51;
	      {1'd0, 7'd68}: s2wr5 <= 52;
	      {1'd0, 7'd69}: s2wr5 <= 53;
	      {1'd0, 7'd70}: s2wr5 <= 54;
	      {1'd0, 7'd71}: s2wr5 <= 55;
	      {1'd0, 7'd72}: s2wr5 <= 56;
	      {1'd0, 7'd73}: s2wr5 <= 57;
	      {1'd0, 7'd74}: s2wr5 <= 58;
	      {1'd0, 7'd75}: s2wr5 <= 59;
	      {1'd0, 7'd76}: s2wr5 <= 60;
	      {1'd0, 7'd77}: s2wr5 <= 61;
	      {1'd0, 7'd78}: s2wr5 <= 62;
	      {1'd0, 7'd79}: s2wr5 <= 63;
	      {1'd0, 7'd80}: s2wr5 <= 112;
	      {1'd0, 7'd81}: s2wr5 <= 113;
	      {1'd0, 7'd82}: s2wr5 <= 114;
	      {1'd0, 7'd83}: s2wr5 <= 115;
	      {1'd0, 7'd84}: s2wr5 <= 116;
	      {1'd0, 7'd85}: s2wr5 <= 117;
	      {1'd0, 7'd86}: s2wr5 <= 118;
	      {1'd0, 7'd87}: s2wr5 <= 119;
	      {1'd0, 7'd88}: s2wr5 <= 120;
	      {1'd0, 7'd89}: s2wr5 <= 121;
	      {1'd0, 7'd90}: s2wr5 <= 122;
	      {1'd0, 7'd91}: s2wr5 <= 123;
	      {1'd0, 7'd92}: s2wr5 <= 124;
	      {1'd0, 7'd93}: s2wr5 <= 125;
	      {1'd0, 7'd94}: s2wr5 <= 126;
	      {1'd0, 7'd95}: s2wr5 <= 127;
	      {1'd0, 7'd96}: s2wr5 <= 16;
	      {1'd0, 7'd97}: s2wr5 <= 17;
	      {1'd0, 7'd98}: s2wr5 <= 18;
	      {1'd0, 7'd99}: s2wr5 <= 19;
	      {1'd0, 7'd100}: s2wr5 <= 20;
	      {1'd0, 7'd101}: s2wr5 <= 21;
	      {1'd0, 7'd102}: s2wr5 <= 22;
	      {1'd0, 7'd103}: s2wr5 <= 23;
	      {1'd0, 7'd104}: s2wr5 <= 24;
	      {1'd0, 7'd105}: s2wr5 <= 25;
	      {1'd0, 7'd106}: s2wr5 <= 26;
	      {1'd0, 7'd107}: s2wr5 <= 27;
	      {1'd0, 7'd108}: s2wr5 <= 28;
	      {1'd0, 7'd109}: s2wr5 <= 29;
	      {1'd0, 7'd110}: s2wr5 <= 30;
	      {1'd0, 7'd111}: s2wr5 <= 31;
	      {1'd0, 7'd112}: s2wr5 <= 80;
	      {1'd0, 7'd113}: s2wr5 <= 81;
	      {1'd0, 7'd114}: s2wr5 <= 82;
	      {1'd0, 7'd115}: s2wr5 <= 83;
	      {1'd0, 7'd116}: s2wr5 <= 84;
	      {1'd0, 7'd117}: s2wr5 <= 85;
	      {1'd0, 7'd118}: s2wr5 <= 86;
	      {1'd0, 7'd119}: s2wr5 <= 87;
	      {1'd0, 7'd120}: s2wr5 <= 88;
	      {1'd0, 7'd121}: s2wr5 <= 89;
	      {1'd0, 7'd122}: s2wr5 <= 90;
	      {1'd0, 7'd123}: s2wr5 <= 91;
	      {1'd0, 7'd124}: s2wr5 <= 92;
	      {1'd0, 7'd125}: s2wr5 <= 93;
	      {1'd0, 7'd126}: s2wr5 <= 94;
	      {1'd0, 7'd127}: s2wr5 <= 95;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 64;
	      {1'd0, 7'd1}: s2wr6 <= 65;
	      {1'd0, 7'd2}: s2wr6 <= 66;
	      {1'd0, 7'd3}: s2wr6 <= 67;
	      {1'd0, 7'd4}: s2wr6 <= 68;
	      {1'd0, 7'd5}: s2wr6 <= 69;
	      {1'd0, 7'd6}: s2wr6 <= 70;
	      {1'd0, 7'd7}: s2wr6 <= 71;
	      {1'd0, 7'd8}: s2wr6 <= 72;
	      {1'd0, 7'd9}: s2wr6 <= 73;
	      {1'd0, 7'd10}: s2wr6 <= 74;
	      {1'd0, 7'd11}: s2wr6 <= 75;
	      {1'd0, 7'd12}: s2wr6 <= 76;
	      {1'd0, 7'd13}: s2wr6 <= 77;
	      {1'd0, 7'd14}: s2wr6 <= 78;
	      {1'd0, 7'd15}: s2wr6 <= 79;
	      {1'd0, 7'd16}: s2wr6 <= 0;
	      {1'd0, 7'd17}: s2wr6 <= 1;
	      {1'd0, 7'd18}: s2wr6 <= 2;
	      {1'd0, 7'd19}: s2wr6 <= 3;
	      {1'd0, 7'd20}: s2wr6 <= 4;
	      {1'd0, 7'd21}: s2wr6 <= 5;
	      {1'd0, 7'd22}: s2wr6 <= 6;
	      {1'd0, 7'd23}: s2wr6 <= 7;
	      {1'd0, 7'd24}: s2wr6 <= 8;
	      {1'd0, 7'd25}: s2wr6 <= 9;
	      {1'd0, 7'd26}: s2wr6 <= 10;
	      {1'd0, 7'd27}: s2wr6 <= 11;
	      {1'd0, 7'd28}: s2wr6 <= 12;
	      {1'd0, 7'd29}: s2wr6 <= 13;
	      {1'd0, 7'd30}: s2wr6 <= 14;
	      {1'd0, 7'd31}: s2wr6 <= 15;
	      {1'd0, 7'd32}: s2wr6 <= 96;
	      {1'd0, 7'd33}: s2wr6 <= 97;
	      {1'd0, 7'd34}: s2wr6 <= 98;
	      {1'd0, 7'd35}: s2wr6 <= 99;
	      {1'd0, 7'd36}: s2wr6 <= 100;
	      {1'd0, 7'd37}: s2wr6 <= 101;
	      {1'd0, 7'd38}: s2wr6 <= 102;
	      {1'd0, 7'd39}: s2wr6 <= 103;
	      {1'd0, 7'd40}: s2wr6 <= 104;
	      {1'd0, 7'd41}: s2wr6 <= 105;
	      {1'd0, 7'd42}: s2wr6 <= 106;
	      {1'd0, 7'd43}: s2wr6 <= 107;
	      {1'd0, 7'd44}: s2wr6 <= 108;
	      {1'd0, 7'd45}: s2wr6 <= 109;
	      {1'd0, 7'd46}: s2wr6 <= 110;
	      {1'd0, 7'd47}: s2wr6 <= 111;
	      {1'd0, 7'd48}: s2wr6 <= 32;
	      {1'd0, 7'd49}: s2wr6 <= 33;
	      {1'd0, 7'd50}: s2wr6 <= 34;
	      {1'd0, 7'd51}: s2wr6 <= 35;
	      {1'd0, 7'd52}: s2wr6 <= 36;
	      {1'd0, 7'd53}: s2wr6 <= 37;
	      {1'd0, 7'd54}: s2wr6 <= 38;
	      {1'd0, 7'd55}: s2wr6 <= 39;
	      {1'd0, 7'd56}: s2wr6 <= 40;
	      {1'd0, 7'd57}: s2wr6 <= 41;
	      {1'd0, 7'd58}: s2wr6 <= 42;
	      {1'd0, 7'd59}: s2wr6 <= 43;
	      {1'd0, 7'd60}: s2wr6 <= 44;
	      {1'd0, 7'd61}: s2wr6 <= 45;
	      {1'd0, 7'd62}: s2wr6 <= 46;
	      {1'd0, 7'd63}: s2wr6 <= 47;
	      {1'd0, 7'd64}: s2wr6 <= 80;
	      {1'd0, 7'd65}: s2wr6 <= 81;
	      {1'd0, 7'd66}: s2wr6 <= 82;
	      {1'd0, 7'd67}: s2wr6 <= 83;
	      {1'd0, 7'd68}: s2wr6 <= 84;
	      {1'd0, 7'd69}: s2wr6 <= 85;
	      {1'd0, 7'd70}: s2wr6 <= 86;
	      {1'd0, 7'd71}: s2wr6 <= 87;
	      {1'd0, 7'd72}: s2wr6 <= 88;
	      {1'd0, 7'd73}: s2wr6 <= 89;
	      {1'd0, 7'd74}: s2wr6 <= 90;
	      {1'd0, 7'd75}: s2wr6 <= 91;
	      {1'd0, 7'd76}: s2wr6 <= 92;
	      {1'd0, 7'd77}: s2wr6 <= 93;
	      {1'd0, 7'd78}: s2wr6 <= 94;
	      {1'd0, 7'd79}: s2wr6 <= 95;
	      {1'd0, 7'd80}: s2wr6 <= 16;
	      {1'd0, 7'd81}: s2wr6 <= 17;
	      {1'd0, 7'd82}: s2wr6 <= 18;
	      {1'd0, 7'd83}: s2wr6 <= 19;
	      {1'd0, 7'd84}: s2wr6 <= 20;
	      {1'd0, 7'd85}: s2wr6 <= 21;
	      {1'd0, 7'd86}: s2wr6 <= 22;
	      {1'd0, 7'd87}: s2wr6 <= 23;
	      {1'd0, 7'd88}: s2wr6 <= 24;
	      {1'd0, 7'd89}: s2wr6 <= 25;
	      {1'd0, 7'd90}: s2wr6 <= 26;
	      {1'd0, 7'd91}: s2wr6 <= 27;
	      {1'd0, 7'd92}: s2wr6 <= 28;
	      {1'd0, 7'd93}: s2wr6 <= 29;
	      {1'd0, 7'd94}: s2wr6 <= 30;
	      {1'd0, 7'd95}: s2wr6 <= 31;
	      {1'd0, 7'd96}: s2wr6 <= 112;
	      {1'd0, 7'd97}: s2wr6 <= 113;
	      {1'd0, 7'd98}: s2wr6 <= 114;
	      {1'd0, 7'd99}: s2wr6 <= 115;
	      {1'd0, 7'd100}: s2wr6 <= 116;
	      {1'd0, 7'd101}: s2wr6 <= 117;
	      {1'd0, 7'd102}: s2wr6 <= 118;
	      {1'd0, 7'd103}: s2wr6 <= 119;
	      {1'd0, 7'd104}: s2wr6 <= 120;
	      {1'd0, 7'd105}: s2wr6 <= 121;
	      {1'd0, 7'd106}: s2wr6 <= 122;
	      {1'd0, 7'd107}: s2wr6 <= 123;
	      {1'd0, 7'd108}: s2wr6 <= 124;
	      {1'd0, 7'd109}: s2wr6 <= 125;
	      {1'd0, 7'd110}: s2wr6 <= 126;
	      {1'd0, 7'd111}: s2wr6 <= 127;
	      {1'd0, 7'd112}: s2wr6 <= 48;
	      {1'd0, 7'd113}: s2wr6 <= 49;
	      {1'd0, 7'd114}: s2wr6 <= 50;
	      {1'd0, 7'd115}: s2wr6 <= 51;
	      {1'd0, 7'd116}: s2wr6 <= 52;
	      {1'd0, 7'd117}: s2wr6 <= 53;
	      {1'd0, 7'd118}: s2wr6 <= 54;
	      {1'd0, 7'd119}: s2wr6 <= 55;
	      {1'd0, 7'd120}: s2wr6 <= 56;
	      {1'd0, 7'd121}: s2wr6 <= 57;
	      {1'd0, 7'd122}: s2wr6 <= 58;
	      {1'd0, 7'd123}: s2wr6 <= 59;
	      {1'd0, 7'd124}: s2wr6 <= 60;
	      {1'd0, 7'd125}: s2wr6 <= 61;
	      {1'd0, 7'd126}: s2wr6 <= 62;
	      {1'd0, 7'd127}: s2wr6 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm0_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 8;
	      {1'd0, 7'd9}: s2wr7 <= 9;
	      {1'd0, 7'd10}: s2wr7 <= 10;
	      {1'd0, 7'd11}: s2wr7 <= 11;
	      {1'd0, 7'd12}: s2wr7 <= 12;
	      {1'd0, 7'd13}: s2wr7 <= 13;
	      {1'd0, 7'd14}: s2wr7 <= 14;
	      {1'd0, 7'd15}: s2wr7 <= 15;
	      {1'd0, 7'd16}: s2wr7 <= 64;
	      {1'd0, 7'd17}: s2wr7 <= 65;
	      {1'd0, 7'd18}: s2wr7 <= 66;
	      {1'd0, 7'd19}: s2wr7 <= 67;
	      {1'd0, 7'd20}: s2wr7 <= 68;
	      {1'd0, 7'd21}: s2wr7 <= 69;
	      {1'd0, 7'd22}: s2wr7 <= 70;
	      {1'd0, 7'd23}: s2wr7 <= 71;
	      {1'd0, 7'd24}: s2wr7 <= 72;
	      {1'd0, 7'd25}: s2wr7 <= 73;
	      {1'd0, 7'd26}: s2wr7 <= 74;
	      {1'd0, 7'd27}: s2wr7 <= 75;
	      {1'd0, 7'd28}: s2wr7 <= 76;
	      {1'd0, 7'd29}: s2wr7 <= 77;
	      {1'd0, 7'd30}: s2wr7 <= 78;
	      {1'd0, 7'd31}: s2wr7 <= 79;
	      {1'd0, 7'd32}: s2wr7 <= 32;
	      {1'd0, 7'd33}: s2wr7 <= 33;
	      {1'd0, 7'd34}: s2wr7 <= 34;
	      {1'd0, 7'd35}: s2wr7 <= 35;
	      {1'd0, 7'd36}: s2wr7 <= 36;
	      {1'd0, 7'd37}: s2wr7 <= 37;
	      {1'd0, 7'd38}: s2wr7 <= 38;
	      {1'd0, 7'd39}: s2wr7 <= 39;
	      {1'd0, 7'd40}: s2wr7 <= 40;
	      {1'd0, 7'd41}: s2wr7 <= 41;
	      {1'd0, 7'd42}: s2wr7 <= 42;
	      {1'd0, 7'd43}: s2wr7 <= 43;
	      {1'd0, 7'd44}: s2wr7 <= 44;
	      {1'd0, 7'd45}: s2wr7 <= 45;
	      {1'd0, 7'd46}: s2wr7 <= 46;
	      {1'd0, 7'd47}: s2wr7 <= 47;
	      {1'd0, 7'd48}: s2wr7 <= 96;
	      {1'd0, 7'd49}: s2wr7 <= 97;
	      {1'd0, 7'd50}: s2wr7 <= 98;
	      {1'd0, 7'd51}: s2wr7 <= 99;
	      {1'd0, 7'd52}: s2wr7 <= 100;
	      {1'd0, 7'd53}: s2wr7 <= 101;
	      {1'd0, 7'd54}: s2wr7 <= 102;
	      {1'd0, 7'd55}: s2wr7 <= 103;
	      {1'd0, 7'd56}: s2wr7 <= 104;
	      {1'd0, 7'd57}: s2wr7 <= 105;
	      {1'd0, 7'd58}: s2wr7 <= 106;
	      {1'd0, 7'd59}: s2wr7 <= 107;
	      {1'd0, 7'd60}: s2wr7 <= 108;
	      {1'd0, 7'd61}: s2wr7 <= 109;
	      {1'd0, 7'd62}: s2wr7 <= 110;
	      {1'd0, 7'd63}: s2wr7 <= 111;
	      {1'd0, 7'd64}: s2wr7 <= 16;
	      {1'd0, 7'd65}: s2wr7 <= 17;
	      {1'd0, 7'd66}: s2wr7 <= 18;
	      {1'd0, 7'd67}: s2wr7 <= 19;
	      {1'd0, 7'd68}: s2wr7 <= 20;
	      {1'd0, 7'd69}: s2wr7 <= 21;
	      {1'd0, 7'd70}: s2wr7 <= 22;
	      {1'd0, 7'd71}: s2wr7 <= 23;
	      {1'd0, 7'd72}: s2wr7 <= 24;
	      {1'd0, 7'd73}: s2wr7 <= 25;
	      {1'd0, 7'd74}: s2wr7 <= 26;
	      {1'd0, 7'd75}: s2wr7 <= 27;
	      {1'd0, 7'd76}: s2wr7 <= 28;
	      {1'd0, 7'd77}: s2wr7 <= 29;
	      {1'd0, 7'd78}: s2wr7 <= 30;
	      {1'd0, 7'd79}: s2wr7 <= 31;
	      {1'd0, 7'd80}: s2wr7 <= 80;
	      {1'd0, 7'd81}: s2wr7 <= 81;
	      {1'd0, 7'd82}: s2wr7 <= 82;
	      {1'd0, 7'd83}: s2wr7 <= 83;
	      {1'd0, 7'd84}: s2wr7 <= 84;
	      {1'd0, 7'd85}: s2wr7 <= 85;
	      {1'd0, 7'd86}: s2wr7 <= 86;
	      {1'd0, 7'd87}: s2wr7 <= 87;
	      {1'd0, 7'd88}: s2wr7 <= 88;
	      {1'd0, 7'd89}: s2wr7 <= 89;
	      {1'd0, 7'd90}: s2wr7 <= 90;
	      {1'd0, 7'd91}: s2wr7 <= 91;
	      {1'd0, 7'd92}: s2wr7 <= 92;
	      {1'd0, 7'd93}: s2wr7 <= 93;
	      {1'd0, 7'd94}: s2wr7 <= 94;
	      {1'd0, 7'd95}: s2wr7 <= 95;
	      {1'd0, 7'd96}: s2wr7 <= 48;
	      {1'd0, 7'd97}: s2wr7 <= 49;
	      {1'd0, 7'd98}: s2wr7 <= 50;
	      {1'd0, 7'd99}: s2wr7 <= 51;
	      {1'd0, 7'd100}: s2wr7 <= 52;
	      {1'd0, 7'd101}: s2wr7 <= 53;
	      {1'd0, 7'd102}: s2wr7 <= 54;
	      {1'd0, 7'd103}: s2wr7 <= 55;
	      {1'd0, 7'd104}: s2wr7 <= 56;
	      {1'd0, 7'd105}: s2wr7 <= 57;
	      {1'd0, 7'd106}: s2wr7 <= 58;
	      {1'd0, 7'd107}: s2wr7 <= 59;
	      {1'd0, 7'd108}: s2wr7 <= 60;
	      {1'd0, 7'd109}: s2wr7 <= 61;
	      {1'd0, 7'd110}: s2wr7 <= 62;
	      {1'd0, 7'd111}: s2wr7 <= 63;
	      {1'd0, 7'd112}: s2wr7 <= 112;
	      {1'd0, 7'd113}: s2wr7 <= 113;
	      {1'd0, 7'd114}: s2wr7 <= 114;
	      {1'd0, 7'd115}: s2wr7 <= 115;
	      {1'd0, 7'd116}: s2wr7 <= 116;
	      {1'd0, 7'd117}: s2wr7 <= 117;
	      {1'd0, 7'd118}: s2wr7 <= 118;
	      {1'd0, 7'd119}: s2wr7 <= 119;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule




module memMod(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is block

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 



module memMod_dist(in, out, inAddr, outAddr, writeSel, clk);
   
   parameter depth=1024, width=16, logDepth=10;
   
   input [width-1:0]    in;
   input [logDepth-1:0] inAddr, outAddr;
   input 	        writeSel, clk;
   output [width-1:0] 	out;
   reg [width-1:0] 	out;
   
   // synthesis attribute ram_style of mem is distributed

   reg [width-1:0] 	mem[depth-1:0]; 
   
   always @(posedge clk) begin
      out <= mem[outAddr];
      
      if (writeSel)
        mem[inAddr] <= in;
   end
endmodule 

module shiftRegFIFO(X, Y, clk);
   parameter depth=1, width=1;

   output [width-1:0] Y;
   input  [width-1:0] X;
   input              clk;

   reg [width-1:0]    mem [depth-1:0];
   integer            index;

   assign Y = mem[depth-1];

   always @ (posedge clk) begin
      for(index=1;index<depth;index=index+1) begin
         mem[index] <= mem[index-1];
      end
      mem[0]<=X;
   end
endmodule

module nextReg(X, Y, reset, clk);
   parameter depth=2, logDepth=1;

   output Y;
   input X;
   input              clk, reset;
   reg [logDepth:0] count;
   reg                active;

   assign Y = (count == depth) ? 1 : 0;

   always @ (posedge clk) begin
      if (reset == 1) begin
         count <= 0;
         active <= 0;
      end
      else if (X == 1) begin
         active <= 1;
         count <= 1;
      end
      else if (count == depth) begin
         count <= 0;
         active <= 0;
      end
      else if (active)
         count <= count+1;
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock59570(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76559(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1850;
   wire signed [15:0] a1851;
   wire signed [15:0] a1852;
   wire signed [15:0] a1853;
   wire signed [15:0] a1858;
   wire signed [15:0] a1859;
   wire signed [15:0] a1860;
   wire signed [15:0] a1861;
   wire signed [15:0] a1866;
   wire signed [15:0] a1867;
   wire signed [15:0] a1868;
   wire signed [15:0] a1869;
   wire signed [15:0] a1874;
   wire signed [15:0] a1875;
   wire signed [15:0] a1876;
   wire signed [15:0] a1877;
   wire signed [15:0] t1066;
   wire signed [15:0] t1067;
   wire signed [15:0] t1068;
   wire signed [15:0] t1069;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t1070;
   wire signed [15:0] t1071;
   wire signed [15:0] t1072;
   wire signed [15:0] t1073;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t1074;
   wire signed [15:0] t1075;
   wire signed [15:0] t1076;
   wire signed [15:0] t1077;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t1078;
   wire signed [15:0] t1079;
   wire signed [15:0] t1080;
   wire signed [15:0] t1081;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a1850 = X0;
   assign a1851 = X2;
   assign a1852 = X1;
   assign a1853 = X3;
   assign a1858 = X4;
   assign a1859 = X6;
   assign a1860 = X5;
   assign a1861 = X7;
   assign a1866 = X8;
   assign a1867 = X10;
   assign a1868 = X9;
   assign a1869 = X11;
   assign a1874 = X12;
   assign a1875 = X14;
   assign a1876 = X13;
   assign a1877 = X15;
   assign Y0 = t1066;
   assign Y1 = t1067;
   assign Y2 = t1068;
   assign Y3 = t1069;
   assign Y4 = t1070;
   assign Y5 = t1071;
   assign Y6 = t1072;
   assign Y7 = t1073;
   assign Y8 = t1074;
   assign Y9 = t1075;
   assign Y10 = t1076;
   assign Y11 = t1077;
   assign Y12 = t1078;
   assign Y13 = t1079;
   assign Y14 = t1080;
   assign Y15 = t1081;

    addfxp #(16, 1) add59582(.a(a1850), .b(a1851), .clk(clk), .q(t1066));    // 0
    addfxp #(16, 1) add59597(.a(a1852), .b(a1853), .clk(clk), .q(t1067));    // 0
    subfxp #(16, 1) sub59612(.a(a1850), .b(a1851), .clk(clk), .q(t1068));    // 0
    subfxp #(16, 1) sub59627(.a(a1852), .b(a1853), .clk(clk), .q(t1069));    // 0
    addfxp #(16, 1) add59658(.a(a1858), .b(a1859), .clk(clk), .q(t1070));    // 0
    addfxp #(16, 1) add59673(.a(a1860), .b(a1861), .clk(clk), .q(t1071));    // 0
    subfxp #(16, 1) sub59688(.a(a1858), .b(a1859), .clk(clk), .q(t1072));    // 0
    subfxp #(16, 1) sub59703(.a(a1860), .b(a1861), .clk(clk), .q(t1073));    // 0
    addfxp #(16, 1) add59734(.a(a1866), .b(a1867), .clk(clk), .q(t1074));    // 0
    addfxp #(16, 1) add59749(.a(a1868), .b(a1869), .clk(clk), .q(t1075));    // 0
    subfxp #(16, 1) sub59764(.a(a1866), .b(a1867), .clk(clk), .q(t1076));    // 0
    subfxp #(16, 1) sub59779(.a(a1868), .b(a1869), .clk(clk), .q(t1077));    // 0
    addfxp #(16, 1) add59810(.a(a1874), .b(a1875), .clk(clk), .q(t1078));    // 0
    addfxp #(16, 1) add59825(.a(a1876), .b(a1877), .clk(clk), .q(t1079));    // 0
    subfxp #(16, 1) sub59840(.a(a1874), .b(a1875), .clk(clk), .q(t1080));    // 0
    subfxp #(16, 1) sub59855(.a(a1876), .b(a1877), .clk(clk), .q(t1081));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock59877(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76562(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1786;
   wire signed [15:0] a1787;
   wire signed [15:0] a1788;
   wire signed [15:0] a1789;
   wire signed [15:0] a1794;
   wire signed [15:0] a1795;
   wire signed [15:0] a1796;
   wire signed [15:0] a1797;
   wire signed [15:0] a1802;
   wire signed [15:0] a1803;
   wire signed [15:0] a1804;
   wire signed [15:0] a1805;
   wire signed [15:0] a1810;
   wire signed [15:0] a1811;
   wire signed [15:0] a1812;
   wire signed [15:0] a1813;
   wire signed [15:0] t962;
   wire signed [15:0] t963;
   wire signed [15:0] t964;
   wire signed [15:0] t965;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t966;
   wire signed [15:0] t967;
   wire signed [15:0] t968;
   wire signed [15:0] t969;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t970;
   wire signed [15:0] t971;
   wire signed [15:0] t972;
   wire signed [15:0] t973;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t974;
   wire signed [15:0] t975;
   wire signed [15:0] t976;
   wire signed [15:0] t977;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a1786 = X0;
   assign a1787 = X4;
   assign a1788 = X1;
   assign a1789 = X5;
   assign a1794 = X2;
   assign a1795 = X7;
   assign a1796 = X3;
   assign a1797 = X6;
   assign a1802 = X8;
   assign a1803 = X12;
   assign a1804 = X9;
   assign a1805 = X13;
   assign a1810 = X10;
   assign a1811 = X15;
   assign a1812 = X11;
   assign a1813 = X14;
   assign Y0 = t962;
   assign Y1 = t963;
   assign Y2 = t964;
   assign Y3 = t965;
   assign Y4 = t966;
   assign Y5 = t967;
   assign Y6 = t968;
   assign Y7 = t969;
   assign Y8 = t970;
   assign Y9 = t971;
   assign Y10 = t972;
   assign Y11 = t973;
   assign Y12 = t974;
   assign Y13 = t975;
   assign Y14 = t976;
   assign Y15 = t977;

    addfxp #(16, 1) add59889(.a(a1786), .b(a1787), .clk(clk), .q(t962));    // 0
    addfxp #(16, 1) add59904(.a(a1788), .b(a1789), .clk(clk), .q(t963));    // 0
    subfxp #(16, 1) sub59919(.a(a1786), .b(a1787), .clk(clk), .q(t964));    // 0
    subfxp #(16, 1) sub59934(.a(a1788), .b(a1789), .clk(clk), .q(t965));    // 0
    addfxp #(16, 1) add59965(.a(a1794), .b(a1795), .clk(clk), .q(t966));    // 0
    subfxp #(16, 1) sub59980(.a(a1796), .b(a1797), .clk(clk), .q(t967));    // 0
    subfxp #(16, 1) sub59995(.a(a1794), .b(a1795), .clk(clk), .q(t968));    // 0
    addfxp #(16, 1) add60010(.a(a1796), .b(a1797), .clk(clk), .q(t969));    // 0
    addfxp #(16, 1) add60041(.a(a1802), .b(a1803), .clk(clk), .q(t970));    // 0
    addfxp #(16, 1) add60056(.a(a1804), .b(a1805), .clk(clk), .q(t971));    // 0
    subfxp #(16, 1) sub60071(.a(a1802), .b(a1803), .clk(clk), .q(t972));    // 0
    subfxp #(16, 1) sub60086(.a(a1804), .b(a1805), .clk(clk), .q(t973));    // 0
    addfxp #(16, 1) add60117(.a(a1810), .b(a1811), .clk(clk), .q(t974));    // 0
    subfxp #(16, 1) sub60132(.a(a1812), .b(a1813), .clk(clk), .q(t975));    // 0
    subfxp #(16, 1) sub60147(.a(a1810), .b(a1811), .clk(clk), .q(t976));    // 0
    addfxp #(16, 1) add60162(.a(a1812), .b(a1813), .clk(clk), .q(t977));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 5
// Gap: 1
module codeBlock60184(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(4, 1) shiftFIFO_76565(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1726;
   wire signed [15:0] a1727;
   wire signed [15:0] a1728;
   wire signed [15:0] a1729;
   wire signed [15:0] a1734;
   wire signed [15:0] a1735;
   wire signed [15:0] a1736;
   wire signed [15:0] a1737;
   wire signed [15:0] a1740;
   wire signed [15:0] a1741;
   wire signed [15:0] a1742;
   wire signed [15:0] a1743;
   wire signed [15:0] a1748;
   wire signed [15:0] a1749;
   wire signed [15:0] a1750;
   wire signed [15:0] a1751;
   wire signed [15:0] t838;
   wire signed [15:0] t839;
   wire signed [15:0] t840;
   wire signed [15:0] t841;
   wire signed [15:0] t848;
   wire signed [15:0] t849;
   wire signed [15:0] t850;
   wire signed [15:0] t851;
   reg signed [15:0] tm746;
   reg signed [15:0] tm749;
   reg signed [15:0] tm758;
   reg signed [15:0] tm761;
   wire signed [15:0] a1722;
   wire signed [15:0] a1723;
   wire signed [15:0] a1724;
   wire signed [15:0] a1725;
   reg signed [15:0] tm747;
   reg signed [15:0] tm750;
   reg signed [15:0] tm759;
   reg signed [15:0] tm762;
   reg signed [15:0] tm770;
   reg signed [15:0] tm773;
   reg signed [15:0] tm776;
   reg signed [15:0] tm779;
   reg signed [15:0] tm782;
   reg signed [15:0] tm785;
   reg signed [15:0] tm788;
   reg signed [15:0] tm791;
   wire signed [15:0] t842;
   wire signed [15:0] t843;
   wire signed [15:0] t852;
   wire signed [15:0] t853;
   reg signed [15:0] tm748;
   reg signed [15:0] tm751;
   reg signed [15:0] tm760;
   reg signed [15:0] tm763;
   reg signed [15:0] tm771;
   reg signed [15:0] tm774;
   reg signed [15:0] tm777;
   reg signed [15:0] tm780;
   reg signed [15:0] tm783;
   reg signed [15:0] tm786;
   reg signed [15:0] tm789;
   reg signed [15:0] tm792;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t844;
   wire signed [15:0] t845;
   wire signed [15:0] t846;
   wire signed [15:0] t847;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t854;
   wire signed [15:0] t855;
   wire signed [15:0] t856;
   wire signed [15:0] t857;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm772;
   reg signed [15:0] tm775;
   reg signed [15:0] tm778;
   reg signed [15:0] tm781;
   reg signed [15:0] tm784;
   reg signed [15:0] tm787;
   reg signed [15:0] tm790;
   reg signed [15:0] tm793;

   wire signed [15:0] tm1;
   assign tm1 = 16'h2d41;

   assign a1726 = X0;
   assign a1727 = X8;
   assign a1728 = X1;
   assign a1729 = X9;
   assign a1734 = X12;
   assign a1735 = X13;
   assign a1736 = X4;
   assign a1737 = X5;
   assign a1740 = X2;
   assign a1741 = X11;
   assign a1742 = X3;
   assign a1743 = X10;
   assign a1748 = X15;
   assign a1749 = X14;
   assign a1750 = X6;
   assign a1751 = X7;
   assign Y0 = tm772;
   assign Y1 = tm775;
   assign Y2 = tm778;
   assign Y3 = tm781;
   assign Y4 = t844;
   assign Y5 = t845;
   assign Y6 = t846;
   assign Y7 = t847;
   assign Y8 = tm784;
   assign Y9 = tm787;
   assign Y10 = tm790;
   assign Y11 = tm793;
   assign Y12 = t854;
   assign Y13 = t855;
   assign Y14 = t856;
   assign Y15 = t857;

    addfxp #(16, 1) add60196(.a(a1726), .b(a1727), .clk(clk), .q(t838));    // 0
    addfxp #(16, 1) add60211(.a(a1728), .b(a1729), .clk(clk), .q(t839));    // 0
    subfxp #(16, 1) sub60226(.a(a1726), .b(a1727), .clk(clk), .q(t840));    // 0
    subfxp #(16, 1) sub60241(.a(a1728), .b(a1729), .clk(clk), .q(t841));    // 0
    addfxp #(16, 1) add60368(.a(a1740), .b(a1741), .clk(clk), .q(t848));    // 0
    subfxp #(16, 1) sub60383(.a(a1742), .b(a1743), .clk(clk), .q(t849));    // 0
    subfxp #(16, 1) sub60398(.a(a1740), .b(a1741), .clk(clk), .q(t850));    // 0
    addfxp #(16, 1) add60413(.a(a1742), .b(a1743), .clk(clk), .q(t851));    // 0
    multfix #(16, 2) m60268(.a(tm1), .b(a1734), .clk(clk), .q_sc(a1722), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60279(.a(tm1), .b(a1735), .clk(clk), .q_sc(a1723), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60440(.a(tm1), .b(a1748), .clk(clk), .q_sc(a1724), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60451(.a(tm1), .b(a1749), .clk(clk), .q_sc(a1725), .q_unsc(), .rst(reset));
    addfxp #(16, 1) add60286(.a(a1722), .b(a1723), .clk(clk), .q(t842));    // 2
    subfxp #(16, 1) sub60293(.a(a1723), .b(a1722), .clk(clk), .q(t843));    // 2
    subfxp #(16, 1) sub60458(.a(a1724), .b(a1725), .clk(clk), .q(t852));    // 2
    addfxp #(16, 1) add60465(.a(a1725), .b(a1724), .clk(clk), .q(t853));    // 2
    addfxp #(16, 1) add60304(.a(tm748), .b(t842), .clk(clk), .q(t844));    // 3
    addfxp #(16, 1) add60315(.a(tm751), .b(t843), .clk(clk), .q(t845));    // 3
    subfxp #(16, 1) sub60326(.a(tm748), .b(t842), .clk(clk), .q(t846));    // 3
    subfxp #(16, 1) sub60337(.a(tm751), .b(t843), .clk(clk), .q(t847));    // 3
    addfxp #(16, 1) add60476(.a(tm760), .b(t852), .clk(clk), .q(t854));    // 3
    subfxp #(16, 1) sub60487(.a(tm763), .b(t853), .clk(clk), .q(t855));    // 3
    subfxp #(16, 1) sub60498(.a(tm760), .b(t852), .clk(clk), .q(t856));    // 3
    addfxp #(16, 1) add60509(.a(tm763), .b(t853), .clk(clk), .q(t857));    // 3


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm746 <= a1736;
         tm749 <= a1737;
         tm758 <= a1750;
         tm761 <= a1751;
         tm747 <= tm746;
         tm750 <= tm749;
         tm759 <= tm758;
         tm762 <= tm761;
         tm770 <= t838;
         tm773 <= t839;
         tm776 <= t840;
         tm779 <= t841;
         tm782 <= t848;
         tm785 <= t849;
         tm788 <= t850;
         tm791 <= t851;
         tm748 <= tm747;
         tm751 <= tm750;
         tm760 <= tm759;
         tm763 <= tm762;
         tm771 <= tm770;
         tm774 <= tm773;
         tm777 <= tm776;
         tm780 <= tm779;
         tm783 <= tm782;
         tm786 <= tm785;
         tm789 <= tm788;
         tm792 <= tm791;
         tm772 <= tm771;
         tm775 <= tm774;
         tm778 <= tm777;
         tm781 <= tm780;
         tm784 <= tm783;
         tm787 <= tm786;
         tm790 <= tm789;
         tm793 <= tm792;
      end
   end
endmodule

// Latency: 10
// Gap: 2
module rc60534(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm60532 instPerm76566(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet60532(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [0:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        1'd0: control <= 4'b1111;
        1'd1: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 10
// Gap: 2
module perm60532(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 2;

   parameter addrbits = 1;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm5;
   assign tm5 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76571(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76572(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

shiftRegFIFO #(1, 1) shiftFIFO_76581(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76582(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(2, 1) shiftFIFO_76583(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76584(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76587(.X(tm5), .Y(tm5_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76590(.X(tm5_d), .Y(tm5_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 1) shiftFIFO_76595(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd0 <= 1;
	     {1'd0,  1'd1}: s1rd0 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd1 <= 0;
	     {1'd0,  1'd1}: s1rd1 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd2 <= 1;
	     {1'd0,  1'd1}: s1rd2 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd3 <= 0;
	     {1'd0,  1'd1}: s1rd3 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd4 <= 1;
	     {1'd0,  1'd1}: s1rd4 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd5 <= 0;
	     {1'd0,  1'd1}: s1rd5 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd6 <= 1;
	     {1'd0,  1'd1}: s1rd6 <= 0;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm5_d, s1rdloc})
	     {1'd0,  1'd0}: s1rd7 <= 0;
	     {1'd0,  1'd1}: s1rd7 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet60532 sw(tm5_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr0 <= 1;
	      {1'd0, 1'd1}: s2wr0 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr1 <= 0;
	      {1'd0, 1'd1}: s2wr1 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr2 <= 1;
	      {1'd0, 1'd1}: s2wr2 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr3 <= 0;
	      {1'd0, 1'd1}: s2wr3 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr4 <= 1;
	      {1'd0, 1'd1}: s2wr4 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr5 <= 0;
	      {1'd0, 1'd1}: s2wr5 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr6 <= 1;
	      {1'd0, 1'd1}: s2wr6 <= 0;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm5_dd, writeCycle})
	      {1'd0, 1'd0}: s2wr7 <= 0;
	      {1'd0, 1'd1}: s2wr7 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 2
module DirSum_61243(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [0:0] i7;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i7 <= 0;
      end
      else begin
         if (next == 1)
            i7 <= 0;
         else if (i7 == 1)
            i7 <= 0;
         else
            i7 <= i7 + 1;
      end
   end

   codeBlock60537 codeBlockIsnt76596(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i7_in(i7),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D106_61181(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D100_61193(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D108_61197(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D98_61209(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h0;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D102_61221(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h2d41;
      1: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D112_61229(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hc4df;
      1: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D104_61241(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [0:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h187e;
      1: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock60537(clk, reset, next_in, next_out,
   i7_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [0:0] i7_in;
   reg [0:0] i7;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76599(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1634;
   reg signed [15:0] tm17;
   reg signed [15:0] tm146;
   wire signed [15:0] a1650;
   wire signed [15:0] a1603;
   wire signed [15:0] a1653;
   wire signed [15:0] a1607;
   wire signed [15:0] a1654;
   wire signed [15:0] a1655;
   wire signed [15:0] a1658;
   wire signed [15:0] a1615;
   wire signed [15:0] a1661;
   wire signed [15:0] a1619;
   wire signed [15:0] a1662;
   wire signed [15:0] a1663;
   wire signed [15:0] a1666;
   wire signed [15:0] a1627;
   wire signed [15:0] a1669;
   wire signed [15:0] a1631;
   wire signed [15:0] a1670;
   wire signed [15:0] a1671;
   wire signed [15:0] a1674;
   wire signed [15:0] a1639;
   wire signed [15:0] a1677;
   wire signed [15:0] a1643;
   wire signed [15:0] a1678;
   wire signed [15:0] a1679;
   reg signed [15:0] tm794;
   reg signed [15:0] tm798;
   reg signed [15:0] tm810;
   reg signed [15:0] tm814;
   reg signed [15:0] tm826;
   reg signed [15:0] tm834;
   reg signed [15:0] tm842;
   reg signed [15:0] tm846;
   reg signed [15:0] tm858;
   reg signed [15:0] tm865;
   reg signed [15:0] tm872;
   reg signed [15:0] tm879;
   reg signed [15:0] tm886;
   reg signed [15:0] tm893;
   reg signed [15:0] tm900;
   reg signed [15:0] tm907;
   wire signed [15:0] a1635;
   wire signed [15:0] a1636;
   reg signed [15:0] tm795;
   reg signed [15:0] tm799;
   reg signed [15:0] tm811;
   reg signed [15:0] tm815;
   reg signed [15:0] tm827;
   reg signed [15:0] tm835;
   reg signed [15:0] tm843;
   reg signed [15:0] tm847;
   reg signed [15:0] tm859;
   reg signed [15:0] tm866;
   reg signed [15:0] tm873;
   reg signed [15:0] tm880;
   reg signed [15:0] tm887;
   reg signed [15:0] tm894;
   reg signed [15:0] tm901;
   reg signed [15:0] tm908;
   wire signed [15:0] tm8;
   wire signed [15:0] a1608;
   wire signed [15:0] tm9;
   wire signed [15:0] a1610;
   wire signed [15:0] tm12;
   wire signed [15:0] a1620;
   wire signed [15:0] tm13;
   wire signed [15:0] a1622;
   wire signed [15:0] tm16;
   wire signed [15:0] a1632;
   wire signed [15:0] tm20;
   wire signed [15:0] a1644;
   wire signed [15:0] tm21;
   wire signed [15:0] a1646;
   reg signed [15:0] tm796;
   reg signed [15:0] tm800;
   reg signed [15:0] tm812;
   reg signed [15:0] tm816;
   reg signed [15:0] tm828;
   reg signed [15:0] tm830;
   reg signed [15:0] tm836;
   reg signed [15:0] tm838;
   reg signed [15:0] tm844;
   reg signed [15:0] tm848;
   reg signed [15:0] tm860;
   reg signed [15:0] tm867;
   reg signed [15:0] tm874;
   reg signed [15:0] tm881;
   reg signed [15:0] tm888;
   reg signed [15:0] tm895;
   reg signed [15:0] tm902;
   reg signed [15:0] tm909;
   reg signed [15:0] tm129;
   reg signed [15:0] tm130;
   reg signed [15:0] tm137;
   reg signed [15:0] tm138;
   reg signed [15:0] tm145;
   reg signed [15:0] tm153;
   reg signed [15:0] tm154;
   reg signed [15:0] tm797;
   reg signed [15:0] tm801;
   reg signed [15:0] tm813;
   reg signed [15:0] tm817;
   reg signed [15:0] tm829;
   reg signed [15:0] tm831;
   reg signed [15:0] tm837;
   reg signed [15:0] tm839;
   reg signed [15:0] tm845;
   reg signed [15:0] tm849;
   reg signed [15:0] tm861;
   reg signed [15:0] tm868;
   reg signed [15:0] tm875;
   reg signed [15:0] tm882;
   reg signed [15:0] tm889;
   reg signed [15:0] tm896;
   reg signed [15:0] tm903;
   reg signed [15:0] tm910;
   reg signed [15:0] tm832;
   reg signed [15:0] tm840;
   reg signed [15:0] tm862;
   reg signed [15:0] tm869;
   reg signed [15:0] tm876;
   reg signed [15:0] tm883;
   reg signed [15:0] tm890;
   reg signed [15:0] tm897;
   reg signed [15:0] tm904;
   reg signed [15:0] tm911;
   wire signed [15:0] a1609;
   wire signed [15:0] a1611;
   wire signed [15:0] a1612;
   wire signed [15:0] a1613;
   wire signed [15:0] a1621;
   wire signed [15:0] a1623;
   wire signed [15:0] a1624;
   wire signed [15:0] a1625;
   wire signed [15:0] a1633;
   wire signed [15:0] a1637;
   wire signed [15:0] a1645;
   wire signed [15:0] a1647;
   wire signed [15:0] a1648;
   wire signed [15:0] a1649;
   reg signed [15:0] tm833;
   reg signed [15:0] tm841;
   reg signed [15:0] tm863;
   reg signed [15:0] tm870;
   reg signed [15:0] tm877;
   reg signed [15:0] tm884;
   reg signed [15:0] tm891;
   reg signed [15:0] tm898;
   reg signed [15:0] tm905;
   reg signed [15:0] tm912;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm864;
   reg signed [15:0] tm871;
   reg signed [15:0] tm878;
   reg signed [15:0] tm885;
   reg signed [15:0] tm892;
   reg signed [15:0] tm899;
   reg signed [15:0] tm906;
   reg signed [15:0] tm913;

   wire signed [15:0] tm391;
   assign tm391 = 16'hd2bf;

   assign a1634 = tm17;
   assign a1650 = X0;
   assign a1603 = a1650;
   assign a1653 = X1;
   assign a1607 = a1653;
   assign a1654 = X2;
   assign a1655 = X3;
   assign a1658 = X4;
   assign a1615 = a1658;
   assign a1661 = X5;
   assign a1619 = a1661;
   assign a1662 = X6;
   assign a1663 = X7;
   assign a1666 = X8;
   assign a1627 = a1666;
   assign a1669 = X9;
   assign a1631 = a1669;
   assign a1670 = X10;
   assign a1671 = X11;
   assign a1674 = X12;
   assign a1639 = a1674;
   assign a1677 = X13;
   assign a1643 = a1677;
   assign a1678 = X14;
   assign a1679 = X15;
   assign a1608 = tm8;
   assign a1610 = tm9;
   assign a1620 = tm12;
   assign a1622 = tm13;
   assign a1632 = tm16;
   assign a1644 = tm20;
   assign a1646 = tm21;
   assign Y0 = tm864;
   assign Y1 = tm871;
   assign Y4 = tm878;
   assign Y5 = tm885;
   assign Y8 = tm892;
   assign Y9 = tm899;
   assign Y12 = tm906;
   assign Y13 = tm913;

   D106_61181 instD106inst0_61181(.addr(i7[0:0]), .out(tm9), .clk(clk));

   D100_61193 instD100inst0_61193(.addr(i7[0:0]), .out(tm12), .clk(clk));

   D108_61197 instD108inst0_61197(.addr(i7[0:0]), .out(tm13), .clk(clk));

   D98_61209 instD98inst0_61209(.addr(i7[0:0]), .out(tm8), .clk(clk));

   D102_61221 instD102inst0_61221(.addr(i7[0:0]), .out(tm16), .clk(clk));

   D112_61229 instD112inst0_61229(.addr(i7[0:0]), .out(tm21), .clk(clk));

   D104_61241 instD104inst0_61241(.addr(i7[0:0]), .out(tm20), .clk(clk));

    multfix #(16, 2) m60978(.a(tm146), .b(a1671), .clk(clk), .q_sc(a1635), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60996(.a(tm146), .b(a1670), .clk(clk), .q_sc(a1636), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60636(.a(tm129), .b(tm797), .clk(clk), .q_sc(a1609), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60658(.a(tm130), .b(tm801), .clk(clk), .q_sc(a1611), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60676(.a(tm130), .b(tm797), .clk(clk), .q_sc(a1612), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60687(.a(tm129), .b(tm801), .clk(clk), .q_sc(a1613), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60796(.a(tm137), .b(tm813), .clk(clk), .q_sc(a1621), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60818(.a(tm138), .b(tm817), .clk(clk), .q_sc(a1623), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60836(.a(tm138), .b(tm813), .clk(clk), .q_sc(a1624), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60847(.a(tm137), .b(tm817), .clk(clk), .q_sc(a1625), .q_unsc(), .rst(reset));
    multfix #(16, 2) m60956(.a(tm145), .b(tm829), .clk(clk), .q_sc(a1633), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61007(.a(tm145), .b(tm837), .clk(clk), .q_sc(a1637), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61116(.a(tm153), .b(tm845), .clk(clk), .q_sc(a1645), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61138(.a(tm154), .b(tm849), .clk(clk), .q_sc(a1647), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61156(.a(tm154), .b(tm845), .clk(clk), .q_sc(a1648), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61167(.a(tm153), .b(tm849), .clk(clk), .q_sc(a1649), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub60665(.a(a1609), .b(a1611), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add60694(.a(a1612), .b(a1613), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub60825(.a(a1621), .b(a1623), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add60854(.a(a1624), .b(a1625), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub60985(.a(a1633), .b(tm833), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add61014(.a(tm841), .b(a1637), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub61145(.a(a1645), .b(a1647), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add61174(.a(a1648), .b(a1649), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm146 <= 0;
         tm146 <= 0;
         tm129 <= 0;
         tm797 <= 0;
         tm130 <= 0;
         tm801 <= 0;
         tm130 <= 0;
         tm797 <= 0;
         tm129 <= 0;
         tm801 <= 0;
         tm137 <= 0;
         tm813 <= 0;
         tm138 <= 0;
         tm817 <= 0;
         tm138 <= 0;
         tm813 <= 0;
         tm137 <= 0;
         tm817 <= 0;
         tm145 <= 0;
         tm829 <= 0;
         tm145 <= 0;
         tm837 <= 0;
         tm153 <= 0;
         tm845 <= 0;
         tm154 <= 0;
         tm849 <= 0;
         tm154 <= 0;
         tm845 <= 0;
         tm153 <= 0;
         tm849 <= 0;
      end
      else begin
         i7 <= i7_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm17 <= tm391;
         tm146 <= a1634;
         tm794 <= a1654;
         tm798 <= a1655;
         tm810 <= a1662;
         tm814 <= a1663;
         tm826 <= a1670;
         tm834 <= a1671;
         tm842 <= a1678;
         tm846 <= a1679;
         tm858 <= a1603;
         tm865 <= a1607;
         tm872 <= a1615;
         tm879 <= a1619;
         tm886 <= a1627;
         tm893 <= a1631;
         tm900 <= a1639;
         tm907 <= a1643;
         tm795 <= tm794;
         tm799 <= tm798;
         tm811 <= tm810;
         tm815 <= tm814;
         tm827 <= tm826;
         tm835 <= tm834;
         tm843 <= tm842;
         tm847 <= tm846;
         tm859 <= tm858;
         tm866 <= tm865;
         tm873 <= tm872;
         tm880 <= tm879;
         tm887 <= tm886;
         tm894 <= tm893;
         tm901 <= tm900;
         tm908 <= tm907;
         tm796 <= tm795;
         tm800 <= tm799;
         tm812 <= tm811;
         tm816 <= tm815;
         tm828 <= tm827;
         tm830 <= a1635;
         tm836 <= tm835;
         tm838 <= a1636;
         tm844 <= tm843;
         tm848 <= tm847;
         tm860 <= tm859;
         tm867 <= tm866;
         tm874 <= tm873;
         tm881 <= tm880;
         tm888 <= tm887;
         tm895 <= tm894;
         tm902 <= tm901;
         tm909 <= tm908;
         tm129 <= a1608;
         tm130 <= a1610;
         tm137 <= a1620;
         tm138 <= a1622;
         tm145 <= a1632;
         tm153 <= a1644;
         tm154 <= a1646;
         tm797 <= tm796;
         tm801 <= tm800;
         tm813 <= tm812;
         tm817 <= tm816;
         tm829 <= tm828;
         tm831 <= tm830;
         tm837 <= tm836;
         tm839 <= tm838;
         tm845 <= tm844;
         tm849 <= tm848;
         tm861 <= tm860;
         tm868 <= tm867;
         tm875 <= tm874;
         tm882 <= tm881;
         tm889 <= tm888;
         tm896 <= tm895;
         tm903 <= tm902;
         tm910 <= tm909;
         tm832 <= tm831;
         tm840 <= tm839;
         tm862 <= tm861;
         tm869 <= tm868;
         tm876 <= tm875;
         tm883 <= tm882;
         tm890 <= tm889;
         tm897 <= tm896;
         tm904 <= tm903;
         tm911 <= tm910;
         tm833 <= tm832;
         tm841 <= tm840;
         tm863 <= tm862;
         tm870 <= tm869;
         tm877 <= tm876;
         tm884 <= tm883;
         tm891 <= tm890;
         tm898 <= tm897;
         tm905 <= tm904;
         tm912 <= tm911;
         tm864 <= tm863;
         tm871 <= tm870;
         tm878 <= tm877;
         tm885 <= tm884;
         tm892 <= tm891;
         tm899 <= tm898;
         tm906 <= tm905;
         tm913 <= tm912;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock61246(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76602(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1474;
   wire signed [15:0] a1475;
   wire signed [15:0] a1476;
   wire signed [15:0] a1477;
   wire signed [15:0] a1482;
   wire signed [15:0] a1483;
   wire signed [15:0] a1484;
   wire signed [15:0] a1485;
   wire signed [15:0] a1490;
   wire signed [15:0] a1491;
   wire signed [15:0] a1492;
   wire signed [15:0] a1493;
   wire signed [15:0] a1498;
   wire signed [15:0] a1499;
   wire signed [15:0] a1500;
   wire signed [15:0] a1501;
   wire signed [15:0] t714;
   wire signed [15:0] t715;
   wire signed [15:0] t716;
   wire signed [15:0] t717;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t718;
   wire signed [15:0] t719;
   wire signed [15:0] t720;
   wire signed [15:0] t721;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t722;
   wire signed [15:0] t723;
   wire signed [15:0] t724;
   wire signed [15:0] t725;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t726;
   wire signed [15:0] t727;
   wire signed [15:0] t728;
   wire signed [15:0] t729;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a1474 = X0;
   assign a1475 = X2;
   assign a1476 = X1;
   assign a1477 = X3;
   assign a1482 = X4;
   assign a1483 = X6;
   assign a1484 = X5;
   assign a1485 = X7;
   assign a1490 = X8;
   assign a1491 = X10;
   assign a1492 = X9;
   assign a1493 = X11;
   assign a1498 = X12;
   assign a1499 = X14;
   assign a1500 = X13;
   assign a1501 = X15;
   assign Y0 = t714;
   assign Y1 = t715;
   assign Y2 = t716;
   assign Y3 = t717;
   assign Y4 = t718;
   assign Y5 = t719;
   assign Y6 = t720;
   assign Y7 = t721;
   assign Y8 = t722;
   assign Y9 = t723;
   assign Y10 = t724;
   assign Y11 = t725;
   assign Y12 = t726;
   assign Y13 = t727;
   assign Y14 = t728;
   assign Y15 = t729;

    addfxp #(16, 1) add61258(.a(a1474), .b(a1475), .clk(clk), .q(t714));    // 0
    addfxp #(16, 1) add61273(.a(a1476), .b(a1477), .clk(clk), .q(t715));    // 0
    subfxp #(16, 1) sub61288(.a(a1474), .b(a1475), .clk(clk), .q(t716));    // 0
    subfxp #(16, 1) sub61303(.a(a1476), .b(a1477), .clk(clk), .q(t717));    // 0
    addfxp #(16, 1) add61334(.a(a1482), .b(a1483), .clk(clk), .q(t718));    // 0
    addfxp #(16, 1) add61349(.a(a1484), .b(a1485), .clk(clk), .q(t719));    // 0
    subfxp #(16, 1) sub61364(.a(a1482), .b(a1483), .clk(clk), .q(t720));    // 0
    subfxp #(16, 1) sub61379(.a(a1484), .b(a1485), .clk(clk), .q(t721));    // 0
    addfxp #(16, 1) add61410(.a(a1490), .b(a1491), .clk(clk), .q(t722));    // 0
    addfxp #(16, 1) add61425(.a(a1492), .b(a1493), .clk(clk), .q(t723));    // 0
    subfxp #(16, 1) sub61440(.a(a1490), .b(a1491), .clk(clk), .q(t724));    // 0
    subfxp #(16, 1) sub61455(.a(a1492), .b(a1493), .clk(clk), .q(t725));    // 0
    addfxp #(16, 1) add61486(.a(a1498), .b(a1499), .clk(clk), .q(t726));    // 0
    addfxp #(16, 1) add61501(.a(a1500), .b(a1501), .clk(clk), .q(t727));    // 0
    subfxp #(16, 1) sub61516(.a(a1498), .b(a1499), .clk(clk), .q(t728));    // 0
    subfxp #(16, 1) sub61531(.a(a1500), .b(a1501), .clk(clk), .q(t729));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 14
// Gap: 4
module rc61556(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm61554 instPerm76603(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet61554(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [1:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        2'd0: control <= 4'b1111;
        2'd1: control <= 4'b1111;
        2'd2: control <= 4'b0000;
        2'd3: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 14
// Gap: 4
module perm61554(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 4;

   parameter addrbits = 2;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm22;
   assign tm22 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76608(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76609(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

shiftRegFIFO #(3, 1) shiftFIFO_76618(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76619(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(4, 1) shiftFIFO_76620(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76621(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(3, 1) shiftFIFO_76624(.X(tm22), .Y(tm22_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76627(.X(tm22_d), .Y(tm22_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 2) shiftFIFO_76632(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd0 <= 2;
	     {1'd0,  2'd1}: s1rd0 <= 3;
	     {1'd0,  2'd2}: s1rd0 <= 0;
	     {1'd0,  2'd3}: s1rd0 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd1 <= 0;
	     {1'd0,  2'd1}: s1rd1 <= 1;
	     {1'd0,  2'd2}: s1rd1 <= 2;
	     {1'd0,  2'd3}: s1rd1 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd2 <= 2;
	     {1'd0,  2'd1}: s1rd2 <= 3;
	     {1'd0,  2'd2}: s1rd2 <= 0;
	     {1'd0,  2'd3}: s1rd2 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd3 <= 0;
	     {1'd0,  2'd1}: s1rd3 <= 1;
	     {1'd0,  2'd2}: s1rd3 <= 2;
	     {1'd0,  2'd3}: s1rd3 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd4 <= 2;
	     {1'd0,  2'd1}: s1rd4 <= 3;
	     {1'd0,  2'd2}: s1rd4 <= 0;
	     {1'd0,  2'd3}: s1rd4 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd5 <= 0;
	     {1'd0,  2'd1}: s1rd5 <= 1;
	     {1'd0,  2'd2}: s1rd5 <= 2;
	     {1'd0,  2'd3}: s1rd5 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd6 <= 2;
	     {1'd0,  2'd1}: s1rd6 <= 3;
	     {1'd0,  2'd2}: s1rd6 <= 0;
	     {1'd0,  2'd3}: s1rd6 <= 1;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm22_d, s1rdloc})
	     {1'd0,  2'd0}: s1rd7 <= 0;
	     {1'd0,  2'd1}: s1rd7 <= 1;
	     {1'd0,  2'd2}: s1rd7 <= 2;
	     {1'd0,  2'd3}: s1rd7 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet61554 sw(tm22_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr0 <= 2;
	      {1'd0, 2'd1}: s2wr0 <= 3;
	      {1'd0, 2'd2}: s2wr0 <= 0;
	      {1'd0, 2'd3}: s2wr0 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr1 <= 0;
	      {1'd0, 2'd1}: s2wr1 <= 1;
	      {1'd0, 2'd2}: s2wr1 <= 2;
	      {1'd0, 2'd3}: s2wr1 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr2 <= 2;
	      {1'd0, 2'd1}: s2wr2 <= 3;
	      {1'd0, 2'd2}: s2wr2 <= 0;
	      {1'd0, 2'd3}: s2wr2 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr3 <= 0;
	      {1'd0, 2'd1}: s2wr3 <= 1;
	      {1'd0, 2'd2}: s2wr3 <= 2;
	      {1'd0, 2'd3}: s2wr3 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr4 <= 2;
	      {1'd0, 2'd1}: s2wr4 <= 3;
	      {1'd0, 2'd2}: s2wr4 <= 0;
	      {1'd0, 2'd3}: s2wr4 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr5 <= 0;
	      {1'd0, 2'd1}: s2wr5 <= 1;
	      {1'd0, 2'd2}: s2wr5 <= 2;
	      {1'd0, 2'd3}: s2wr5 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr6 <= 2;
	      {1'd0, 2'd1}: s2wr6 <= 3;
	      {1'd0, 2'd2}: s2wr6 <= 0;
	      {1'd0, 2'd3}: s2wr6 <= 1;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm22_dd, writeCycle})
	      {1'd0, 2'd0}: s2wr7 <= 0;
	      {1'd0, 2'd1}: s2wr7 <= 1;
	      {1'd0, 2'd2}: s2wr7 <= 2;
	      {1'd0, 2'd3}: s2wr7 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 4
module DirSum_62297(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [1:0] i6;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i6 <= 0;
      end
      else begin
         if (next == 1)
            i6 <= 0;
         else if (i6 == 3)
            i6 <= 0;
         else
            i6 <= i6 + 1;
      end
   end

   codeBlock61559 codeBlockIsnt76633(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i6_in(i6),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D96_62205(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hdc72;
      1: out3 <= 16'hc13b;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D94_62217(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'he782;
      1: out3 <= 16'hc4df;
      2: out3 <= 16'hc4df;
      3: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D92_62229(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hcac9;
      2: out3 <= 16'hc13b;
      3: out3 <= 16'hdc72;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D90_62241(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hd2bf;
      2: out3 <= 16'hc000;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D88_62253(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3537;
      1: out3 <= 16'hc7c;
      2: out3 <= 16'hdc72;
      3: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D86_62265(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3b21;
      1: out3 <= 16'h187e;
      2: out3 <= 16'he782;
      3: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D84_62277(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h238e;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hcac9;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D82_62289(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [1:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h2d41;
      2: out3 <= 16'h0;
      3: out3 <= 16'hd2bf;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock61559(clk, reset, next_in, next_out,
   i6_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [1:0] i6_in;
   reg [1:0] i6;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76636(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1410;
   wire signed [15:0] a1363;
   wire signed [15:0] a1413;
   wire signed [15:0] a1367;
   wire signed [15:0] a1414;
   wire signed [15:0] a1415;
   wire signed [15:0] a1418;
   wire signed [15:0] a1375;
   wire signed [15:0] a1421;
   wire signed [15:0] a1379;
   wire signed [15:0] a1422;
   wire signed [15:0] a1423;
   wire signed [15:0] a1426;
   wire signed [15:0] a1387;
   wire signed [15:0] a1429;
   wire signed [15:0] a1391;
   wire signed [15:0] a1430;
   wire signed [15:0] a1431;
   wire signed [15:0] a1434;
   wire signed [15:0] a1399;
   wire signed [15:0] a1437;
   wire signed [15:0] a1403;
   wire signed [15:0] a1438;
   wire signed [15:0] a1439;
   reg signed [15:0] tm914;
   reg signed [15:0] tm918;
   reg signed [15:0] tm930;
   reg signed [15:0] tm934;
   reg signed [15:0] tm946;
   reg signed [15:0] tm950;
   reg signed [15:0] tm962;
   reg signed [15:0] tm966;
   reg signed [15:0] tm978;
   reg signed [15:0] tm985;
   reg signed [15:0] tm992;
   reg signed [15:0] tm999;
   reg signed [15:0] tm1006;
   reg signed [15:0] tm1013;
   reg signed [15:0] tm1020;
   reg signed [15:0] tm1027;
   reg signed [15:0] tm915;
   reg signed [15:0] tm919;
   reg signed [15:0] tm931;
   reg signed [15:0] tm935;
   reg signed [15:0] tm947;
   reg signed [15:0] tm951;
   reg signed [15:0] tm963;
   reg signed [15:0] tm967;
   reg signed [15:0] tm979;
   reg signed [15:0] tm986;
   reg signed [15:0] tm993;
   reg signed [15:0] tm1000;
   reg signed [15:0] tm1007;
   reg signed [15:0] tm1014;
   reg signed [15:0] tm1021;
   reg signed [15:0] tm1028;
   wire signed [15:0] tm25;
   wire signed [15:0] a1368;
   wire signed [15:0] tm26;
   wire signed [15:0] a1370;
   wire signed [15:0] tm29;
   wire signed [15:0] a1380;
   wire signed [15:0] tm30;
   wire signed [15:0] a1382;
   wire signed [15:0] tm33;
   wire signed [15:0] a1392;
   wire signed [15:0] tm34;
   wire signed [15:0] a1394;
   wire signed [15:0] tm37;
   wire signed [15:0] a1404;
   wire signed [15:0] tm38;
   wire signed [15:0] a1406;
   reg signed [15:0] tm916;
   reg signed [15:0] tm920;
   reg signed [15:0] tm932;
   reg signed [15:0] tm936;
   reg signed [15:0] tm948;
   reg signed [15:0] tm952;
   reg signed [15:0] tm964;
   reg signed [15:0] tm968;
   reg signed [15:0] tm980;
   reg signed [15:0] tm987;
   reg signed [15:0] tm994;
   reg signed [15:0] tm1001;
   reg signed [15:0] tm1008;
   reg signed [15:0] tm1015;
   reg signed [15:0] tm1022;
   reg signed [15:0] tm1029;
   reg signed [15:0] tm161;
   reg signed [15:0] tm162;
   reg signed [15:0] tm169;
   reg signed [15:0] tm170;
   reg signed [15:0] tm177;
   reg signed [15:0] tm178;
   reg signed [15:0] tm185;
   reg signed [15:0] tm186;
   reg signed [15:0] tm917;
   reg signed [15:0] tm921;
   reg signed [15:0] tm933;
   reg signed [15:0] tm937;
   reg signed [15:0] tm949;
   reg signed [15:0] tm953;
   reg signed [15:0] tm965;
   reg signed [15:0] tm969;
   reg signed [15:0] tm981;
   reg signed [15:0] tm988;
   reg signed [15:0] tm995;
   reg signed [15:0] tm1002;
   reg signed [15:0] tm1009;
   reg signed [15:0] tm1016;
   reg signed [15:0] tm1023;
   reg signed [15:0] tm1030;
   reg signed [15:0] tm982;
   reg signed [15:0] tm989;
   reg signed [15:0] tm996;
   reg signed [15:0] tm1003;
   reg signed [15:0] tm1010;
   reg signed [15:0] tm1017;
   reg signed [15:0] tm1024;
   reg signed [15:0] tm1031;
   wire signed [15:0] a1369;
   wire signed [15:0] a1371;
   wire signed [15:0] a1372;
   wire signed [15:0] a1373;
   wire signed [15:0] a1381;
   wire signed [15:0] a1383;
   wire signed [15:0] a1384;
   wire signed [15:0] a1385;
   wire signed [15:0] a1393;
   wire signed [15:0] a1395;
   wire signed [15:0] a1396;
   wire signed [15:0] a1397;
   wire signed [15:0] a1405;
   wire signed [15:0] a1407;
   wire signed [15:0] a1408;
   wire signed [15:0] a1409;
   reg signed [15:0] tm983;
   reg signed [15:0] tm990;
   reg signed [15:0] tm997;
   reg signed [15:0] tm1004;
   reg signed [15:0] tm1011;
   reg signed [15:0] tm1018;
   reg signed [15:0] tm1025;
   reg signed [15:0] tm1032;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm984;
   reg signed [15:0] tm991;
   reg signed [15:0] tm998;
   reg signed [15:0] tm1005;
   reg signed [15:0] tm1012;
   reg signed [15:0] tm1019;
   reg signed [15:0] tm1026;
   reg signed [15:0] tm1033;


   assign a1410 = X0;
   assign a1363 = a1410;
   assign a1413 = X1;
   assign a1367 = a1413;
   assign a1414 = X2;
   assign a1415 = X3;
   assign a1418 = X4;
   assign a1375 = a1418;
   assign a1421 = X5;
   assign a1379 = a1421;
   assign a1422 = X6;
   assign a1423 = X7;
   assign a1426 = X8;
   assign a1387 = a1426;
   assign a1429 = X9;
   assign a1391 = a1429;
   assign a1430 = X10;
   assign a1431 = X11;
   assign a1434 = X12;
   assign a1399 = a1434;
   assign a1437 = X13;
   assign a1403 = a1437;
   assign a1438 = X14;
   assign a1439 = X15;
   assign a1368 = tm25;
   assign a1370 = tm26;
   assign a1380 = tm29;
   assign a1382 = tm30;
   assign a1392 = tm33;
   assign a1394 = tm34;
   assign a1404 = tm37;
   assign a1406 = tm38;
   assign Y0 = tm984;
   assign Y1 = tm991;
   assign Y4 = tm998;
   assign Y5 = tm1005;
   assign Y8 = tm1012;
   assign Y9 = tm1019;
   assign Y12 = tm1026;
   assign Y13 = tm1033;

   D96_62205 instD96inst0_62205(.addr(i6[1:0]), .out(tm38), .clk(clk));

   D94_62217 instD94inst0_62217(.addr(i6[1:0]), .out(tm34), .clk(clk));

   D92_62229 instD92inst0_62229(.addr(i6[1:0]), .out(tm30), .clk(clk));

   D90_62241 instD90inst0_62241(.addr(i6[1:0]), .out(tm26), .clk(clk));

   D88_62253 instD88inst0_62253(.addr(i6[1:0]), .out(tm37), .clk(clk));

   D86_62265 instD86inst0_62265(.addr(i6[1:0]), .out(tm33), .clk(clk));

   D84_62277 instD84inst0_62277(.addr(i6[1:0]), .out(tm29), .clk(clk));

   D82_62289 instD82inst0_62289(.addr(i6[1:0]), .out(tm25), .clk(clk));

    multfix #(16, 2) m61658(.a(tm161), .b(tm917), .clk(clk), .q_sc(a1369), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61680(.a(tm162), .b(tm921), .clk(clk), .q_sc(a1371), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61698(.a(tm162), .b(tm917), .clk(clk), .q_sc(a1372), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61709(.a(tm161), .b(tm921), .clk(clk), .q_sc(a1373), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61818(.a(tm169), .b(tm933), .clk(clk), .q_sc(a1381), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61840(.a(tm170), .b(tm937), .clk(clk), .q_sc(a1383), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61858(.a(tm170), .b(tm933), .clk(clk), .q_sc(a1384), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61869(.a(tm169), .b(tm937), .clk(clk), .q_sc(a1385), .q_unsc(), .rst(reset));
    multfix #(16, 2) m61978(.a(tm177), .b(tm949), .clk(clk), .q_sc(a1393), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62000(.a(tm178), .b(tm953), .clk(clk), .q_sc(a1395), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62018(.a(tm178), .b(tm949), .clk(clk), .q_sc(a1396), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62029(.a(tm177), .b(tm953), .clk(clk), .q_sc(a1397), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62138(.a(tm185), .b(tm965), .clk(clk), .q_sc(a1405), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62160(.a(tm186), .b(tm969), .clk(clk), .q_sc(a1407), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62178(.a(tm186), .b(tm965), .clk(clk), .q_sc(a1408), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62189(.a(tm185), .b(tm969), .clk(clk), .q_sc(a1409), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub61687(.a(a1369), .b(a1371), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add61716(.a(a1372), .b(a1373), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub61847(.a(a1381), .b(a1383), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add61876(.a(a1384), .b(a1385), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub62007(.a(a1393), .b(a1395), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add62036(.a(a1396), .b(a1397), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub62167(.a(a1405), .b(a1407), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add62196(.a(a1408), .b(a1409), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm161 <= 0;
         tm917 <= 0;
         tm162 <= 0;
         tm921 <= 0;
         tm162 <= 0;
         tm917 <= 0;
         tm161 <= 0;
         tm921 <= 0;
         tm169 <= 0;
         tm933 <= 0;
         tm170 <= 0;
         tm937 <= 0;
         tm170 <= 0;
         tm933 <= 0;
         tm169 <= 0;
         tm937 <= 0;
         tm177 <= 0;
         tm949 <= 0;
         tm178 <= 0;
         tm953 <= 0;
         tm178 <= 0;
         tm949 <= 0;
         tm177 <= 0;
         tm953 <= 0;
         tm185 <= 0;
         tm965 <= 0;
         tm186 <= 0;
         tm969 <= 0;
         tm186 <= 0;
         tm965 <= 0;
         tm185 <= 0;
         tm969 <= 0;
      end
      else begin
         i6 <= i6_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm914 <= a1414;
         tm918 <= a1415;
         tm930 <= a1422;
         tm934 <= a1423;
         tm946 <= a1430;
         tm950 <= a1431;
         tm962 <= a1438;
         tm966 <= a1439;
         tm978 <= a1363;
         tm985 <= a1367;
         tm992 <= a1375;
         tm999 <= a1379;
         tm1006 <= a1387;
         tm1013 <= a1391;
         tm1020 <= a1399;
         tm1027 <= a1403;
         tm915 <= tm914;
         tm919 <= tm918;
         tm931 <= tm930;
         tm935 <= tm934;
         tm947 <= tm946;
         tm951 <= tm950;
         tm963 <= tm962;
         tm967 <= tm966;
         tm979 <= tm978;
         tm986 <= tm985;
         tm993 <= tm992;
         tm1000 <= tm999;
         tm1007 <= tm1006;
         tm1014 <= tm1013;
         tm1021 <= tm1020;
         tm1028 <= tm1027;
         tm916 <= tm915;
         tm920 <= tm919;
         tm932 <= tm931;
         tm936 <= tm935;
         tm948 <= tm947;
         tm952 <= tm951;
         tm964 <= tm963;
         tm968 <= tm967;
         tm980 <= tm979;
         tm987 <= tm986;
         tm994 <= tm993;
         tm1001 <= tm1000;
         tm1008 <= tm1007;
         tm1015 <= tm1014;
         tm1022 <= tm1021;
         tm1029 <= tm1028;
         tm161 <= a1368;
         tm162 <= a1370;
         tm169 <= a1380;
         tm170 <= a1382;
         tm177 <= a1392;
         tm178 <= a1394;
         tm185 <= a1404;
         tm186 <= a1406;
         tm917 <= tm916;
         tm921 <= tm920;
         tm933 <= tm932;
         tm937 <= tm936;
         tm949 <= tm948;
         tm953 <= tm952;
         tm965 <= tm964;
         tm969 <= tm968;
         tm981 <= tm980;
         tm988 <= tm987;
         tm995 <= tm994;
         tm1002 <= tm1001;
         tm1009 <= tm1008;
         tm1016 <= tm1015;
         tm1023 <= tm1022;
         tm1030 <= tm1029;
         tm982 <= tm981;
         tm989 <= tm988;
         tm996 <= tm995;
         tm1003 <= tm1002;
         tm1010 <= tm1009;
         tm1017 <= tm1016;
         tm1024 <= tm1023;
         tm1031 <= tm1030;
         tm983 <= tm982;
         tm990 <= tm989;
         tm997 <= tm996;
         tm1004 <= tm1003;
         tm1011 <= tm1010;
         tm1018 <= tm1017;
         tm1025 <= tm1024;
         tm1032 <= tm1031;
         tm984 <= tm983;
         tm991 <= tm990;
         tm998 <= tm997;
         tm1005 <= tm1004;
         tm1012 <= tm1011;
         tm1019 <= tm1018;
         tm1026 <= tm1025;
         tm1033 <= tm1032;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock62300(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76639(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1234;
   wire signed [15:0] a1235;
   wire signed [15:0] a1236;
   wire signed [15:0] a1237;
   wire signed [15:0] a1242;
   wire signed [15:0] a1243;
   wire signed [15:0] a1244;
   wire signed [15:0] a1245;
   wire signed [15:0] a1250;
   wire signed [15:0] a1251;
   wire signed [15:0] a1252;
   wire signed [15:0] a1253;
   wire signed [15:0] a1258;
   wire signed [15:0] a1259;
   wire signed [15:0] a1260;
   wire signed [15:0] a1261;
   wire signed [15:0] t610;
   wire signed [15:0] t611;
   wire signed [15:0] t612;
   wire signed [15:0] t613;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t614;
   wire signed [15:0] t615;
   wire signed [15:0] t616;
   wire signed [15:0] t617;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t618;
   wire signed [15:0] t619;
   wire signed [15:0] t620;
   wire signed [15:0] t621;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t622;
   wire signed [15:0] t623;
   wire signed [15:0] t624;
   wire signed [15:0] t625;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a1234 = X0;
   assign a1235 = X2;
   assign a1236 = X1;
   assign a1237 = X3;
   assign a1242 = X4;
   assign a1243 = X6;
   assign a1244 = X5;
   assign a1245 = X7;
   assign a1250 = X8;
   assign a1251 = X10;
   assign a1252 = X9;
   assign a1253 = X11;
   assign a1258 = X12;
   assign a1259 = X14;
   assign a1260 = X13;
   assign a1261 = X15;
   assign Y0 = t610;
   assign Y1 = t611;
   assign Y2 = t612;
   assign Y3 = t613;
   assign Y4 = t614;
   assign Y5 = t615;
   assign Y6 = t616;
   assign Y7 = t617;
   assign Y8 = t618;
   assign Y9 = t619;
   assign Y10 = t620;
   assign Y11 = t621;
   assign Y12 = t622;
   assign Y13 = t623;
   assign Y14 = t624;
   assign Y15 = t625;

    addfxp #(16, 1) add62312(.a(a1234), .b(a1235), .clk(clk), .q(t610));    // 0
    addfxp #(16, 1) add62327(.a(a1236), .b(a1237), .clk(clk), .q(t611));    // 0
    subfxp #(16, 1) sub62342(.a(a1234), .b(a1235), .clk(clk), .q(t612));    // 0
    subfxp #(16, 1) sub62357(.a(a1236), .b(a1237), .clk(clk), .q(t613));    // 0
    addfxp #(16, 1) add62388(.a(a1242), .b(a1243), .clk(clk), .q(t614));    // 0
    addfxp #(16, 1) add62403(.a(a1244), .b(a1245), .clk(clk), .q(t615));    // 0
    subfxp #(16, 1) sub62418(.a(a1242), .b(a1243), .clk(clk), .q(t616));    // 0
    subfxp #(16, 1) sub62433(.a(a1244), .b(a1245), .clk(clk), .q(t617));    // 0
    addfxp #(16, 1) add62464(.a(a1250), .b(a1251), .clk(clk), .q(t618));    // 0
    addfxp #(16, 1) add62479(.a(a1252), .b(a1253), .clk(clk), .q(t619));    // 0
    subfxp #(16, 1) sub62494(.a(a1250), .b(a1251), .clk(clk), .q(t620));    // 0
    subfxp #(16, 1) sub62509(.a(a1252), .b(a1253), .clk(clk), .q(t621));    // 0
    addfxp #(16, 1) add62540(.a(a1258), .b(a1259), .clk(clk), .q(t622));    // 0
    addfxp #(16, 1) add62555(.a(a1260), .b(a1261), .clk(clk), .q(t623));    // 0
    subfxp #(16, 1) sub62570(.a(a1258), .b(a1259), .clk(clk), .q(t624));    // 0
    subfxp #(16, 1) sub62585(.a(a1260), .b(a1261), .clk(clk), .q(t625));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 22
// Gap: 8
module rc62610(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm62608 instPerm76640(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet62608(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [2:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        3'd0: control <= 4'b1111;
        3'd1: control <= 4'b1111;
        3'd2: control <= 4'b1111;
        3'd3: control <= 4'b1111;
        3'd4: control <= 4'b0000;
        3'd5: control <= 4'b0000;
        3'd6: control <= 4'b0000;
        3'd7: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 22
// Gap: 8
module perm62608(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 8;

   parameter addrbits = 3;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm39;
   assign tm39 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76645(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76646(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

shiftRegFIFO #(7, 1) shiftFIFO_76655(.X(next), .Y(next2), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76656(.X(next2), .Y(next3), .clk(clk));
shiftRegFIFO #(8, 1) shiftFIFO_76657(.X(next3), .Y(next4), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76658(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(7, 1) shiftFIFO_76661(.X(tm39), .Y(tm39_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76664(.X(tm39_d), .Y(tm39_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 3) shiftFIFO_76669(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd0 <= 4;
	     {1'd0,  3'd1}: s1rd0 <= 5;
	     {1'd0,  3'd2}: s1rd0 <= 6;
	     {1'd0,  3'd3}: s1rd0 <= 7;
	     {1'd0,  3'd4}: s1rd0 <= 0;
	     {1'd0,  3'd5}: s1rd0 <= 1;
	     {1'd0,  3'd6}: s1rd0 <= 2;
	     {1'd0,  3'd7}: s1rd0 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd1 <= 0;
	     {1'd0,  3'd1}: s1rd1 <= 1;
	     {1'd0,  3'd2}: s1rd1 <= 2;
	     {1'd0,  3'd3}: s1rd1 <= 3;
	     {1'd0,  3'd4}: s1rd1 <= 4;
	     {1'd0,  3'd5}: s1rd1 <= 5;
	     {1'd0,  3'd6}: s1rd1 <= 6;
	     {1'd0,  3'd7}: s1rd1 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd2 <= 4;
	     {1'd0,  3'd1}: s1rd2 <= 5;
	     {1'd0,  3'd2}: s1rd2 <= 6;
	     {1'd0,  3'd3}: s1rd2 <= 7;
	     {1'd0,  3'd4}: s1rd2 <= 0;
	     {1'd0,  3'd5}: s1rd2 <= 1;
	     {1'd0,  3'd6}: s1rd2 <= 2;
	     {1'd0,  3'd7}: s1rd2 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd3 <= 0;
	     {1'd0,  3'd1}: s1rd3 <= 1;
	     {1'd0,  3'd2}: s1rd3 <= 2;
	     {1'd0,  3'd3}: s1rd3 <= 3;
	     {1'd0,  3'd4}: s1rd3 <= 4;
	     {1'd0,  3'd5}: s1rd3 <= 5;
	     {1'd0,  3'd6}: s1rd3 <= 6;
	     {1'd0,  3'd7}: s1rd3 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd4 <= 4;
	     {1'd0,  3'd1}: s1rd4 <= 5;
	     {1'd0,  3'd2}: s1rd4 <= 6;
	     {1'd0,  3'd3}: s1rd4 <= 7;
	     {1'd0,  3'd4}: s1rd4 <= 0;
	     {1'd0,  3'd5}: s1rd4 <= 1;
	     {1'd0,  3'd6}: s1rd4 <= 2;
	     {1'd0,  3'd7}: s1rd4 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd5 <= 0;
	     {1'd0,  3'd1}: s1rd5 <= 1;
	     {1'd0,  3'd2}: s1rd5 <= 2;
	     {1'd0,  3'd3}: s1rd5 <= 3;
	     {1'd0,  3'd4}: s1rd5 <= 4;
	     {1'd0,  3'd5}: s1rd5 <= 5;
	     {1'd0,  3'd6}: s1rd5 <= 6;
	     {1'd0,  3'd7}: s1rd5 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd6 <= 4;
	     {1'd0,  3'd1}: s1rd6 <= 5;
	     {1'd0,  3'd2}: s1rd6 <= 6;
	     {1'd0,  3'd3}: s1rd6 <= 7;
	     {1'd0,  3'd4}: s1rd6 <= 0;
	     {1'd0,  3'd5}: s1rd6 <= 1;
	     {1'd0,  3'd6}: s1rd6 <= 2;
	     {1'd0,  3'd7}: s1rd6 <= 3;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm39_d, s1rdloc})
	     {1'd0,  3'd0}: s1rd7 <= 0;
	     {1'd0,  3'd1}: s1rd7 <= 1;
	     {1'd0,  3'd2}: s1rd7 <= 2;
	     {1'd0,  3'd3}: s1rd7 <= 3;
	     {1'd0,  3'd4}: s1rd7 <= 4;
	     {1'd0,  3'd5}: s1rd7 <= 5;
	     {1'd0,  3'd6}: s1rd7 <= 6;
	     {1'd0,  3'd7}: s1rd7 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet62608 sw(tm39_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr0 <= 4;
	      {1'd0, 3'd1}: s2wr0 <= 5;
	      {1'd0, 3'd2}: s2wr0 <= 6;
	      {1'd0, 3'd3}: s2wr0 <= 7;
	      {1'd0, 3'd4}: s2wr0 <= 0;
	      {1'd0, 3'd5}: s2wr0 <= 1;
	      {1'd0, 3'd6}: s2wr0 <= 2;
	      {1'd0, 3'd7}: s2wr0 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr1 <= 0;
	      {1'd0, 3'd1}: s2wr1 <= 1;
	      {1'd0, 3'd2}: s2wr1 <= 2;
	      {1'd0, 3'd3}: s2wr1 <= 3;
	      {1'd0, 3'd4}: s2wr1 <= 4;
	      {1'd0, 3'd5}: s2wr1 <= 5;
	      {1'd0, 3'd6}: s2wr1 <= 6;
	      {1'd0, 3'd7}: s2wr1 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr2 <= 4;
	      {1'd0, 3'd1}: s2wr2 <= 5;
	      {1'd0, 3'd2}: s2wr2 <= 6;
	      {1'd0, 3'd3}: s2wr2 <= 7;
	      {1'd0, 3'd4}: s2wr2 <= 0;
	      {1'd0, 3'd5}: s2wr2 <= 1;
	      {1'd0, 3'd6}: s2wr2 <= 2;
	      {1'd0, 3'd7}: s2wr2 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr3 <= 0;
	      {1'd0, 3'd1}: s2wr3 <= 1;
	      {1'd0, 3'd2}: s2wr3 <= 2;
	      {1'd0, 3'd3}: s2wr3 <= 3;
	      {1'd0, 3'd4}: s2wr3 <= 4;
	      {1'd0, 3'd5}: s2wr3 <= 5;
	      {1'd0, 3'd6}: s2wr3 <= 6;
	      {1'd0, 3'd7}: s2wr3 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr4 <= 4;
	      {1'd0, 3'd1}: s2wr4 <= 5;
	      {1'd0, 3'd2}: s2wr4 <= 6;
	      {1'd0, 3'd3}: s2wr4 <= 7;
	      {1'd0, 3'd4}: s2wr4 <= 0;
	      {1'd0, 3'd5}: s2wr4 <= 1;
	      {1'd0, 3'd6}: s2wr4 <= 2;
	      {1'd0, 3'd7}: s2wr4 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr5 <= 0;
	      {1'd0, 3'd1}: s2wr5 <= 1;
	      {1'd0, 3'd2}: s2wr5 <= 2;
	      {1'd0, 3'd3}: s2wr5 <= 3;
	      {1'd0, 3'd4}: s2wr5 <= 4;
	      {1'd0, 3'd5}: s2wr5 <= 5;
	      {1'd0, 3'd6}: s2wr5 <= 6;
	      {1'd0, 3'd7}: s2wr5 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr6 <= 4;
	      {1'd0, 3'd1}: s2wr6 <= 5;
	      {1'd0, 3'd2}: s2wr6 <= 6;
	      {1'd0, 3'd3}: s2wr6 <= 7;
	      {1'd0, 3'd4}: s2wr6 <= 0;
	      {1'd0, 3'd5}: s2wr6 <= 1;
	      {1'd0, 3'd6}: s2wr6 <= 2;
	      {1'd0, 3'd7}: s2wr6 <= 3;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm39_dd, writeCycle})
	      {1'd0, 3'd0}: s2wr7 <= 0;
	      {1'd0, 3'd1}: s2wr7 <= 1;
	      {1'd0, 3'd2}: s2wr7 <= 2;
	      {1'd0, 3'd3}: s2wr7 <= 3;
	      {1'd0, 3'd4}: s2wr7 <= 4;
	      {1'd0, 3'd5}: s2wr7 <= 5;
	      {1'd0, 3'd6}: s2wr7 <= 6;
	      {1'd0, 3'd7}: s2wr7 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 8
module DirSum_63415(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [2:0] i5;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i5 <= 0;
      end
      else begin
         if (next == 1)
            i5 <= 0;
         else if (i5 == 7)
            i5 <= 0;
         else
            i5 <= i5 + 1;
      end
   end

   codeBlock62613 codeBlockIsnt76670(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i5_in(i5),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D80_63263(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hed6c;
      1: out3 <= 16'hd766;
      2: out3 <= 16'hc78f;
      3: out3 <= 16'hc04f;
      4: out3 <= 16'hc2c1;
      5: out3 <= 16'hce87;
      6: out3 <= 16'he1d5;
      7: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D78_63283(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf384;
      1: out3 <= 16'hdc72;
      2: out3 <= 16'hcac9;
      3: out3 <= 16'hc13b;
      4: out3 <= 16'hc13b;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D76_63303(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'he1d5;
      2: out3 <= 16'hce87;
      3: out3 <= 16'hc2c1;
      4: out3 <= 16'hc04f;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hd766;
      7: out3 <= 16'hed6c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D74_63323(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'he782;
      2: out3 <= 16'hd2bf;
      3: out3 <= 16'hc4df;
      4: out3 <= 16'hc000;
      5: out3 <= 16'hc4df;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'he782;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D72_63343(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3d3f;
      1: out3 <= 16'h3179;
      2: out3 <= 16'h1e2b;
      3: out3 <= 16'h646;
      4: out3 <= 16'hed6c;
      5: out3 <= 16'hd766;
      6: out3 <= 16'hc78f;
      7: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D70_63363(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ec5;
      1: out3 <= 16'h3537;
      2: out3 <= 16'h238e;
      3: out3 <= 16'hc7c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hdc72;
      6: out3 <= 16'hcac9;
      7: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D68_63383(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3871;
      2: out3 <= 16'h289a;
      3: out3 <= 16'h1294;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hce87;
      7: out3 <= 16'hc2c1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D66_63403(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [2:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3b21;
      2: out3 <= 16'h2d41;
      3: out3 <= 16'h187e;
      4: out3 <= 16'h0;
      5: out3 <= 16'he782;
      6: out3 <= 16'hd2bf;
      7: out3 <= 16'hc4df;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock62613(clk, reset, next_in, next_out,
   i5_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [2:0] i5_in;
   reg [2:0] i5;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76673(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a1170;
   wire signed [15:0] a1123;
   wire signed [15:0] a1173;
   wire signed [15:0] a1127;
   wire signed [15:0] a1174;
   wire signed [15:0] a1175;
   wire signed [15:0] a1178;
   wire signed [15:0] a1135;
   wire signed [15:0] a1181;
   wire signed [15:0] a1139;
   wire signed [15:0] a1182;
   wire signed [15:0] a1183;
   wire signed [15:0] a1186;
   wire signed [15:0] a1147;
   wire signed [15:0] a1189;
   wire signed [15:0] a1151;
   wire signed [15:0] a1190;
   wire signed [15:0] a1191;
   wire signed [15:0] a1194;
   wire signed [15:0] a1159;
   wire signed [15:0] a1197;
   wire signed [15:0] a1163;
   wire signed [15:0] a1198;
   wire signed [15:0] a1199;
   reg signed [15:0] tm1034;
   reg signed [15:0] tm1038;
   reg signed [15:0] tm1050;
   reg signed [15:0] tm1054;
   reg signed [15:0] tm1066;
   reg signed [15:0] tm1070;
   reg signed [15:0] tm1082;
   reg signed [15:0] tm1086;
   reg signed [15:0] tm1098;
   reg signed [15:0] tm1105;
   reg signed [15:0] tm1112;
   reg signed [15:0] tm1119;
   reg signed [15:0] tm1126;
   reg signed [15:0] tm1133;
   reg signed [15:0] tm1140;
   reg signed [15:0] tm1147;
   reg signed [15:0] tm1035;
   reg signed [15:0] tm1039;
   reg signed [15:0] tm1051;
   reg signed [15:0] tm1055;
   reg signed [15:0] tm1067;
   reg signed [15:0] tm1071;
   reg signed [15:0] tm1083;
   reg signed [15:0] tm1087;
   reg signed [15:0] tm1099;
   reg signed [15:0] tm1106;
   reg signed [15:0] tm1113;
   reg signed [15:0] tm1120;
   reg signed [15:0] tm1127;
   reg signed [15:0] tm1134;
   reg signed [15:0] tm1141;
   reg signed [15:0] tm1148;
   wire signed [15:0] tm42;
   wire signed [15:0] a1128;
   wire signed [15:0] tm43;
   wire signed [15:0] a1130;
   wire signed [15:0] tm46;
   wire signed [15:0] a1140;
   wire signed [15:0] tm47;
   wire signed [15:0] a1142;
   wire signed [15:0] tm50;
   wire signed [15:0] a1152;
   wire signed [15:0] tm51;
   wire signed [15:0] a1154;
   wire signed [15:0] tm54;
   wire signed [15:0] a1164;
   wire signed [15:0] tm55;
   wire signed [15:0] a1166;
   reg signed [15:0] tm1036;
   reg signed [15:0] tm1040;
   reg signed [15:0] tm1052;
   reg signed [15:0] tm1056;
   reg signed [15:0] tm1068;
   reg signed [15:0] tm1072;
   reg signed [15:0] tm1084;
   reg signed [15:0] tm1088;
   reg signed [15:0] tm1100;
   reg signed [15:0] tm1107;
   reg signed [15:0] tm1114;
   reg signed [15:0] tm1121;
   reg signed [15:0] tm1128;
   reg signed [15:0] tm1135;
   reg signed [15:0] tm1142;
   reg signed [15:0] tm1149;
   reg signed [15:0] tm193;
   reg signed [15:0] tm194;
   reg signed [15:0] tm201;
   reg signed [15:0] tm202;
   reg signed [15:0] tm209;
   reg signed [15:0] tm210;
   reg signed [15:0] tm217;
   reg signed [15:0] tm218;
   reg signed [15:0] tm1037;
   reg signed [15:0] tm1041;
   reg signed [15:0] tm1053;
   reg signed [15:0] tm1057;
   reg signed [15:0] tm1069;
   reg signed [15:0] tm1073;
   reg signed [15:0] tm1085;
   reg signed [15:0] tm1089;
   reg signed [15:0] tm1101;
   reg signed [15:0] tm1108;
   reg signed [15:0] tm1115;
   reg signed [15:0] tm1122;
   reg signed [15:0] tm1129;
   reg signed [15:0] tm1136;
   reg signed [15:0] tm1143;
   reg signed [15:0] tm1150;
   reg signed [15:0] tm1102;
   reg signed [15:0] tm1109;
   reg signed [15:0] tm1116;
   reg signed [15:0] tm1123;
   reg signed [15:0] tm1130;
   reg signed [15:0] tm1137;
   reg signed [15:0] tm1144;
   reg signed [15:0] tm1151;
   wire signed [15:0] a1129;
   wire signed [15:0] a1131;
   wire signed [15:0] a1132;
   wire signed [15:0] a1133;
   wire signed [15:0] a1141;
   wire signed [15:0] a1143;
   wire signed [15:0] a1144;
   wire signed [15:0] a1145;
   wire signed [15:0] a1153;
   wire signed [15:0] a1155;
   wire signed [15:0] a1156;
   wire signed [15:0] a1157;
   wire signed [15:0] a1165;
   wire signed [15:0] a1167;
   wire signed [15:0] a1168;
   wire signed [15:0] a1169;
   reg signed [15:0] tm1103;
   reg signed [15:0] tm1110;
   reg signed [15:0] tm1117;
   reg signed [15:0] tm1124;
   reg signed [15:0] tm1131;
   reg signed [15:0] tm1138;
   reg signed [15:0] tm1145;
   reg signed [15:0] tm1152;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1104;
   reg signed [15:0] tm1111;
   reg signed [15:0] tm1118;
   reg signed [15:0] tm1125;
   reg signed [15:0] tm1132;
   reg signed [15:0] tm1139;
   reg signed [15:0] tm1146;
   reg signed [15:0] tm1153;


   assign a1170 = X0;
   assign a1123 = a1170;
   assign a1173 = X1;
   assign a1127 = a1173;
   assign a1174 = X2;
   assign a1175 = X3;
   assign a1178 = X4;
   assign a1135 = a1178;
   assign a1181 = X5;
   assign a1139 = a1181;
   assign a1182 = X6;
   assign a1183 = X7;
   assign a1186 = X8;
   assign a1147 = a1186;
   assign a1189 = X9;
   assign a1151 = a1189;
   assign a1190 = X10;
   assign a1191 = X11;
   assign a1194 = X12;
   assign a1159 = a1194;
   assign a1197 = X13;
   assign a1163 = a1197;
   assign a1198 = X14;
   assign a1199 = X15;
   assign a1128 = tm42;
   assign a1130 = tm43;
   assign a1140 = tm46;
   assign a1142 = tm47;
   assign a1152 = tm50;
   assign a1154 = tm51;
   assign a1164 = tm54;
   assign a1166 = tm55;
   assign Y0 = tm1104;
   assign Y1 = tm1111;
   assign Y4 = tm1118;
   assign Y5 = tm1125;
   assign Y8 = tm1132;
   assign Y9 = tm1139;
   assign Y12 = tm1146;
   assign Y13 = tm1153;

   D80_63263 instD80inst0_63263(.addr(i5[2:0]), .out(tm55), .clk(clk));

   D78_63283 instD78inst0_63283(.addr(i5[2:0]), .out(tm51), .clk(clk));

   D76_63303 instD76inst0_63303(.addr(i5[2:0]), .out(tm47), .clk(clk));

   D74_63323 instD74inst0_63323(.addr(i5[2:0]), .out(tm43), .clk(clk));

   D72_63343 instD72inst0_63343(.addr(i5[2:0]), .out(tm54), .clk(clk));

   D70_63363 instD70inst0_63363(.addr(i5[2:0]), .out(tm50), .clk(clk));

   D68_63383 instD68inst0_63383(.addr(i5[2:0]), .out(tm46), .clk(clk));

   D66_63403 instD66inst0_63403(.addr(i5[2:0]), .out(tm42), .clk(clk));

    multfix #(16, 2) m62712(.a(tm193), .b(tm1037), .clk(clk), .q_sc(a1129), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62734(.a(tm194), .b(tm1041), .clk(clk), .q_sc(a1131), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62752(.a(tm194), .b(tm1037), .clk(clk), .q_sc(a1132), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62763(.a(tm193), .b(tm1041), .clk(clk), .q_sc(a1133), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62872(.a(tm201), .b(tm1053), .clk(clk), .q_sc(a1141), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62894(.a(tm202), .b(tm1057), .clk(clk), .q_sc(a1143), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62912(.a(tm202), .b(tm1053), .clk(clk), .q_sc(a1144), .q_unsc(), .rst(reset));
    multfix #(16, 2) m62923(.a(tm201), .b(tm1057), .clk(clk), .q_sc(a1145), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63032(.a(tm209), .b(tm1069), .clk(clk), .q_sc(a1153), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63054(.a(tm210), .b(tm1073), .clk(clk), .q_sc(a1155), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63072(.a(tm210), .b(tm1069), .clk(clk), .q_sc(a1156), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63083(.a(tm209), .b(tm1073), .clk(clk), .q_sc(a1157), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63192(.a(tm217), .b(tm1085), .clk(clk), .q_sc(a1165), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63214(.a(tm218), .b(tm1089), .clk(clk), .q_sc(a1167), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63232(.a(tm218), .b(tm1085), .clk(clk), .q_sc(a1168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63243(.a(tm217), .b(tm1089), .clk(clk), .q_sc(a1169), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub62741(.a(a1129), .b(a1131), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add62770(.a(a1132), .b(a1133), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub62901(.a(a1141), .b(a1143), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add62930(.a(a1144), .b(a1145), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub63061(.a(a1153), .b(a1155), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add63090(.a(a1156), .b(a1157), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub63221(.a(a1165), .b(a1167), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add63250(.a(a1168), .b(a1169), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm193 <= 0;
         tm1037 <= 0;
         tm194 <= 0;
         tm1041 <= 0;
         tm194 <= 0;
         tm1037 <= 0;
         tm193 <= 0;
         tm1041 <= 0;
         tm201 <= 0;
         tm1053 <= 0;
         tm202 <= 0;
         tm1057 <= 0;
         tm202 <= 0;
         tm1053 <= 0;
         tm201 <= 0;
         tm1057 <= 0;
         tm209 <= 0;
         tm1069 <= 0;
         tm210 <= 0;
         tm1073 <= 0;
         tm210 <= 0;
         tm1069 <= 0;
         tm209 <= 0;
         tm1073 <= 0;
         tm217 <= 0;
         tm1085 <= 0;
         tm218 <= 0;
         tm1089 <= 0;
         tm218 <= 0;
         tm1085 <= 0;
         tm217 <= 0;
         tm1089 <= 0;
      end
      else begin
         i5 <= i5_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1034 <= a1174;
         tm1038 <= a1175;
         tm1050 <= a1182;
         tm1054 <= a1183;
         tm1066 <= a1190;
         tm1070 <= a1191;
         tm1082 <= a1198;
         tm1086 <= a1199;
         tm1098 <= a1123;
         tm1105 <= a1127;
         tm1112 <= a1135;
         tm1119 <= a1139;
         tm1126 <= a1147;
         tm1133 <= a1151;
         tm1140 <= a1159;
         tm1147 <= a1163;
         tm1035 <= tm1034;
         tm1039 <= tm1038;
         tm1051 <= tm1050;
         tm1055 <= tm1054;
         tm1067 <= tm1066;
         tm1071 <= tm1070;
         tm1083 <= tm1082;
         tm1087 <= tm1086;
         tm1099 <= tm1098;
         tm1106 <= tm1105;
         tm1113 <= tm1112;
         tm1120 <= tm1119;
         tm1127 <= tm1126;
         tm1134 <= tm1133;
         tm1141 <= tm1140;
         tm1148 <= tm1147;
         tm1036 <= tm1035;
         tm1040 <= tm1039;
         tm1052 <= tm1051;
         tm1056 <= tm1055;
         tm1068 <= tm1067;
         tm1072 <= tm1071;
         tm1084 <= tm1083;
         tm1088 <= tm1087;
         tm1100 <= tm1099;
         tm1107 <= tm1106;
         tm1114 <= tm1113;
         tm1121 <= tm1120;
         tm1128 <= tm1127;
         tm1135 <= tm1134;
         tm1142 <= tm1141;
         tm1149 <= tm1148;
         tm193 <= a1128;
         tm194 <= a1130;
         tm201 <= a1140;
         tm202 <= a1142;
         tm209 <= a1152;
         tm210 <= a1154;
         tm217 <= a1164;
         tm218 <= a1166;
         tm1037 <= tm1036;
         tm1041 <= tm1040;
         tm1053 <= tm1052;
         tm1057 <= tm1056;
         tm1069 <= tm1068;
         tm1073 <= tm1072;
         tm1085 <= tm1084;
         tm1089 <= tm1088;
         tm1101 <= tm1100;
         tm1108 <= tm1107;
         tm1115 <= tm1114;
         tm1122 <= tm1121;
         tm1129 <= tm1128;
         tm1136 <= tm1135;
         tm1143 <= tm1142;
         tm1150 <= tm1149;
         tm1102 <= tm1101;
         tm1109 <= tm1108;
         tm1116 <= tm1115;
         tm1123 <= tm1122;
         tm1130 <= tm1129;
         tm1137 <= tm1136;
         tm1144 <= tm1143;
         tm1151 <= tm1150;
         tm1103 <= tm1102;
         tm1110 <= tm1109;
         tm1117 <= tm1116;
         tm1124 <= tm1123;
         tm1131 <= tm1130;
         tm1138 <= tm1137;
         tm1145 <= tm1144;
         tm1152 <= tm1151;
         tm1104 <= tm1103;
         tm1111 <= tm1110;
         tm1118 <= tm1117;
         tm1125 <= tm1124;
         tm1132 <= tm1131;
         tm1139 <= tm1138;
         tm1146 <= tm1145;
         tm1153 <= tm1152;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock63418(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76676(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a994;
   wire signed [15:0] a995;
   wire signed [15:0] a996;
   wire signed [15:0] a997;
   wire signed [15:0] a1002;
   wire signed [15:0] a1003;
   wire signed [15:0] a1004;
   wire signed [15:0] a1005;
   wire signed [15:0] a1010;
   wire signed [15:0] a1011;
   wire signed [15:0] a1012;
   wire signed [15:0] a1013;
   wire signed [15:0] a1018;
   wire signed [15:0] a1019;
   wire signed [15:0] a1020;
   wire signed [15:0] a1021;
   wire signed [15:0] t506;
   wire signed [15:0] t507;
   wire signed [15:0] t508;
   wire signed [15:0] t509;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t510;
   wire signed [15:0] t511;
   wire signed [15:0] t512;
   wire signed [15:0] t513;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t514;
   wire signed [15:0] t515;
   wire signed [15:0] t516;
   wire signed [15:0] t517;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t518;
   wire signed [15:0] t519;
   wire signed [15:0] t520;
   wire signed [15:0] t521;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a994 = X0;
   assign a995 = X2;
   assign a996 = X1;
   assign a997 = X3;
   assign a1002 = X4;
   assign a1003 = X6;
   assign a1004 = X5;
   assign a1005 = X7;
   assign a1010 = X8;
   assign a1011 = X10;
   assign a1012 = X9;
   assign a1013 = X11;
   assign a1018 = X12;
   assign a1019 = X14;
   assign a1020 = X13;
   assign a1021 = X15;
   assign Y0 = t506;
   assign Y1 = t507;
   assign Y2 = t508;
   assign Y3 = t509;
   assign Y4 = t510;
   assign Y5 = t511;
   assign Y6 = t512;
   assign Y7 = t513;
   assign Y8 = t514;
   assign Y9 = t515;
   assign Y10 = t516;
   assign Y11 = t517;
   assign Y12 = t518;
   assign Y13 = t519;
   assign Y14 = t520;
   assign Y15 = t521;

    addfxp #(16, 1) add63430(.a(a994), .b(a995), .clk(clk), .q(t506));    // 0
    addfxp #(16, 1) add63445(.a(a996), .b(a997), .clk(clk), .q(t507));    // 0
    subfxp #(16, 1) sub63460(.a(a994), .b(a995), .clk(clk), .q(t508));    // 0
    subfxp #(16, 1) sub63475(.a(a996), .b(a997), .clk(clk), .q(t509));    // 0
    addfxp #(16, 1) add63506(.a(a1002), .b(a1003), .clk(clk), .q(t510));    // 0
    addfxp #(16, 1) add63521(.a(a1004), .b(a1005), .clk(clk), .q(t511));    // 0
    subfxp #(16, 1) sub63536(.a(a1002), .b(a1003), .clk(clk), .q(t512));    // 0
    subfxp #(16, 1) sub63551(.a(a1004), .b(a1005), .clk(clk), .q(t513));    // 0
    addfxp #(16, 1) add63582(.a(a1010), .b(a1011), .clk(clk), .q(t514));    // 0
    addfxp #(16, 1) add63597(.a(a1012), .b(a1013), .clk(clk), .q(t515));    // 0
    subfxp #(16, 1) sub63612(.a(a1010), .b(a1011), .clk(clk), .q(t516));    // 0
    subfxp #(16, 1) sub63627(.a(a1012), .b(a1013), .clk(clk), .q(t517));    // 0
    addfxp #(16, 1) add63658(.a(a1018), .b(a1019), .clk(clk), .q(t518));    // 0
    addfxp #(16, 1) add63673(.a(a1020), .b(a1021), .clk(clk), .q(t519));    // 0
    subfxp #(16, 1) sub63688(.a(a1018), .b(a1019), .clk(clk), .q(t520));    // 0
    subfxp #(16, 1) sub63703(.a(a1020), .b(a1021), .clk(clk), .q(t521));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 38
// Gap: 16
module rc63728(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm63726 instPerm76677(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet63726(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [3:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        4'd0: control <= 4'b1111;
        4'd1: control <= 4'b1111;
        4'd2: control <= 4'b1111;
        4'd3: control <= 4'b1111;
        4'd4: control <= 4'b1111;
        4'd5: control <= 4'b1111;
        4'd6: control <= 4'b1111;
        4'd7: control <= 4'b1111;
        4'd8: control <= 4'b0000;
        4'd9: control <= 4'b0000;
        4'd10: control <= 4'b0000;
        4'd11: control <= 4'b0000;
        4'd12: control <= 4'b0000;
        4'd13: control <= 4'b0000;
        4'd14: control <= 4'b0000;
        4'd15: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 38
// Gap: 16
module perm63726(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 16;

   parameter addrbits = 4;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm56;
   assign tm56 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76682(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76683(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(15, 4) nextReg_76694(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76695(.X(next2), .Y(next3), .clk(clk));
nextReg #(16, 4) nextReg_76698(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76699(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(15, 1) shiftFIFO_76702(.X(tm56), .Y(tm56_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76705(.X(tm56_d), .Y(tm56_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 4) shiftFIFO_76710(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd0 <= 8;
	     {1'd0,  4'd1}: s1rd0 <= 9;
	     {1'd0,  4'd2}: s1rd0 <= 10;
	     {1'd0,  4'd3}: s1rd0 <= 11;
	     {1'd0,  4'd4}: s1rd0 <= 12;
	     {1'd0,  4'd5}: s1rd0 <= 13;
	     {1'd0,  4'd6}: s1rd0 <= 14;
	     {1'd0,  4'd7}: s1rd0 <= 15;
	     {1'd0,  4'd8}: s1rd0 <= 0;
	     {1'd0,  4'd9}: s1rd0 <= 1;
	     {1'd0,  4'd10}: s1rd0 <= 2;
	     {1'd0,  4'd11}: s1rd0 <= 3;
	     {1'd0,  4'd12}: s1rd0 <= 4;
	     {1'd0,  4'd13}: s1rd0 <= 5;
	     {1'd0,  4'd14}: s1rd0 <= 6;
	     {1'd0,  4'd15}: s1rd0 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd1 <= 0;
	     {1'd0,  4'd1}: s1rd1 <= 1;
	     {1'd0,  4'd2}: s1rd1 <= 2;
	     {1'd0,  4'd3}: s1rd1 <= 3;
	     {1'd0,  4'd4}: s1rd1 <= 4;
	     {1'd0,  4'd5}: s1rd1 <= 5;
	     {1'd0,  4'd6}: s1rd1 <= 6;
	     {1'd0,  4'd7}: s1rd1 <= 7;
	     {1'd0,  4'd8}: s1rd1 <= 8;
	     {1'd0,  4'd9}: s1rd1 <= 9;
	     {1'd0,  4'd10}: s1rd1 <= 10;
	     {1'd0,  4'd11}: s1rd1 <= 11;
	     {1'd0,  4'd12}: s1rd1 <= 12;
	     {1'd0,  4'd13}: s1rd1 <= 13;
	     {1'd0,  4'd14}: s1rd1 <= 14;
	     {1'd0,  4'd15}: s1rd1 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd2 <= 8;
	     {1'd0,  4'd1}: s1rd2 <= 9;
	     {1'd0,  4'd2}: s1rd2 <= 10;
	     {1'd0,  4'd3}: s1rd2 <= 11;
	     {1'd0,  4'd4}: s1rd2 <= 12;
	     {1'd0,  4'd5}: s1rd2 <= 13;
	     {1'd0,  4'd6}: s1rd2 <= 14;
	     {1'd0,  4'd7}: s1rd2 <= 15;
	     {1'd0,  4'd8}: s1rd2 <= 0;
	     {1'd0,  4'd9}: s1rd2 <= 1;
	     {1'd0,  4'd10}: s1rd2 <= 2;
	     {1'd0,  4'd11}: s1rd2 <= 3;
	     {1'd0,  4'd12}: s1rd2 <= 4;
	     {1'd0,  4'd13}: s1rd2 <= 5;
	     {1'd0,  4'd14}: s1rd2 <= 6;
	     {1'd0,  4'd15}: s1rd2 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd3 <= 0;
	     {1'd0,  4'd1}: s1rd3 <= 1;
	     {1'd0,  4'd2}: s1rd3 <= 2;
	     {1'd0,  4'd3}: s1rd3 <= 3;
	     {1'd0,  4'd4}: s1rd3 <= 4;
	     {1'd0,  4'd5}: s1rd3 <= 5;
	     {1'd0,  4'd6}: s1rd3 <= 6;
	     {1'd0,  4'd7}: s1rd3 <= 7;
	     {1'd0,  4'd8}: s1rd3 <= 8;
	     {1'd0,  4'd9}: s1rd3 <= 9;
	     {1'd0,  4'd10}: s1rd3 <= 10;
	     {1'd0,  4'd11}: s1rd3 <= 11;
	     {1'd0,  4'd12}: s1rd3 <= 12;
	     {1'd0,  4'd13}: s1rd3 <= 13;
	     {1'd0,  4'd14}: s1rd3 <= 14;
	     {1'd0,  4'd15}: s1rd3 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd4 <= 8;
	     {1'd0,  4'd1}: s1rd4 <= 9;
	     {1'd0,  4'd2}: s1rd4 <= 10;
	     {1'd0,  4'd3}: s1rd4 <= 11;
	     {1'd0,  4'd4}: s1rd4 <= 12;
	     {1'd0,  4'd5}: s1rd4 <= 13;
	     {1'd0,  4'd6}: s1rd4 <= 14;
	     {1'd0,  4'd7}: s1rd4 <= 15;
	     {1'd0,  4'd8}: s1rd4 <= 0;
	     {1'd0,  4'd9}: s1rd4 <= 1;
	     {1'd0,  4'd10}: s1rd4 <= 2;
	     {1'd0,  4'd11}: s1rd4 <= 3;
	     {1'd0,  4'd12}: s1rd4 <= 4;
	     {1'd0,  4'd13}: s1rd4 <= 5;
	     {1'd0,  4'd14}: s1rd4 <= 6;
	     {1'd0,  4'd15}: s1rd4 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd5 <= 0;
	     {1'd0,  4'd1}: s1rd5 <= 1;
	     {1'd0,  4'd2}: s1rd5 <= 2;
	     {1'd0,  4'd3}: s1rd5 <= 3;
	     {1'd0,  4'd4}: s1rd5 <= 4;
	     {1'd0,  4'd5}: s1rd5 <= 5;
	     {1'd0,  4'd6}: s1rd5 <= 6;
	     {1'd0,  4'd7}: s1rd5 <= 7;
	     {1'd0,  4'd8}: s1rd5 <= 8;
	     {1'd0,  4'd9}: s1rd5 <= 9;
	     {1'd0,  4'd10}: s1rd5 <= 10;
	     {1'd0,  4'd11}: s1rd5 <= 11;
	     {1'd0,  4'd12}: s1rd5 <= 12;
	     {1'd0,  4'd13}: s1rd5 <= 13;
	     {1'd0,  4'd14}: s1rd5 <= 14;
	     {1'd0,  4'd15}: s1rd5 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd6 <= 8;
	     {1'd0,  4'd1}: s1rd6 <= 9;
	     {1'd0,  4'd2}: s1rd6 <= 10;
	     {1'd0,  4'd3}: s1rd6 <= 11;
	     {1'd0,  4'd4}: s1rd6 <= 12;
	     {1'd0,  4'd5}: s1rd6 <= 13;
	     {1'd0,  4'd6}: s1rd6 <= 14;
	     {1'd0,  4'd7}: s1rd6 <= 15;
	     {1'd0,  4'd8}: s1rd6 <= 0;
	     {1'd0,  4'd9}: s1rd6 <= 1;
	     {1'd0,  4'd10}: s1rd6 <= 2;
	     {1'd0,  4'd11}: s1rd6 <= 3;
	     {1'd0,  4'd12}: s1rd6 <= 4;
	     {1'd0,  4'd13}: s1rd6 <= 5;
	     {1'd0,  4'd14}: s1rd6 <= 6;
	     {1'd0,  4'd15}: s1rd6 <= 7;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm56_d, s1rdloc})
	     {1'd0,  4'd0}: s1rd7 <= 0;
	     {1'd0,  4'd1}: s1rd7 <= 1;
	     {1'd0,  4'd2}: s1rd7 <= 2;
	     {1'd0,  4'd3}: s1rd7 <= 3;
	     {1'd0,  4'd4}: s1rd7 <= 4;
	     {1'd0,  4'd5}: s1rd7 <= 5;
	     {1'd0,  4'd6}: s1rd7 <= 6;
	     {1'd0,  4'd7}: s1rd7 <= 7;
	     {1'd0,  4'd8}: s1rd7 <= 8;
	     {1'd0,  4'd9}: s1rd7 <= 9;
	     {1'd0,  4'd10}: s1rd7 <= 10;
	     {1'd0,  4'd11}: s1rd7 <= 11;
	     {1'd0,  4'd12}: s1rd7 <= 12;
	     {1'd0,  4'd13}: s1rd7 <= 13;
	     {1'd0,  4'd14}: s1rd7 <= 14;
	     {1'd0,  4'd15}: s1rd7 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet63726 sw(tm56_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr0 <= 8;
	      {1'd0, 4'd1}: s2wr0 <= 9;
	      {1'd0, 4'd2}: s2wr0 <= 10;
	      {1'd0, 4'd3}: s2wr0 <= 11;
	      {1'd0, 4'd4}: s2wr0 <= 12;
	      {1'd0, 4'd5}: s2wr0 <= 13;
	      {1'd0, 4'd6}: s2wr0 <= 14;
	      {1'd0, 4'd7}: s2wr0 <= 15;
	      {1'd0, 4'd8}: s2wr0 <= 0;
	      {1'd0, 4'd9}: s2wr0 <= 1;
	      {1'd0, 4'd10}: s2wr0 <= 2;
	      {1'd0, 4'd11}: s2wr0 <= 3;
	      {1'd0, 4'd12}: s2wr0 <= 4;
	      {1'd0, 4'd13}: s2wr0 <= 5;
	      {1'd0, 4'd14}: s2wr0 <= 6;
	      {1'd0, 4'd15}: s2wr0 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr1 <= 0;
	      {1'd0, 4'd1}: s2wr1 <= 1;
	      {1'd0, 4'd2}: s2wr1 <= 2;
	      {1'd0, 4'd3}: s2wr1 <= 3;
	      {1'd0, 4'd4}: s2wr1 <= 4;
	      {1'd0, 4'd5}: s2wr1 <= 5;
	      {1'd0, 4'd6}: s2wr1 <= 6;
	      {1'd0, 4'd7}: s2wr1 <= 7;
	      {1'd0, 4'd8}: s2wr1 <= 8;
	      {1'd0, 4'd9}: s2wr1 <= 9;
	      {1'd0, 4'd10}: s2wr1 <= 10;
	      {1'd0, 4'd11}: s2wr1 <= 11;
	      {1'd0, 4'd12}: s2wr1 <= 12;
	      {1'd0, 4'd13}: s2wr1 <= 13;
	      {1'd0, 4'd14}: s2wr1 <= 14;
	      {1'd0, 4'd15}: s2wr1 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr2 <= 8;
	      {1'd0, 4'd1}: s2wr2 <= 9;
	      {1'd0, 4'd2}: s2wr2 <= 10;
	      {1'd0, 4'd3}: s2wr2 <= 11;
	      {1'd0, 4'd4}: s2wr2 <= 12;
	      {1'd0, 4'd5}: s2wr2 <= 13;
	      {1'd0, 4'd6}: s2wr2 <= 14;
	      {1'd0, 4'd7}: s2wr2 <= 15;
	      {1'd0, 4'd8}: s2wr2 <= 0;
	      {1'd0, 4'd9}: s2wr2 <= 1;
	      {1'd0, 4'd10}: s2wr2 <= 2;
	      {1'd0, 4'd11}: s2wr2 <= 3;
	      {1'd0, 4'd12}: s2wr2 <= 4;
	      {1'd0, 4'd13}: s2wr2 <= 5;
	      {1'd0, 4'd14}: s2wr2 <= 6;
	      {1'd0, 4'd15}: s2wr2 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr3 <= 0;
	      {1'd0, 4'd1}: s2wr3 <= 1;
	      {1'd0, 4'd2}: s2wr3 <= 2;
	      {1'd0, 4'd3}: s2wr3 <= 3;
	      {1'd0, 4'd4}: s2wr3 <= 4;
	      {1'd0, 4'd5}: s2wr3 <= 5;
	      {1'd0, 4'd6}: s2wr3 <= 6;
	      {1'd0, 4'd7}: s2wr3 <= 7;
	      {1'd0, 4'd8}: s2wr3 <= 8;
	      {1'd0, 4'd9}: s2wr3 <= 9;
	      {1'd0, 4'd10}: s2wr3 <= 10;
	      {1'd0, 4'd11}: s2wr3 <= 11;
	      {1'd0, 4'd12}: s2wr3 <= 12;
	      {1'd0, 4'd13}: s2wr3 <= 13;
	      {1'd0, 4'd14}: s2wr3 <= 14;
	      {1'd0, 4'd15}: s2wr3 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr4 <= 8;
	      {1'd0, 4'd1}: s2wr4 <= 9;
	      {1'd0, 4'd2}: s2wr4 <= 10;
	      {1'd0, 4'd3}: s2wr4 <= 11;
	      {1'd0, 4'd4}: s2wr4 <= 12;
	      {1'd0, 4'd5}: s2wr4 <= 13;
	      {1'd0, 4'd6}: s2wr4 <= 14;
	      {1'd0, 4'd7}: s2wr4 <= 15;
	      {1'd0, 4'd8}: s2wr4 <= 0;
	      {1'd0, 4'd9}: s2wr4 <= 1;
	      {1'd0, 4'd10}: s2wr4 <= 2;
	      {1'd0, 4'd11}: s2wr4 <= 3;
	      {1'd0, 4'd12}: s2wr4 <= 4;
	      {1'd0, 4'd13}: s2wr4 <= 5;
	      {1'd0, 4'd14}: s2wr4 <= 6;
	      {1'd0, 4'd15}: s2wr4 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr5 <= 0;
	      {1'd0, 4'd1}: s2wr5 <= 1;
	      {1'd0, 4'd2}: s2wr5 <= 2;
	      {1'd0, 4'd3}: s2wr5 <= 3;
	      {1'd0, 4'd4}: s2wr5 <= 4;
	      {1'd0, 4'd5}: s2wr5 <= 5;
	      {1'd0, 4'd6}: s2wr5 <= 6;
	      {1'd0, 4'd7}: s2wr5 <= 7;
	      {1'd0, 4'd8}: s2wr5 <= 8;
	      {1'd0, 4'd9}: s2wr5 <= 9;
	      {1'd0, 4'd10}: s2wr5 <= 10;
	      {1'd0, 4'd11}: s2wr5 <= 11;
	      {1'd0, 4'd12}: s2wr5 <= 12;
	      {1'd0, 4'd13}: s2wr5 <= 13;
	      {1'd0, 4'd14}: s2wr5 <= 14;
	      {1'd0, 4'd15}: s2wr5 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr6 <= 8;
	      {1'd0, 4'd1}: s2wr6 <= 9;
	      {1'd0, 4'd2}: s2wr6 <= 10;
	      {1'd0, 4'd3}: s2wr6 <= 11;
	      {1'd0, 4'd4}: s2wr6 <= 12;
	      {1'd0, 4'd5}: s2wr6 <= 13;
	      {1'd0, 4'd6}: s2wr6 <= 14;
	      {1'd0, 4'd7}: s2wr6 <= 15;
	      {1'd0, 4'd8}: s2wr6 <= 0;
	      {1'd0, 4'd9}: s2wr6 <= 1;
	      {1'd0, 4'd10}: s2wr6 <= 2;
	      {1'd0, 4'd11}: s2wr6 <= 3;
	      {1'd0, 4'd12}: s2wr6 <= 4;
	      {1'd0, 4'd13}: s2wr6 <= 5;
	      {1'd0, 4'd14}: s2wr6 <= 6;
	      {1'd0, 4'd15}: s2wr6 <= 7;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm56_dd, writeCycle})
	      {1'd0, 4'd0}: s2wr7 <= 0;
	      {1'd0, 4'd1}: s2wr7 <= 1;
	      {1'd0, 4'd2}: s2wr7 <= 2;
	      {1'd0, 4'd3}: s2wr7 <= 3;
	      {1'd0, 4'd4}: s2wr7 <= 4;
	      {1'd0, 4'd5}: s2wr7 <= 5;
	      {1'd0, 4'd6}: s2wr7 <= 6;
	      {1'd0, 4'd7}: s2wr7 <= 7;
	      {1'd0, 4'd8}: s2wr7 <= 8;
	      {1'd0, 4'd9}: s2wr7 <= 9;
	      {1'd0, 4'd10}: s2wr7 <= 10;
	      {1'd0, 4'd11}: s2wr7 <= 11;
	      {1'd0, 4'd12}: s2wr7 <= 12;
	      {1'd0, 4'd13}: s2wr7 <= 13;
	      {1'd0, 4'd14}: s2wr7 <= 14;
	      {1'd0, 4'd15}: s2wr7 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 16
module DirSum_64661(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [3:0] i4;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i4 <= 0;
      end
      else begin
         if (next == 1)
            i4 <= 0;
         else if (i4 == 15)
            i4 <= 0;
         else
            i4 <= i4 + 1;
      end
   end

   codeBlock63731 codeBlockIsnt76715(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i4_in(i4),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D50_64407(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ec5;
      2: out3 <= 16'h3b21;
      3: out3 <= 16'h3537;
      4: out3 <= 16'h2d41;
      5: out3 <= 16'h238e;
      6: out3 <= 16'h187e;
      7: out3 <= 16'hc7c;
      8: out3 <= 16'h0;
      9: out3 <= 16'hf384;
      10: out3 <= 16'he782;
      11: out3 <= 16'hdc72;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hcac9;
      14: out3 <= 16'hc4df;
      15: out3 <= 16'hc13b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D52_64443(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3e15;
      2: out3 <= 16'h39db;
      3: out3 <= 16'h3368;
      4: out3 <= 16'h2afb;
      5: out3 <= 16'h20e7;
      6: out3 <= 16'h1590;
      7: out3 <= 16'h964;
      8: out3 <= 16'hfcdc;
      9: out3 <= 16'hf073;
      10: out3 <= 16'he4a3;
      11: out3 <= 16'hd9e0;
      12: out3 <= 16'hd094;
      13: out3 <= 16'hc91b;
      14: out3 <= 16'hc3be;
      15: out3 <= 16'hc0b1;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D64_64479(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf69c;
      1: out3 <= 16'hea70;
      2: out3 <= 16'hdf19;
      3: out3 <= 16'hd505;
      4: out3 <= 16'hcc98;
      5: out3 <= 16'hc625;
      6: out3 <= 16'hc1eb;
      7: out3 <= 16'hc014;
      8: out3 <= 16'hc0b1;
      9: out3 <= 16'hc3be;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hd094;
      12: out3 <= 16'hd9e0;
      13: out3 <= 16'he4a3;
      14: out3 <= 16'hf073;
      15: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D54_64497(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fb1;
      1: out3 <= 16'h3d3f;
      2: out3 <= 16'h3871;
      3: out3 <= 16'h3179;
      4: out3 <= 16'h289a;
      5: out3 <= 16'h1e2b;
      6: out3 <= 16'h1294;
      7: out3 <= 16'h646;
      8: out3 <= 16'hf9ba;
      9: out3 <= 16'hed6c;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hd766;
      12: out3 <= 16'hce87;
      13: out3 <= 16'hc78f;
      14: out3 <= 16'hc2c1;
      15: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D62_64551(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hf9ba;
      1: out3 <= 16'hed6c;
      2: out3 <= 16'he1d5;
      3: out3 <= 16'hd766;
      4: out3 <= 16'hce87;
      5: out3 <= 16'hc78f;
      6: out3 <= 16'hc2c1;
      7: out3 <= 16'hc04f;
      8: out3 <= 16'hc04f;
      9: out3 <= 16'hc2c1;
      10: out3 <= 16'hc78f;
      11: out3 <= 16'hce87;
      12: out3 <= 16'hd766;
      13: out3 <= 16'he1d5;
      14: out3 <= 16'hed6c;
      15: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D56_64569(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3f4f;
      1: out3 <= 16'h3c42;
      2: out3 <= 16'h36e5;
      3: out3 <= 16'h2f6c;
      4: out3 <= 16'h2620;
      5: out3 <= 16'h1b5d;
      6: out3 <= 16'hf8d;
      7: out3 <= 16'h324;
      8: out3 <= 16'hf69c;
      9: out3 <= 16'hea70;
      10: out3 <= 16'hdf19;
      11: out3 <= 16'hd505;
      12: out3 <= 16'hcc98;
      13: out3 <= 16'hc625;
      14: out3 <= 16'hc1eb;
      15: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D58_64623(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf384;
      2: out3 <= 16'he782;
      3: out3 <= 16'hdc72;
      4: out3 <= 16'hd2bf;
      5: out3 <= 16'hcac9;
      6: out3 <= 16'hc4df;
      7: out3 <= 16'hc13b;
      8: out3 <= 16'hc000;
      9: out3 <= 16'hc13b;
      10: out3 <= 16'hc4df;
      11: out3 <= 16'hcac9;
      12: out3 <= 16'hd2bf;
      13: out3 <= 16'hdc72;
      14: out3 <= 16'he782;
      15: out3 <= 16'hf384;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D60_64641(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [3:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf073;
      2: out3 <= 16'he4a3;
      3: out3 <= 16'hd9e0;
      4: out3 <= 16'hd094;
      5: out3 <= 16'hc91b;
      6: out3 <= 16'hc3be;
      7: out3 <= 16'hc0b1;
      8: out3 <= 16'hc014;
      9: out3 <= 16'hc1eb;
      10: out3 <= 16'hc625;
      11: out3 <= 16'hcc98;
      12: out3 <= 16'hd505;
      13: out3 <= 16'hdf19;
      14: out3 <= 16'hea70;
      15: out3 <= 16'hf69c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock63731(clk, reset, next_in, next_out,
   i4_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [3:0] i4_in;
   reg [3:0] i4;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76718(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a930;
   wire signed [15:0] a883;
   wire signed [15:0] a933;
   wire signed [15:0] a887;
   wire signed [15:0] a934;
   wire signed [15:0] a935;
   wire signed [15:0] a938;
   wire signed [15:0] a895;
   wire signed [15:0] a941;
   wire signed [15:0] a899;
   wire signed [15:0] a942;
   wire signed [15:0] a943;
   wire signed [15:0] a946;
   wire signed [15:0] a907;
   wire signed [15:0] a949;
   wire signed [15:0] a911;
   wire signed [15:0] a950;
   wire signed [15:0] a951;
   wire signed [15:0] a954;
   wire signed [15:0] a919;
   wire signed [15:0] a957;
   wire signed [15:0] a923;
   wire signed [15:0] a958;
   wire signed [15:0] a959;
   reg signed [15:0] tm1154;
   reg signed [15:0] tm1158;
   reg signed [15:0] tm1170;
   reg signed [15:0] tm1174;
   reg signed [15:0] tm1186;
   reg signed [15:0] tm1190;
   reg signed [15:0] tm1202;
   reg signed [15:0] tm1206;
   reg signed [15:0] tm1218;
   reg signed [15:0] tm1225;
   reg signed [15:0] tm1232;
   reg signed [15:0] tm1239;
   reg signed [15:0] tm1246;
   reg signed [15:0] tm1253;
   reg signed [15:0] tm1260;
   reg signed [15:0] tm1267;
   reg signed [15:0] tm1155;
   reg signed [15:0] tm1159;
   reg signed [15:0] tm1171;
   reg signed [15:0] tm1175;
   reg signed [15:0] tm1187;
   reg signed [15:0] tm1191;
   reg signed [15:0] tm1203;
   reg signed [15:0] tm1207;
   reg signed [15:0] tm1219;
   reg signed [15:0] tm1226;
   reg signed [15:0] tm1233;
   reg signed [15:0] tm1240;
   reg signed [15:0] tm1247;
   reg signed [15:0] tm1254;
   reg signed [15:0] tm1261;
   reg signed [15:0] tm1268;
   wire signed [15:0] tm59;
   wire signed [15:0] a888;
   wire signed [15:0] tm60;
   wire signed [15:0] a890;
   wire signed [15:0] tm63;
   wire signed [15:0] a900;
   wire signed [15:0] tm64;
   wire signed [15:0] a902;
   wire signed [15:0] tm67;
   wire signed [15:0] a912;
   wire signed [15:0] tm68;
   wire signed [15:0] a914;
   wire signed [15:0] tm71;
   wire signed [15:0] a924;
   wire signed [15:0] tm72;
   wire signed [15:0] a926;
   reg signed [15:0] tm1156;
   reg signed [15:0] tm1160;
   reg signed [15:0] tm1172;
   reg signed [15:0] tm1176;
   reg signed [15:0] tm1188;
   reg signed [15:0] tm1192;
   reg signed [15:0] tm1204;
   reg signed [15:0] tm1208;
   reg signed [15:0] tm1220;
   reg signed [15:0] tm1227;
   reg signed [15:0] tm1234;
   reg signed [15:0] tm1241;
   reg signed [15:0] tm1248;
   reg signed [15:0] tm1255;
   reg signed [15:0] tm1262;
   reg signed [15:0] tm1269;
   reg signed [15:0] tm225;
   reg signed [15:0] tm226;
   reg signed [15:0] tm233;
   reg signed [15:0] tm234;
   reg signed [15:0] tm241;
   reg signed [15:0] tm242;
   reg signed [15:0] tm249;
   reg signed [15:0] tm250;
   reg signed [15:0] tm1157;
   reg signed [15:0] tm1161;
   reg signed [15:0] tm1173;
   reg signed [15:0] tm1177;
   reg signed [15:0] tm1189;
   reg signed [15:0] tm1193;
   reg signed [15:0] tm1205;
   reg signed [15:0] tm1209;
   reg signed [15:0] tm1221;
   reg signed [15:0] tm1228;
   reg signed [15:0] tm1235;
   reg signed [15:0] tm1242;
   reg signed [15:0] tm1249;
   reg signed [15:0] tm1256;
   reg signed [15:0] tm1263;
   reg signed [15:0] tm1270;
   reg signed [15:0] tm1222;
   reg signed [15:0] tm1229;
   reg signed [15:0] tm1236;
   reg signed [15:0] tm1243;
   reg signed [15:0] tm1250;
   reg signed [15:0] tm1257;
   reg signed [15:0] tm1264;
   reg signed [15:0] tm1271;
   wire signed [15:0] a889;
   wire signed [15:0] a891;
   wire signed [15:0] a892;
   wire signed [15:0] a893;
   wire signed [15:0] a901;
   wire signed [15:0] a903;
   wire signed [15:0] a904;
   wire signed [15:0] a905;
   wire signed [15:0] a913;
   wire signed [15:0] a915;
   wire signed [15:0] a916;
   wire signed [15:0] a917;
   wire signed [15:0] a925;
   wire signed [15:0] a927;
   wire signed [15:0] a928;
   wire signed [15:0] a929;
   reg signed [15:0] tm1223;
   reg signed [15:0] tm1230;
   reg signed [15:0] tm1237;
   reg signed [15:0] tm1244;
   reg signed [15:0] tm1251;
   reg signed [15:0] tm1258;
   reg signed [15:0] tm1265;
   reg signed [15:0] tm1272;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1224;
   reg signed [15:0] tm1231;
   reg signed [15:0] tm1238;
   reg signed [15:0] tm1245;
   reg signed [15:0] tm1252;
   reg signed [15:0] tm1259;
   reg signed [15:0] tm1266;
   reg signed [15:0] tm1273;


   assign a930 = X0;
   assign a883 = a930;
   assign a933 = X1;
   assign a887 = a933;
   assign a934 = X2;
   assign a935 = X3;
   assign a938 = X4;
   assign a895 = a938;
   assign a941 = X5;
   assign a899 = a941;
   assign a942 = X6;
   assign a943 = X7;
   assign a946 = X8;
   assign a907 = a946;
   assign a949 = X9;
   assign a911 = a949;
   assign a950 = X10;
   assign a951 = X11;
   assign a954 = X12;
   assign a919 = a954;
   assign a957 = X13;
   assign a923 = a957;
   assign a958 = X14;
   assign a959 = X15;
   assign a888 = tm59;
   assign a890 = tm60;
   assign a900 = tm63;
   assign a902 = tm64;
   assign a912 = tm67;
   assign a914 = tm68;
   assign a924 = tm71;
   assign a926 = tm72;
   assign Y0 = tm1224;
   assign Y1 = tm1231;
   assign Y4 = tm1238;
   assign Y5 = tm1245;
   assign Y8 = tm1252;
   assign Y9 = tm1259;
   assign Y12 = tm1266;
   assign Y13 = tm1273;

   D50_64407 instD50inst0_64407(.addr(i4[3:0]), .out(tm59), .clk(clk));

   D52_64443 instD52inst0_64443(.addr(i4[3:0]), .out(tm63), .clk(clk));

   D64_64479 instD64inst0_64479(.addr(i4[3:0]), .out(tm72), .clk(clk));

   D54_64497 instD54inst0_64497(.addr(i4[3:0]), .out(tm67), .clk(clk));

   D62_64551 instD62inst0_64551(.addr(i4[3:0]), .out(tm68), .clk(clk));

   D56_64569 instD56inst0_64569(.addr(i4[3:0]), .out(tm71), .clk(clk));

   D58_64623 instD58inst0_64623(.addr(i4[3:0]), .out(tm60), .clk(clk));

   D60_64641 instD60inst0_64641(.addr(i4[3:0]), .out(tm64), .clk(clk));

    multfix #(16, 2) m63830(.a(tm225), .b(tm1157), .clk(clk), .q_sc(a889), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63852(.a(tm226), .b(tm1161), .clk(clk), .q_sc(a891), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63870(.a(tm226), .b(tm1157), .clk(clk), .q_sc(a892), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63881(.a(tm225), .b(tm1161), .clk(clk), .q_sc(a893), .q_unsc(), .rst(reset));
    multfix #(16, 2) m63990(.a(tm233), .b(tm1173), .clk(clk), .q_sc(a901), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64012(.a(tm234), .b(tm1177), .clk(clk), .q_sc(a903), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64030(.a(tm234), .b(tm1173), .clk(clk), .q_sc(a904), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64041(.a(tm233), .b(tm1177), .clk(clk), .q_sc(a905), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64150(.a(tm241), .b(tm1189), .clk(clk), .q_sc(a913), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64172(.a(tm242), .b(tm1193), .clk(clk), .q_sc(a915), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64190(.a(tm242), .b(tm1189), .clk(clk), .q_sc(a916), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64201(.a(tm241), .b(tm1193), .clk(clk), .q_sc(a917), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64310(.a(tm249), .b(tm1205), .clk(clk), .q_sc(a925), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64332(.a(tm250), .b(tm1209), .clk(clk), .q_sc(a927), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64350(.a(tm250), .b(tm1205), .clk(clk), .q_sc(a928), .q_unsc(), .rst(reset));
    multfix #(16, 2) m64361(.a(tm249), .b(tm1209), .clk(clk), .q_sc(a929), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub63859(.a(a889), .b(a891), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add63888(.a(a892), .b(a893), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub64019(.a(a901), .b(a903), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add64048(.a(a904), .b(a905), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub64179(.a(a913), .b(a915), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add64208(.a(a916), .b(a917), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub64339(.a(a925), .b(a927), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add64368(.a(a928), .b(a929), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm225 <= 0;
         tm1157 <= 0;
         tm226 <= 0;
         tm1161 <= 0;
         tm226 <= 0;
         tm1157 <= 0;
         tm225 <= 0;
         tm1161 <= 0;
         tm233 <= 0;
         tm1173 <= 0;
         tm234 <= 0;
         tm1177 <= 0;
         tm234 <= 0;
         tm1173 <= 0;
         tm233 <= 0;
         tm1177 <= 0;
         tm241 <= 0;
         tm1189 <= 0;
         tm242 <= 0;
         tm1193 <= 0;
         tm242 <= 0;
         tm1189 <= 0;
         tm241 <= 0;
         tm1193 <= 0;
         tm249 <= 0;
         tm1205 <= 0;
         tm250 <= 0;
         tm1209 <= 0;
         tm250 <= 0;
         tm1205 <= 0;
         tm249 <= 0;
         tm1209 <= 0;
      end
      else begin
         i4 <= i4_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1154 <= a934;
         tm1158 <= a935;
         tm1170 <= a942;
         tm1174 <= a943;
         tm1186 <= a950;
         tm1190 <= a951;
         tm1202 <= a958;
         tm1206 <= a959;
         tm1218 <= a883;
         tm1225 <= a887;
         tm1232 <= a895;
         tm1239 <= a899;
         tm1246 <= a907;
         tm1253 <= a911;
         tm1260 <= a919;
         tm1267 <= a923;
         tm1155 <= tm1154;
         tm1159 <= tm1158;
         tm1171 <= tm1170;
         tm1175 <= tm1174;
         tm1187 <= tm1186;
         tm1191 <= tm1190;
         tm1203 <= tm1202;
         tm1207 <= tm1206;
         tm1219 <= tm1218;
         tm1226 <= tm1225;
         tm1233 <= tm1232;
         tm1240 <= tm1239;
         tm1247 <= tm1246;
         tm1254 <= tm1253;
         tm1261 <= tm1260;
         tm1268 <= tm1267;
         tm1156 <= tm1155;
         tm1160 <= tm1159;
         tm1172 <= tm1171;
         tm1176 <= tm1175;
         tm1188 <= tm1187;
         tm1192 <= tm1191;
         tm1204 <= tm1203;
         tm1208 <= tm1207;
         tm1220 <= tm1219;
         tm1227 <= tm1226;
         tm1234 <= tm1233;
         tm1241 <= tm1240;
         tm1248 <= tm1247;
         tm1255 <= tm1254;
         tm1262 <= tm1261;
         tm1269 <= tm1268;
         tm225 <= a888;
         tm226 <= a890;
         tm233 <= a900;
         tm234 <= a902;
         tm241 <= a912;
         tm242 <= a914;
         tm249 <= a924;
         tm250 <= a926;
         tm1157 <= tm1156;
         tm1161 <= tm1160;
         tm1173 <= tm1172;
         tm1177 <= tm1176;
         tm1189 <= tm1188;
         tm1193 <= tm1192;
         tm1205 <= tm1204;
         tm1209 <= tm1208;
         tm1221 <= tm1220;
         tm1228 <= tm1227;
         tm1235 <= tm1234;
         tm1242 <= tm1241;
         tm1249 <= tm1248;
         tm1256 <= tm1255;
         tm1263 <= tm1262;
         tm1270 <= tm1269;
         tm1222 <= tm1221;
         tm1229 <= tm1228;
         tm1236 <= tm1235;
         tm1243 <= tm1242;
         tm1250 <= tm1249;
         tm1257 <= tm1256;
         tm1264 <= tm1263;
         tm1271 <= tm1270;
         tm1223 <= tm1222;
         tm1230 <= tm1229;
         tm1237 <= tm1236;
         tm1244 <= tm1243;
         tm1251 <= tm1250;
         tm1258 <= tm1257;
         tm1265 <= tm1264;
         tm1272 <= tm1271;
         tm1224 <= tm1223;
         tm1231 <= tm1230;
         tm1238 <= tm1237;
         tm1245 <= tm1244;
         tm1252 <= tm1251;
         tm1259 <= tm1258;
         tm1266 <= tm1265;
         tm1273 <= tm1272;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock64664(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76721(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a754;
   wire signed [15:0] a755;
   wire signed [15:0] a756;
   wire signed [15:0] a757;
   wire signed [15:0] a762;
   wire signed [15:0] a763;
   wire signed [15:0] a764;
   wire signed [15:0] a765;
   wire signed [15:0] a770;
   wire signed [15:0] a771;
   wire signed [15:0] a772;
   wire signed [15:0] a773;
   wire signed [15:0] a778;
   wire signed [15:0] a779;
   wire signed [15:0] a780;
   wire signed [15:0] a781;
   wire signed [15:0] t402;
   wire signed [15:0] t403;
   wire signed [15:0] t404;
   wire signed [15:0] t405;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t406;
   wire signed [15:0] t407;
   wire signed [15:0] t408;
   wire signed [15:0] t409;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t410;
   wire signed [15:0] t411;
   wire signed [15:0] t412;
   wire signed [15:0] t413;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t414;
   wire signed [15:0] t415;
   wire signed [15:0] t416;
   wire signed [15:0] t417;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a754 = X0;
   assign a755 = X2;
   assign a756 = X1;
   assign a757 = X3;
   assign a762 = X4;
   assign a763 = X6;
   assign a764 = X5;
   assign a765 = X7;
   assign a770 = X8;
   assign a771 = X10;
   assign a772 = X9;
   assign a773 = X11;
   assign a778 = X12;
   assign a779 = X14;
   assign a780 = X13;
   assign a781 = X15;
   assign Y0 = t402;
   assign Y1 = t403;
   assign Y2 = t404;
   assign Y3 = t405;
   assign Y4 = t406;
   assign Y5 = t407;
   assign Y6 = t408;
   assign Y7 = t409;
   assign Y8 = t410;
   assign Y9 = t411;
   assign Y10 = t412;
   assign Y11 = t413;
   assign Y12 = t414;
   assign Y13 = t415;
   assign Y14 = t416;
   assign Y15 = t417;

    addfxp #(16, 1) add64676(.a(a754), .b(a755), .clk(clk), .q(t402));    // 0
    addfxp #(16, 1) add64691(.a(a756), .b(a757), .clk(clk), .q(t403));    // 0
    subfxp #(16, 1) sub64706(.a(a754), .b(a755), .clk(clk), .q(t404));    // 0
    subfxp #(16, 1) sub64721(.a(a756), .b(a757), .clk(clk), .q(t405));    // 0
    addfxp #(16, 1) add64752(.a(a762), .b(a763), .clk(clk), .q(t406));    // 0
    addfxp #(16, 1) add64767(.a(a764), .b(a765), .clk(clk), .q(t407));    // 0
    subfxp #(16, 1) sub64782(.a(a762), .b(a763), .clk(clk), .q(t408));    // 0
    subfxp #(16, 1) sub64797(.a(a764), .b(a765), .clk(clk), .q(t409));    // 0
    addfxp #(16, 1) add64828(.a(a770), .b(a771), .clk(clk), .q(t410));    // 0
    addfxp #(16, 1) add64843(.a(a772), .b(a773), .clk(clk), .q(t411));    // 0
    subfxp #(16, 1) sub64858(.a(a770), .b(a771), .clk(clk), .q(t412));    // 0
    subfxp #(16, 1) sub64873(.a(a772), .b(a773), .clk(clk), .q(t413));    // 0
    addfxp #(16, 1) add64904(.a(a778), .b(a779), .clk(clk), .q(t414));    // 0
    addfxp #(16, 1) add64919(.a(a780), .b(a781), .clk(clk), .q(t415));    // 0
    subfxp #(16, 1) sub64934(.a(a778), .b(a779), .clk(clk), .q(t416));    // 0
    subfxp #(16, 1) sub64949(.a(a780), .b(a781), .clk(clk), .q(t417));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 70
// Gap: 32
module rc64974(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm64972 instPerm76722(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet64972(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [4:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        5'd0: control <= 4'b1111;
        5'd1: control <= 4'b1111;
        5'd2: control <= 4'b1111;
        5'd3: control <= 4'b1111;
        5'd4: control <= 4'b1111;
        5'd5: control <= 4'b1111;
        5'd6: control <= 4'b1111;
        5'd7: control <= 4'b1111;
        5'd8: control <= 4'b1111;
        5'd9: control <= 4'b1111;
        5'd10: control <= 4'b1111;
        5'd11: control <= 4'b1111;
        5'd12: control <= 4'b1111;
        5'd13: control <= 4'b1111;
        5'd14: control <= 4'b1111;
        5'd15: control <= 4'b1111;
        5'd16: control <= 4'b0000;
        5'd17: control <= 4'b0000;
        5'd18: control <= 4'b0000;
        5'd19: control <= 4'b0000;
        5'd20: control <= 4'b0000;
        5'd21: control <= 4'b0000;
        5'd22: control <= 4'b0000;
        5'd23: control <= 4'b0000;
        5'd24: control <= 4'b0000;
        5'd25: control <= 4'b0000;
        5'd26: control <= 4'b0000;
        5'd27: control <= 4'b0000;
        5'd28: control <= 4'b0000;
        5'd29: control <= 4'b0000;
        5'd30: control <= 4'b0000;
        5'd31: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 70
// Gap: 32
module perm64972(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 32;

   parameter addrbits = 5;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm73;
   assign tm73 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76727(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76728(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(31, 5) nextReg_76739(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76740(.X(next2), .Y(next3), .clk(clk));
nextReg #(32, 5) nextReg_76743(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76744(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(31, 1) shiftFIFO_76747(.X(tm73), .Y(tm73_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76750(.X(tm73_d), .Y(tm73_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 5) shiftFIFO_76755(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd0 <= 16;
	     {1'd0,  5'd1}: s1rd0 <= 17;
	     {1'd0,  5'd2}: s1rd0 <= 18;
	     {1'd0,  5'd3}: s1rd0 <= 19;
	     {1'd0,  5'd4}: s1rd0 <= 20;
	     {1'd0,  5'd5}: s1rd0 <= 21;
	     {1'd0,  5'd6}: s1rd0 <= 22;
	     {1'd0,  5'd7}: s1rd0 <= 23;
	     {1'd0,  5'd8}: s1rd0 <= 24;
	     {1'd0,  5'd9}: s1rd0 <= 25;
	     {1'd0,  5'd10}: s1rd0 <= 26;
	     {1'd0,  5'd11}: s1rd0 <= 27;
	     {1'd0,  5'd12}: s1rd0 <= 28;
	     {1'd0,  5'd13}: s1rd0 <= 29;
	     {1'd0,  5'd14}: s1rd0 <= 30;
	     {1'd0,  5'd15}: s1rd0 <= 31;
	     {1'd0,  5'd16}: s1rd0 <= 0;
	     {1'd0,  5'd17}: s1rd0 <= 1;
	     {1'd0,  5'd18}: s1rd0 <= 2;
	     {1'd0,  5'd19}: s1rd0 <= 3;
	     {1'd0,  5'd20}: s1rd0 <= 4;
	     {1'd0,  5'd21}: s1rd0 <= 5;
	     {1'd0,  5'd22}: s1rd0 <= 6;
	     {1'd0,  5'd23}: s1rd0 <= 7;
	     {1'd0,  5'd24}: s1rd0 <= 8;
	     {1'd0,  5'd25}: s1rd0 <= 9;
	     {1'd0,  5'd26}: s1rd0 <= 10;
	     {1'd0,  5'd27}: s1rd0 <= 11;
	     {1'd0,  5'd28}: s1rd0 <= 12;
	     {1'd0,  5'd29}: s1rd0 <= 13;
	     {1'd0,  5'd30}: s1rd0 <= 14;
	     {1'd0,  5'd31}: s1rd0 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd1 <= 0;
	     {1'd0,  5'd1}: s1rd1 <= 1;
	     {1'd0,  5'd2}: s1rd1 <= 2;
	     {1'd0,  5'd3}: s1rd1 <= 3;
	     {1'd0,  5'd4}: s1rd1 <= 4;
	     {1'd0,  5'd5}: s1rd1 <= 5;
	     {1'd0,  5'd6}: s1rd1 <= 6;
	     {1'd0,  5'd7}: s1rd1 <= 7;
	     {1'd0,  5'd8}: s1rd1 <= 8;
	     {1'd0,  5'd9}: s1rd1 <= 9;
	     {1'd0,  5'd10}: s1rd1 <= 10;
	     {1'd0,  5'd11}: s1rd1 <= 11;
	     {1'd0,  5'd12}: s1rd1 <= 12;
	     {1'd0,  5'd13}: s1rd1 <= 13;
	     {1'd0,  5'd14}: s1rd1 <= 14;
	     {1'd0,  5'd15}: s1rd1 <= 15;
	     {1'd0,  5'd16}: s1rd1 <= 16;
	     {1'd0,  5'd17}: s1rd1 <= 17;
	     {1'd0,  5'd18}: s1rd1 <= 18;
	     {1'd0,  5'd19}: s1rd1 <= 19;
	     {1'd0,  5'd20}: s1rd1 <= 20;
	     {1'd0,  5'd21}: s1rd1 <= 21;
	     {1'd0,  5'd22}: s1rd1 <= 22;
	     {1'd0,  5'd23}: s1rd1 <= 23;
	     {1'd0,  5'd24}: s1rd1 <= 24;
	     {1'd0,  5'd25}: s1rd1 <= 25;
	     {1'd0,  5'd26}: s1rd1 <= 26;
	     {1'd0,  5'd27}: s1rd1 <= 27;
	     {1'd0,  5'd28}: s1rd1 <= 28;
	     {1'd0,  5'd29}: s1rd1 <= 29;
	     {1'd0,  5'd30}: s1rd1 <= 30;
	     {1'd0,  5'd31}: s1rd1 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd2 <= 16;
	     {1'd0,  5'd1}: s1rd2 <= 17;
	     {1'd0,  5'd2}: s1rd2 <= 18;
	     {1'd0,  5'd3}: s1rd2 <= 19;
	     {1'd0,  5'd4}: s1rd2 <= 20;
	     {1'd0,  5'd5}: s1rd2 <= 21;
	     {1'd0,  5'd6}: s1rd2 <= 22;
	     {1'd0,  5'd7}: s1rd2 <= 23;
	     {1'd0,  5'd8}: s1rd2 <= 24;
	     {1'd0,  5'd9}: s1rd2 <= 25;
	     {1'd0,  5'd10}: s1rd2 <= 26;
	     {1'd0,  5'd11}: s1rd2 <= 27;
	     {1'd0,  5'd12}: s1rd2 <= 28;
	     {1'd0,  5'd13}: s1rd2 <= 29;
	     {1'd0,  5'd14}: s1rd2 <= 30;
	     {1'd0,  5'd15}: s1rd2 <= 31;
	     {1'd0,  5'd16}: s1rd2 <= 0;
	     {1'd0,  5'd17}: s1rd2 <= 1;
	     {1'd0,  5'd18}: s1rd2 <= 2;
	     {1'd0,  5'd19}: s1rd2 <= 3;
	     {1'd0,  5'd20}: s1rd2 <= 4;
	     {1'd0,  5'd21}: s1rd2 <= 5;
	     {1'd0,  5'd22}: s1rd2 <= 6;
	     {1'd0,  5'd23}: s1rd2 <= 7;
	     {1'd0,  5'd24}: s1rd2 <= 8;
	     {1'd0,  5'd25}: s1rd2 <= 9;
	     {1'd0,  5'd26}: s1rd2 <= 10;
	     {1'd0,  5'd27}: s1rd2 <= 11;
	     {1'd0,  5'd28}: s1rd2 <= 12;
	     {1'd0,  5'd29}: s1rd2 <= 13;
	     {1'd0,  5'd30}: s1rd2 <= 14;
	     {1'd0,  5'd31}: s1rd2 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd3 <= 0;
	     {1'd0,  5'd1}: s1rd3 <= 1;
	     {1'd0,  5'd2}: s1rd3 <= 2;
	     {1'd0,  5'd3}: s1rd3 <= 3;
	     {1'd0,  5'd4}: s1rd3 <= 4;
	     {1'd0,  5'd5}: s1rd3 <= 5;
	     {1'd0,  5'd6}: s1rd3 <= 6;
	     {1'd0,  5'd7}: s1rd3 <= 7;
	     {1'd0,  5'd8}: s1rd3 <= 8;
	     {1'd0,  5'd9}: s1rd3 <= 9;
	     {1'd0,  5'd10}: s1rd3 <= 10;
	     {1'd0,  5'd11}: s1rd3 <= 11;
	     {1'd0,  5'd12}: s1rd3 <= 12;
	     {1'd0,  5'd13}: s1rd3 <= 13;
	     {1'd0,  5'd14}: s1rd3 <= 14;
	     {1'd0,  5'd15}: s1rd3 <= 15;
	     {1'd0,  5'd16}: s1rd3 <= 16;
	     {1'd0,  5'd17}: s1rd3 <= 17;
	     {1'd0,  5'd18}: s1rd3 <= 18;
	     {1'd0,  5'd19}: s1rd3 <= 19;
	     {1'd0,  5'd20}: s1rd3 <= 20;
	     {1'd0,  5'd21}: s1rd3 <= 21;
	     {1'd0,  5'd22}: s1rd3 <= 22;
	     {1'd0,  5'd23}: s1rd3 <= 23;
	     {1'd0,  5'd24}: s1rd3 <= 24;
	     {1'd0,  5'd25}: s1rd3 <= 25;
	     {1'd0,  5'd26}: s1rd3 <= 26;
	     {1'd0,  5'd27}: s1rd3 <= 27;
	     {1'd0,  5'd28}: s1rd3 <= 28;
	     {1'd0,  5'd29}: s1rd3 <= 29;
	     {1'd0,  5'd30}: s1rd3 <= 30;
	     {1'd0,  5'd31}: s1rd3 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd4 <= 16;
	     {1'd0,  5'd1}: s1rd4 <= 17;
	     {1'd0,  5'd2}: s1rd4 <= 18;
	     {1'd0,  5'd3}: s1rd4 <= 19;
	     {1'd0,  5'd4}: s1rd4 <= 20;
	     {1'd0,  5'd5}: s1rd4 <= 21;
	     {1'd0,  5'd6}: s1rd4 <= 22;
	     {1'd0,  5'd7}: s1rd4 <= 23;
	     {1'd0,  5'd8}: s1rd4 <= 24;
	     {1'd0,  5'd9}: s1rd4 <= 25;
	     {1'd0,  5'd10}: s1rd4 <= 26;
	     {1'd0,  5'd11}: s1rd4 <= 27;
	     {1'd0,  5'd12}: s1rd4 <= 28;
	     {1'd0,  5'd13}: s1rd4 <= 29;
	     {1'd0,  5'd14}: s1rd4 <= 30;
	     {1'd0,  5'd15}: s1rd4 <= 31;
	     {1'd0,  5'd16}: s1rd4 <= 0;
	     {1'd0,  5'd17}: s1rd4 <= 1;
	     {1'd0,  5'd18}: s1rd4 <= 2;
	     {1'd0,  5'd19}: s1rd4 <= 3;
	     {1'd0,  5'd20}: s1rd4 <= 4;
	     {1'd0,  5'd21}: s1rd4 <= 5;
	     {1'd0,  5'd22}: s1rd4 <= 6;
	     {1'd0,  5'd23}: s1rd4 <= 7;
	     {1'd0,  5'd24}: s1rd4 <= 8;
	     {1'd0,  5'd25}: s1rd4 <= 9;
	     {1'd0,  5'd26}: s1rd4 <= 10;
	     {1'd0,  5'd27}: s1rd4 <= 11;
	     {1'd0,  5'd28}: s1rd4 <= 12;
	     {1'd0,  5'd29}: s1rd4 <= 13;
	     {1'd0,  5'd30}: s1rd4 <= 14;
	     {1'd0,  5'd31}: s1rd4 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd5 <= 0;
	     {1'd0,  5'd1}: s1rd5 <= 1;
	     {1'd0,  5'd2}: s1rd5 <= 2;
	     {1'd0,  5'd3}: s1rd5 <= 3;
	     {1'd0,  5'd4}: s1rd5 <= 4;
	     {1'd0,  5'd5}: s1rd5 <= 5;
	     {1'd0,  5'd6}: s1rd5 <= 6;
	     {1'd0,  5'd7}: s1rd5 <= 7;
	     {1'd0,  5'd8}: s1rd5 <= 8;
	     {1'd0,  5'd9}: s1rd5 <= 9;
	     {1'd0,  5'd10}: s1rd5 <= 10;
	     {1'd0,  5'd11}: s1rd5 <= 11;
	     {1'd0,  5'd12}: s1rd5 <= 12;
	     {1'd0,  5'd13}: s1rd5 <= 13;
	     {1'd0,  5'd14}: s1rd5 <= 14;
	     {1'd0,  5'd15}: s1rd5 <= 15;
	     {1'd0,  5'd16}: s1rd5 <= 16;
	     {1'd0,  5'd17}: s1rd5 <= 17;
	     {1'd0,  5'd18}: s1rd5 <= 18;
	     {1'd0,  5'd19}: s1rd5 <= 19;
	     {1'd0,  5'd20}: s1rd5 <= 20;
	     {1'd0,  5'd21}: s1rd5 <= 21;
	     {1'd0,  5'd22}: s1rd5 <= 22;
	     {1'd0,  5'd23}: s1rd5 <= 23;
	     {1'd0,  5'd24}: s1rd5 <= 24;
	     {1'd0,  5'd25}: s1rd5 <= 25;
	     {1'd0,  5'd26}: s1rd5 <= 26;
	     {1'd0,  5'd27}: s1rd5 <= 27;
	     {1'd0,  5'd28}: s1rd5 <= 28;
	     {1'd0,  5'd29}: s1rd5 <= 29;
	     {1'd0,  5'd30}: s1rd5 <= 30;
	     {1'd0,  5'd31}: s1rd5 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd6 <= 16;
	     {1'd0,  5'd1}: s1rd6 <= 17;
	     {1'd0,  5'd2}: s1rd6 <= 18;
	     {1'd0,  5'd3}: s1rd6 <= 19;
	     {1'd0,  5'd4}: s1rd6 <= 20;
	     {1'd0,  5'd5}: s1rd6 <= 21;
	     {1'd0,  5'd6}: s1rd6 <= 22;
	     {1'd0,  5'd7}: s1rd6 <= 23;
	     {1'd0,  5'd8}: s1rd6 <= 24;
	     {1'd0,  5'd9}: s1rd6 <= 25;
	     {1'd0,  5'd10}: s1rd6 <= 26;
	     {1'd0,  5'd11}: s1rd6 <= 27;
	     {1'd0,  5'd12}: s1rd6 <= 28;
	     {1'd0,  5'd13}: s1rd6 <= 29;
	     {1'd0,  5'd14}: s1rd6 <= 30;
	     {1'd0,  5'd15}: s1rd6 <= 31;
	     {1'd0,  5'd16}: s1rd6 <= 0;
	     {1'd0,  5'd17}: s1rd6 <= 1;
	     {1'd0,  5'd18}: s1rd6 <= 2;
	     {1'd0,  5'd19}: s1rd6 <= 3;
	     {1'd0,  5'd20}: s1rd6 <= 4;
	     {1'd0,  5'd21}: s1rd6 <= 5;
	     {1'd0,  5'd22}: s1rd6 <= 6;
	     {1'd0,  5'd23}: s1rd6 <= 7;
	     {1'd0,  5'd24}: s1rd6 <= 8;
	     {1'd0,  5'd25}: s1rd6 <= 9;
	     {1'd0,  5'd26}: s1rd6 <= 10;
	     {1'd0,  5'd27}: s1rd6 <= 11;
	     {1'd0,  5'd28}: s1rd6 <= 12;
	     {1'd0,  5'd29}: s1rd6 <= 13;
	     {1'd0,  5'd30}: s1rd6 <= 14;
	     {1'd0,  5'd31}: s1rd6 <= 15;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm73_d, s1rdloc})
	     {1'd0,  5'd0}: s1rd7 <= 0;
	     {1'd0,  5'd1}: s1rd7 <= 1;
	     {1'd0,  5'd2}: s1rd7 <= 2;
	     {1'd0,  5'd3}: s1rd7 <= 3;
	     {1'd0,  5'd4}: s1rd7 <= 4;
	     {1'd0,  5'd5}: s1rd7 <= 5;
	     {1'd0,  5'd6}: s1rd7 <= 6;
	     {1'd0,  5'd7}: s1rd7 <= 7;
	     {1'd0,  5'd8}: s1rd7 <= 8;
	     {1'd0,  5'd9}: s1rd7 <= 9;
	     {1'd0,  5'd10}: s1rd7 <= 10;
	     {1'd0,  5'd11}: s1rd7 <= 11;
	     {1'd0,  5'd12}: s1rd7 <= 12;
	     {1'd0,  5'd13}: s1rd7 <= 13;
	     {1'd0,  5'd14}: s1rd7 <= 14;
	     {1'd0,  5'd15}: s1rd7 <= 15;
	     {1'd0,  5'd16}: s1rd7 <= 16;
	     {1'd0,  5'd17}: s1rd7 <= 17;
	     {1'd0,  5'd18}: s1rd7 <= 18;
	     {1'd0,  5'd19}: s1rd7 <= 19;
	     {1'd0,  5'd20}: s1rd7 <= 20;
	     {1'd0,  5'd21}: s1rd7 <= 21;
	     {1'd0,  5'd22}: s1rd7 <= 22;
	     {1'd0,  5'd23}: s1rd7 <= 23;
	     {1'd0,  5'd24}: s1rd7 <= 24;
	     {1'd0,  5'd25}: s1rd7 <= 25;
	     {1'd0,  5'd26}: s1rd7 <= 26;
	     {1'd0,  5'd27}: s1rd7 <= 27;
	     {1'd0,  5'd28}: s1rd7 <= 28;
	     {1'd0,  5'd29}: s1rd7 <= 29;
	     {1'd0,  5'd30}: s1rd7 <= 30;
	     {1'd0,  5'd31}: s1rd7 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet64972 sw(tm73_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr0 <= 16;
	      {1'd0, 5'd1}: s2wr0 <= 17;
	      {1'd0, 5'd2}: s2wr0 <= 18;
	      {1'd0, 5'd3}: s2wr0 <= 19;
	      {1'd0, 5'd4}: s2wr0 <= 20;
	      {1'd0, 5'd5}: s2wr0 <= 21;
	      {1'd0, 5'd6}: s2wr0 <= 22;
	      {1'd0, 5'd7}: s2wr0 <= 23;
	      {1'd0, 5'd8}: s2wr0 <= 24;
	      {1'd0, 5'd9}: s2wr0 <= 25;
	      {1'd0, 5'd10}: s2wr0 <= 26;
	      {1'd0, 5'd11}: s2wr0 <= 27;
	      {1'd0, 5'd12}: s2wr0 <= 28;
	      {1'd0, 5'd13}: s2wr0 <= 29;
	      {1'd0, 5'd14}: s2wr0 <= 30;
	      {1'd0, 5'd15}: s2wr0 <= 31;
	      {1'd0, 5'd16}: s2wr0 <= 0;
	      {1'd0, 5'd17}: s2wr0 <= 1;
	      {1'd0, 5'd18}: s2wr0 <= 2;
	      {1'd0, 5'd19}: s2wr0 <= 3;
	      {1'd0, 5'd20}: s2wr0 <= 4;
	      {1'd0, 5'd21}: s2wr0 <= 5;
	      {1'd0, 5'd22}: s2wr0 <= 6;
	      {1'd0, 5'd23}: s2wr0 <= 7;
	      {1'd0, 5'd24}: s2wr0 <= 8;
	      {1'd0, 5'd25}: s2wr0 <= 9;
	      {1'd0, 5'd26}: s2wr0 <= 10;
	      {1'd0, 5'd27}: s2wr0 <= 11;
	      {1'd0, 5'd28}: s2wr0 <= 12;
	      {1'd0, 5'd29}: s2wr0 <= 13;
	      {1'd0, 5'd30}: s2wr0 <= 14;
	      {1'd0, 5'd31}: s2wr0 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr1 <= 0;
	      {1'd0, 5'd1}: s2wr1 <= 1;
	      {1'd0, 5'd2}: s2wr1 <= 2;
	      {1'd0, 5'd3}: s2wr1 <= 3;
	      {1'd0, 5'd4}: s2wr1 <= 4;
	      {1'd0, 5'd5}: s2wr1 <= 5;
	      {1'd0, 5'd6}: s2wr1 <= 6;
	      {1'd0, 5'd7}: s2wr1 <= 7;
	      {1'd0, 5'd8}: s2wr1 <= 8;
	      {1'd0, 5'd9}: s2wr1 <= 9;
	      {1'd0, 5'd10}: s2wr1 <= 10;
	      {1'd0, 5'd11}: s2wr1 <= 11;
	      {1'd0, 5'd12}: s2wr1 <= 12;
	      {1'd0, 5'd13}: s2wr1 <= 13;
	      {1'd0, 5'd14}: s2wr1 <= 14;
	      {1'd0, 5'd15}: s2wr1 <= 15;
	      {1'd0, 5'd16}: s2wr1 <= 16;
	      {1'd0, 5'd17}: s2wr1 <= 17;
	      {1'd0, 5'd18}: s2wr1 <= 18;
	      {1'd0, 5'd19}: s2wr1 <= 19;
	      {1'd0, 5'd20}: s2wr1 <= 20;
	      {1'd0, 5'd21}: s2wr1 <= 21;
	      {1'd0, 5'd22}: s2wr1 <= 22;
	      {1'd0, 5'd23}: s2wr1 <= 23;
	      {1'd0, 5'd24}: s2wr1 <= 24;
	      {1'd0, 5'd25}: s2wr1 <= 25;
	      {1'd0, 5'd26}: s2wr1 <= 26;
	      {1'd0, 5'd27}: s2wr1 <= 27;
	      {1'd0, 5'd28}: s2wr1 <= 28;
	      {1'd0, 5'd29}: s2wr1 <= 29;
	      {1'd0, 5'd30}: s2wr1 <= 30;
	      {1'd0, 5'd31}: s2wr1 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr2 <= 16;
	      {1'd0, 5'd1}: s2wr2 <= 17;
	      {1'd0, 5'd2}: s2wr2 <= 18;
	      {1'd0, 5'd3}: s2wr2 <= 19;
	      {1'd0, 5'd4}: s2wr2 <= 20;
	      {1'd0, 5'd5}: s2wr2 <= 21;
	      {1'd0, 5'd6}: s2wr2 <= 22;
	      {1'd0, 5'd7}: s2wr2 <= 23;
	      {1'd0, 5'd8}: s2wr2 <= 24;
	      {1'd0, 5'd9}: s2wr2 <= 25;
	      {1'd0, 5'd10}: s2wr2 <= 26;
	      {1'd0, 5'd11}: s2wr2 <= 27;
	      {1'd0, 5'd12}: s2wr2 <= 28;
	      {1'd0, 5'd13}: s2wr2 <= 29;
	      {1'd0, 5'd14}: s2wr2 <= 30;
	      {1'd0, 5'd15}: s2wr2 <= 31;
	      {1'd0, 5'd16}: s2wr2 <= 0;
	      {1'd0, 5'd17}: s2wr2 <= 1;
	      {1'd0, 5'd18}: s2wr2 <= 2;
	      {1'd0, 5'd19}: s2wr2 <= 3;
	      {1'd0, 5'd20}: s2wr2 <= 4;
	      {1'd0, 5'd21}: s2wr2 <= 5;
	      {1'd0, 5'd22}: s2wr2 <= 6;
	      {1'd0, 5'd23}: s2wr2 <= 7;
	      {1'd0, 5'd24}: s2wr2 <= 8;
	      {1'd0, 5'd25}: s2wr2 <= 9;
	      {1'd0, 5'd26}: s2wr2 <= 10;
	      {1'd0, 5'd27}: s2wr2 <= 11;
	      {1'd0, 5'd28}: s2wr2 <= 12;
	      {1'd0, 5'd29}: s2wr2 <= 13;
	      {1'd0, 5'd30}: s2wr2 <= 14;
	      {1'd0, 5'd31}: s2wr2 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr3 <= 0;
	      {1'd0, 5'd1}: s2wr3 <= 1;
	      {1'd0, 5'd2}: s2wr3 <= 2;
	      {1'd0, 5'd3}: s2wr3 <= 3;
	      {1'd0, 5'd4}: s2wr3 <= 4;
	      {1'd0, 5'd5}: s2wr3 <= 5;
	      {1'd0, 5'd6}: s2wr3 <= 6;
	      {1'd0, 5'd7}: s2wr3 <= 7;
	      {1'd0, 5'd8}: s2wr3 <= 8;
	      {1'd0, 5'd9}: s2wr3 <= 9;
	      {1'd0, 5'd10}: s2wr3 <= 10;
	      {1'd0, 5'd11}: s2wr3 <= 11;
	      {1'd0, 5'd12}: s2wr3 <= 12;
	      {1'd0, 5'd13}: s2wr3 <= 13;
	      {1'd0, 5'd14}: s2wr3 <= 14;
	      {1'd0, 5'd15}: s2wr3 <= 15;
	      {1'd0, 5'd16}: s2wr3 <= 16;
	      {1'd0, 5'd17}: s2wr3 <= 17;
	      {1'd0, 5'd18}: s2wr3 <= 18;
	      {1'd0, 5'd19}: s2wr3 <= 19;
	      {1'd0, 5'd20}: s2wr3 <= 20;
	      {1'd0, 5'd21}: s2wr3 <= 21;
	      {1'd0, 5'd22}: s2wr3 <= 22;
	      {1'd0, 5'd23}: s2wr3 <= 23;
	      {1'd0, 5'd24}: s2wr3 <= 24;
	      {1'd0, 5'd25}: s2wr3 <= 25;
	      {1'd0, 5'd26}: s2wr3 <= 26;
	      {1'd0, 5'd27}: s2wr3 <= 27;
	      {1'd0, 5'd28}: s2wr3 <= 28;
	      {1'd0, 5'd29}: s2wr3 <= 29;
	      {1'd0, 5'd30}: s2wr3 <= 30;
	      {1'd0, 5'd31}: s2wr3 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr4 <= 16;
	      {1'd0, 5'd1}: s2wr4 <= 17;
	      {1'd0, 5'd2}: s2wr4 <= 18;
	      {1'd0, 5'd3}: s2wr4 <= 19;
	      {1'd0, 5'd4}: s2wr4 <= 20;
	      {1'd0, 5'd5}: s2wr4 <= 21;
	      {1'd0, 5'd6}: s2wr4 <= 22;
	      {1'd0, 5'd7}: s2wr4 <= 23;
	      {1'd0, 5'd8}: s2wr4 <= 24;
	      {1'd0, 5'd9}: s2wr4 <= 25;
	      {1'd0, 5'd10}: s2wr4 <= 26;
	      {1'd0, 5'd11}: s2wr4 <= 27;
	      {1'd0, 5'd12}: s2wr4 <= 28;
	      {1'd0, 5'd13}: s2wr4 <= 29;
	      {1'd0, 5'd14}: s2wr4 <= 30;
	      {1'd0, 5'd15}: s2wr4 <= 31;
	      {1'd0, 5'd16}: s2wr4 <= 0;
	      {1'd0, 5'd17}: s2wr4 <= 1;
	      {1'd0, 5'd18}: s2wr4 <= 2;
	      {1'd0, 5'd19}: s2wr4 <= 3;
	      {1'd0, 5'd20}: s2wr4 <= 4;
	      {1'd0, 5'd21}: s2wr4 <= 5;
	      {1'd0, 5'd22}: s2wr4 <= 6;
	      {1'd0, 5'd23}: s2wr4 <= 7;
	      {1'd0, 5'd24}: s2wr4 <= 8;
	      {1'd0, 5'd25}: s2wr4 <= 9;
	      {1'd0, 5'd26}: s2wr4 <= 10;
	      {1'd0, 5'd27}: s2wr4 <= 11;
	      {1'd0, 5'd28}: s2wr4 <= 12;
	      {1'd0, 5'd29}: s2wr4 <= 13;
	      {1'd0, 5'd30}: s2wr4 <= 14;
	      {1'd0, 5'd31}: s2wr4 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr5 <= 0;
	      {1'd0, 5'd1}: s2wr5 <= 1;
	      {1'd0, 5'd2}: s2wr5 <= 2;
	      {1'd0, 5'd3}: s2wr5 <= 3;
	      {1'd0, 5'd4}: s2wr5 <= 4;
	      {1'd0, 5'd5}: s2wr5 <= 5;
	      {1'd0, 5'd6}: s2wr5 <= 6;
	      {1'd0, 5'd7}: s2wr5 <= 7;
	      {1'd0, 5'd8}: s2wr5 <= 8;
	      {1'd0, 5'd9}: s2wr5 <= 9;
	      {1'd0, 5'd10}: s2wr5 <= 10;
	      {1'd0, 5'd11}: s2wr5 <= 11;
	      {1'd0, 5'd12}: s2wr5 <= 12;
	      {1'd0, 5'd13}: s2wr5 <= 13;
	      {1'd0, 5'd14}: s2wr5 <= 14;
	      {1'd0, 5'd15}: s2wr5 <= 15;
	      {1'd0, 5'd16}: s2wr5 <= 16;
	      {1'd0, 5'd17}: s2wr5 <= 17;
	      {1'd0, 5'd18}: s2wr5 <= 18;
	      {1'd0, 5'd19}: s2wr5 <= 19;
	      {1'd0, 5'd20}: s2wr5 <= 20;
	      {1'd0, 5'd21}: s2wr5 <= 21;
	      {1'd0, 5'd22}: s2wr5 <= 22;
	      {1'd0, 5'd23}: s2wr5 <= 23;
	      {1'd0, 5'd24}: s2wr5 <= 24;
	      {1'd0, 5'd25}: s2wr5 <= 25;
	      {1'd0, 5'd26}: s2wr5 <= 26;
	      {1'd0, 5'd27}: s2wr5 <= 27;
	      {1'd0, 5'd28}: s2wr5 <= 28;
	      {1'd0, 5'd29}: s2wr5 <= 29;
	      {1'd0, 5'd30}: s2wr5 <= 30;
	      {1'd0, 5'd31}: s2wr5 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr6 <= 16;
	      {1'd0, 5'd1}: s2wr6 <= 17;
	      {1'd0, 5'd2}: s2wr6 <= 18;
	      {1'd0, 5'd3}: s2wr6 <= 19;
	      {1'd0, 5'd4}: s2wr6 <= 20;
	      {1'd0, 5'd5}: s2wr6 <= 21;
	      {1'd0, 5'd6}: s2wr6 <= 22;
	      {1'd0, 5'd7}: s2wr6 <= 23;
	      {1'd0, 5'd8}: s2wr6 <= 24;
	      {1'd0, 5'd9}: s2wr6 <= 25;
	      {1'd0, 5'd10}: s2wr6 <= 26;
	      {1'd0, 5'd11}: s2wr6 <= 27;
	      {1'd0, 5'd12}: s2wr6 <= 28;
	      {1'd0, 5'd13}: s2wr6 <= 29;
	      {1'd0, 5'd14}: s2wr6 <= 30;
	      {1'd0, 5'd15}: s2wr6 <= 31;
	      {1'd0, 5'd16}: s2wr6 <= 0;
	      {1'd0, 5'd17}: s2wr6 <= 1;
	      {1'd0, 5'd18}: s2wr6 <= 2;
	      {1'd0, 5'd19}: s2wr6 <= 3;
	      {1'd0, 5'd20}: s2wr6 <= 4;
	      {1'd0, 5'd21}: s2wr6 <= 5;
	      {1'd0, 5'd22}: s2wr6 <= 6;
	      {1'd0, 5'd23}: s2wr6 <= 7;
	      {1'd0, 5'd24}: s2wr6 <= 8;
	      {1'd0, 5'd25}: s2wr6 <= 9;
	      {1'd0, 5'd26}: s2wr6 <= 10;
	      {1'd0, 5'd27}: s2wr6 <= 11;
	      {1'd0, 5'd28}: s2wr6 <= 12;
	      {1'd0, 5'd29}: s2wr6 <= 13;
	      {1'd0, 5'd30}: s2wr6 <= 14;
	      {1'd0, 5'd31}: s2wr6 <= 15;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm73_dd, writeCycle})
	      {1'd0, 5'd0}: s2wr7 <= 0;
	      {1'd0, 5'd1}: s2wr7 <= 1;
	      {1'd0, 5'd2}: s2wr7 <= 2;
	      {1'd0, 5'd3}: s2wr7 <= 3;
	      {1'd0, 5'd4}: s2wr7 <= 4;
	      {1'd0, 5'd5}: s2wr7 <= 5;
	      {1'd0, 5'd6}: s2wr7 <= 6;
	      {1'd0, 5'd7}: s2wr7 <= 7;
	      {1'd0, 5'd8}: s2wr7 <= 8;
	      {1'd0, 5'd9}: s2wr7 <= 9;
	      {1'd0, 5'd10}: s2wr7 <= 10;
	      {1'd0, 5'd11}: s2wr7 <= 11;
	      {1'd0, 5'd12}: s2wr7 <= 12;
	      {1'd0, 5'd13}: s2wr7 <= 13;
	      {1'd0, 5'd14}: s2wr7 <= 14;
	      {1'd0, 5'd15}: s2wr7 <= 15;
	      {1'd0, 5'd16}: s2wr7 <= 16;
	      {1'd0, 5'd17}: s2wr7 <= 17;
	      {1'd0, 5'd18}: s2wr7 <= 18;
	      {1'd0, 5'd19}: s2wr7 <= 19;
	      {1'd0, 5'd20}: s2wr7 <= 20;
	      {1'd0, 5'd21}: s2wr7 <= 21;
	      {1'd0, 5'd22}: s2wr7 <= 22;
	      {1'd0, 5'd23}: s2wr7 <= 23;
	      {1'd0, 5'd24}: s2wr7 <= 24;
	      {1'd0, 5'd25}: s2wr7 <= 25;
	      {1'd0, 5'd26}: s2wr7 <= 26;
	      {1'd0, 5'd27}: s2wr7 <= 27;
	      {1'd0, 5'd28}: s2wr7 <= 28;
	      {1'd0, 5'd29}: s2wr7 <= 29;
	      {1'd0, 5'd30}: s2wr7 <= 30;
	      {1'd0, 5'd31}: s2wr7 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 32
module DirSum_66163(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [4:0] i3;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i3 <= 0;
      end
      else begin
         if (next == 1)
            i3 <= 0;
         else if (i3 == 31)
            i3 <= 0;
         else
            i3 <= i3 + 1;
      end
   end

   codeBlock64977 codeBlockIsnt76760(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i3_in(i3),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D40_65651(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fd4;
      1: out3 <= 16'h3f0f;
      2: out3 <= 16'h3daf;
      3: out3 <= 16'h3bb6;
      4: out3 <= 16'h392b;
      5: out3 <= 16'h3612;
      6: out3 <= 16'h3274;
      7: out3 <= 16'h2e5a;
      8: out3 <= 16'h29ce;
      9: out3 <= 16'h24da;
      10: out3 <= 16'h1f8c;
      11: out3 <= 16'h19ef;
      12: out3 <= 16'h1413;
      13: out3 <= 16'he06;
      14: out3 <= 16'h7d6;
      15: out3 <= 16'h192;
      16: out3 <= 16'hfb4b;
      17: out3 <= 16'hf50f;
      18: out3 <= 16'heeee;
      19: out3 <= 16'he8f7;
      20: out3 <= 16'he33a;
      21: out3 <= 16'hddc3;
      22: out3 <= 16'hd8a0;
      23: out3 <= 16'hd3df;
      24: out3 <= 16'hcf8a;
      25: out3 <= 16'hcbad;
      26: out3 <= 16'hc850;
      27: out3 <= 16'hc57e;
      28: out3 <= 16'hc33b;
      29: out3 <= 16'hc18e;
      30: out3 <= 16'hc07b;
      31: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D38_65753(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fec;
      1: out3 <= 16'h3f4f;
      2: out3 <= 16'h3e15;
      3: out3 <= 16'h3c42;
      4: out3 <= 16'h39db;
      5: out3 <= 16'h36e5;
      6: out3 <= 16'h3368;
      7: out3 <= 16'h2f6c;
      8: out3 <= 16'h2afb;
      9: out3 <= 16'h2620;
      10: out3 <= 16'h20e7;
      11: out3 <= 16'h1b5d;
      12: out3 <= 16'h1590;
      13: out3 <= 16'hf8d;
      14: out3 <= 16'h964;
      15: out3 <= 16'h324;
      16: out3 <= 16'hfcdc;
      17: out3 <= 16'hf69c;
      18: out3 <= 16'hf073;
      19: out3 <= 16'hea70;
      20: out3 <= 16'he4a3;
      21: out3 <= 16'hdf19;
      22: out3 <= 16'hd9e0;
      23: out3 <= 16'hd505;
      24: out3 <= 16'hd094;
      25: out3 <= 16'hcc98;
      26: out3 <= 16'hc91b;
      27: out3 <= 16'hc625;
      28: out3 <= 16'hc3be;
      29: out3 <= 16'hc1eb;
      30: out3 <= 16'hc0b1;
      31: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D42_65787(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hf9ba;
      2: out3 <= 16'hf384;
      3: out3 <= 16'hed6c;
      4: out3 <= 16'he782;
      5: out3 <= 16'he1d5;
      6: out3 <= 16'hdc72;
      7: out3 <= 16'hd766;
      8: out3 <= 16'hd2bf;
      9: out3 <= 16'hce87;
      10: out3 <= 16'hcac9;
      11: out3 <= 16'hc78f;
      12: out3 <= 16'hc4df;
      13: out3 <= 16'hc2c1;
      14: out3 <= 16'hc13b;
      15: out3 <= 16'hc04f;
      16: out3 <= 16'hc000;
      17: out3 <= 16'hc04f;
      18: out3 <= 16'hc13b;
      19: out3 <= 16'hc2c1;
      20: out3 <= 16'hc4df;
      21: out3 <= 16'hc78f;
      22: out3 <= 16'hcac9;
      23: out3 <= 16'hce87;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hd766;
      26: out3 <= 16'hdc72;
      27: out3 <= 16'he1d5;
      28: out3 <= 16'he782;
      29: out3 <= 16'hed6c;
      30: out3 <= 16'hf384;
      31: out3 <= 16'hf9ba;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D36_65889(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3f85;
      2: out3 <= 16'h3e72;
      3: out3 <= 16'h3cc5;
      4: out3 <= 16'h3a82;
      5: out3 <= 16'h37b0;
      6: out3 <= 16'h3453;
      7: out3 <= 16'h3076;
      8: out3 <= 16'h2c21;
      9: out3 <= 16'h2760;
      10: out3 <= 16'h223d;
      11: out3 <= 16'h1cc6;
      12: out3 <= 16'h1709;
      13: out3 <= 16'h1112;
      14: out3 <= 16'haf1;
      15: out3 <= 16'h4b5;
      16: out3 <= 16'hfe6e;
      17: out3 <= 16'hf82a;
      18: out3 <= 16'hf1fa;
      19: out3 <= 16'hebed;
      20: out3 <= 16'he611;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdb26;
      23: out3 <= 16'hd632;
      24: out3 <= 16'hd1a6;
      25: out3 <= 16'hcd8c;
      26: out3 <= 16'hc9ee;
      27: out3 <= 16'hc6d5;
      28: out3 <= 16'hc44a;
      29: out3 <= 16'hc251;
      30: out3 <= 16'hc0f1;
      31: out3 <= 16'hc02c;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D44_65923(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hf82a;
      2: out3 <= 16'hf1fa;
      3: out3 <= 16'hebed;
      4: out3 <= 16'he611;
      5: out3 <= 16'he074;
      6: out3 <= 16'hdb26;
      7: out3 <= 16'hd632;
      8: out3 <= 16'hd1a6;
      9: out3 <= 16'hcd8c;
      10: out3 <= 16'hc9ee;
      11: out3 <= 16'hc6d5;
      12: out3 <= 16'hc44a;
      13: out3 <= 16'hc251;
      14: out3 <= 16'hc0f1;
      15: out3 <= 16'hc02c;
      16: out3 <= 16'hc005;
      17: out3 <= 16'hc07b;
      18: out3 <= 16'hc18e;
      19: out3 <= 16'hc33b;
      20: out3 <= 16'hc57e;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hcbad;
      23: out3 <= 16'hcf8a;
      24: out3 <= 16'hd3df;
      25: out3 <= 16'hd8a0;
      26: out3 <= 16'hddc3;
      27: out3 <= 16'he33a;
      28: out3 <= 16'he8f7;
      29: out3 <= 16'heeee;
      30: out3 <= 16'hf50f;
      31: out3 <= 16'hfb4b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D34_66025(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fb1;
      2: out3 <= 16'h3ec5;
      3: out3 <= 16'h3d3f;
      4: out3 <= 16'h3b21;
      5: out3 <= 16'h3871;
      6: out3 <= 16'h3537;
      7: out3 <= 16'h3179;
      8: out3 <= 16'h2d41;
      9: out3 <= 16'h289a;
      10: out3 <= 16'h238e;
      11: out3 <= 16'h1e2b;
      12: out3 <= 16'h187e;
      13: out3 <= 16'h1294;
      14: out3 <= 16'hc7c;
      15: out3 <= 16'h646;
      16: out3 <= 16'h0;
      17: out3 <= 16'hf9ba;
      18: out3 <= 16'hf384;
      19: out3 <= 16'hed6c;
      20: out3 <= 16'he782;
      21: out3 <= 16'he1d5;
      22: out3 <= 16'hdc72;
      23: out3 <= 16'hd766;
      24: out3 <= 16'hd2bf;
      25: out3 <= 16'hce87;
      26: out3 <= 16'hcac9;
      27: out3 <= 16'hc78f;
      28: out3 <= 16'hc4df;
      29: out3 <= 16'hc2c1;
      30: out3 <= 16'hc13b;
      31: out3 <= 16'hc04f;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D46_66093(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfcdc;
      1: out3 <= 16'hf69c;
      2: out3 <= 16'hf073;
      3: out3 <= 16'hea70;
      4: out3 <= 16'he4a3;
      5: out3 <= 16'hdf19;
      6: out3 <= 16'hd9e0;
      7: out3 <= 16'hd505;
      8: out3 <= 16'hd094;
      9: out3 <= 16'hcc98;
      10: out3 <= 16'hc91b;
      11: out3 <= 16'hc625;
      12: out3 <= 16'hc3be;
      13: out3 <= 16'hc1eb;
      14: out3 <= 16'hc0b1;
      15: out3 <= 16'hc014;
      16: out3 <= 16'hc014;
      17: out3 <= 16'hc0b1;
      18: out3 <= 16'hc1eb;
      19: out3 <= 16'hc3be;
      20: out3 <= 16'hc625;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hcc98;
      23: out3 <= 16'hd094;
      24: out3 <= 16'hd505;
      25: out3 <= 16'hd9e0;
      26: out3 <= 16'hdf19;
      27: out3 <= 16'he4a3;
      28: out3 <= 16'hea70;
      29: out3 <= 16'hf073;
      30: out3 <= 16'hf69c;
      31: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D48_66161(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [4:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfb4b;
      1: out3 <= 16'hf50f;
      2: out3 <= 16'heeee;
      3: out3 <= 16'he8f7;
      4: out3 <= 16'he33a;
      5: out3 <= 16'hddc3;
      6: out3 <= 16'hd8a0;
      7: out3 <= 16'hd3df;
      8: out3 <= 16'hcf8a;
      9: out3 <= 16'hcbad;
      10: out3 <= 16'hc850;
      11: out3 <= 16'hc57e;
      12: out3 <= 16'hc33b;
      13: out3 <= 16'hc18e;
      14: out3 <= 16'hc07b;
      15: out3 <= 16'hc005;
      16: out3 <= 16'hc02c;
      17: out3 <= 16'hc0f1;
      18: out3 <= 16'hc251;
      19: out3 <= 16'hc44a;
      20: out3 <= 16'hc6d5;
      21: out3 <= 16'hc9ee;
      22: out3 <= 16'hcd8c;
      23: out3 <= 16'hd1a6;
      24: out3 <= 16'hd632;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'he074;
      27: out3 <= 16'he611;
      28: out3 <= 16'hebed;
      29: out3 <= 16'hf1fa;
      30: out3 <= 16'hf82a;
      31: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock64977(clk, reset, next_in, next_out,
   i3_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [4:0] i3_in;
   reg [4:0] i3;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76763(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a690;
   wire signed [15:0] a643;
   wire signed [15:0] a693;
   wire signed [15:0] a647;
   wire signed [15:0] a694;
   wire signed [15:0] a695;
   wire signed [15:0] a698;
   wire signed [15:0] a655;
   wire signed [15:0] a701;
   wire signed [15:0] a659;
   wire signed [15:0] a702;
   wire signed [15:0] a703;
   wire signed [15:0] a706;
   wire signed [15:0] a667;
   wire signed [15:0] a709;
   wire signed [15:0] a671;
   wire signed [15:0] a710;
   wire signed [15:0] a711;
   wire signed [15:0] a714;
   wire signed [15:0] a679;
   wire signed [15:0] a717;
   wire signed [15:0] a683;
   wire signed [15:0] a718;
   wire signed [15:0] a719;
   reg signed [15:0] tm1274;
   reg signed [15:0] tm1278;
   reg signed [15:0] tm1290;
   reg signed [15:0] tm1294;
   reg signed [15:0] tm1306;
   reg signed [15:0] tm1310;
   reg signed [15:0] tm1322;
   reg signed [15:0] tm1326;
   reg signed [15:0] tm1338;
   reg signed [15:0] tm1345;
   reg signed [15:0] tm1352;
   reg signed [15:0] tm1359;
   reg signed [15:0] tm1366;
   reg signed [15:0] tm1373;
   reg signed [15:0] tm1380;
   reg signed [15:0] tm1387;
   reg signed [15:0] tm1275;
   reg signed [15:0] tm1279;
   reg signed [15:0] tm1291;
   reg signed [15:0] tm1295;
   reg signed [15:0] tm1307;
   reg signed [15:0] tm1311;
   reg signed [15:0] tm1323;
   reg signed [15:0] tm1327;
   reg signed [15:0] tm1339;
   reg signed [15:0] tm1346;
   reg signed [15:0] tm1353;
   reg signed [15:0] tm1360;
   reg signed [15:0] tm1367;
   reg signed [15:0] tm1374;
   reg signed [15:0] tm1381;
   reg signed [15:0] tm1388;
   wire signed [15:0] tm76;
   wire signed [15:0] a648;
   wire signed [15:0] tm77;
   wire signed [15:0] a650;
   wire signed [15:0] tm80;
   wire signed [15:0] a660;
   wire signed [15:0] tm81;
   wire signed [15:0] a662;
   wire signed [15:0] tm84;
   wire signed [15:0] a672;
   wire signed [15:0] tm85;
   wire signed [15:0] a674;
   wire signed [15:0] tm88;
   wire signed [15:0] a684;
   wire signed [15:0] tm89;
   wire signed [15:0] a686;
   reg signed [15:0] tm1276;
   reg signed [15:0] tm1280;
   reg signed [15:0] tm1292;
   reg signed [15:0] tm1296;
   reg signed [15:0] tm1308;
   reg signed [15:0] tm1312;
   reg signed [15:0] tm1324;
   reg signed [15:0] tm1328;
   reg signed [15:0] tm1340;
   reg signed [15:0] tm1347;
   reg signed [15:0] tm1354;
   reg signed [15:0] tm1361;
   reg signed [15:0] tm1368;
   reg signed [15:0] tm1375;
   reg signed [15:0] tm1382;
   reg signed [15:0] tm1389;
   reg signed [15:0] tm257;
   reg signed [15:0] tm258;
   reg signed [15:0] tm265;
   reg signed [15:0] tm266;
   reg signed [15:0] tm273;
   reg signed [15:0] tm274;
   reg signed [15:0] tm281;
   reg signed [15:0] tm282;
   reg signed [15:0] tm1277;
   reg signed [15:0] tm1281;
   reg signed [15:0] tm1293;
   reg signed [15:0] tm1297;
   reg signed [15:0] tm1309;
   reg signed [15:0] tm1313;
   reg signed [15:0] tm1325;
   reg signed [15:0] tm1329;
   reg signed [15:0] tm1341;
   reg signed [15:0] tm1348;
   reg signed [15:0] tm1355;
   reg signed [15:0] tm1362;
   reg signed [15:0] tm1369;
   reg signed [15:0] tm1376;
   reg signed [15:0] tm1383;
   reg signed [15:0] tm1390;
   reg signed [15:0] tm1342;
   reg signed [15:0] tm1349;
   reg signed [15:0] tm1356;
   reg signed [15:0] tm1363;
   reg signed [15:0] tm1370;
   reg signed [15:0] tm1377;
   reg signed [15:0] tm1384;
   reg signed [15:0] tm1391;
   wire signed [15:0] a649;
   wire signed [15:0] a651;
   wire signed [15:0] a652;
   wire signed [15:0] a653;
   wire signed [15:0] a661;
   wire signed [15:0] a663;
   wire signed [15:0] a664;
   wire signed [15:0] a665;
   wire signed [15:0] a673;
   wire signed [15:0] a675;
   wire signed [15:0] a676;
   wire signed [15:0] a677;
   wire signed [15:0] a685;
   wire signed [15:0] a687;
   wire signed [15:0] a688;
   wire signed [15:0] a689;
   reg signed [15:0] tm1343;
   reg signed [15:0] tm1350;
   reg signed [15:0] tm1357;
   reg signed [15:0] tm1364;
   reg signed [15:0] tm1371;
   reg signed [15:0] tm1378;
   reg signed [15:0] tm1385;
   reg signed [15:0] tm1392;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1344;
   reg signed [15:0] tm1351;
   reg signed [15:0] tm1358;
   reg signed [15:0] tm1365;
   reg signed [15:0] tm1372;
   reg signed [15:0] tm1379;
   reg signed [15:0] tm1386;
   reg signed [15:0] tm1393;


   assign a690 = X0;
   assign a643 = a690;
   assign a693 = X1;
   assign a647 = a693;
   assign a694 = X2;
   assign a695 = X3;
   assign a698 = X4;
   assign a655 = a698;
   assign a701 = X5;
   assign a659 = a701;
   assign a702 = X6;
   assign a703 = X7;
   assign a706 = X8;
   assign a667 = a706;
   assign a709 = X9;
   assign a671 = a709;
   assign a710 = X10;
   assign a711 = X11;
   assign a714 = X12;
   assign a679 = a714;
   assign a717 = X13;
   assign a683 = a717;
   assign a718 = X14;
   assign a719 = X15;
   assign a648 = tm76;
   assign a650 = tm77;
   assign a660 = tm80;
   assign a662 = tm81;
   assign a672 = tm84;
   assign a674 = tm85;
   assign a684 = tm88;
   assign a686 = tm89;
   assign Y0 = tm1344;
   assign Y1 = tm1351;
   assign Y4 = tm1358;
   assign Y5 = tm1365;
   assign Y8 = tm1372;
   assign Y9 = tm1379;
   assign Y12 = tm1386;
   assign Y13 = tm1393;

   D40_65651 instD40inst0_65651(.addr(i3[4:0]), .out(tm88), .clk(clk));

   D38_65753 instD38inst0_65753(.addr(i3[4:0]), .out(tm84), .clk(clk));

   D42_65787 instD42inst0_65787(.addr(i3[4:0]), .out(tm77), .clk(clk));

   D36_65889 instD36inst0_65889(.addr(i3[4:0]), .out(tm80), .clk(clk));

   D44_65923 instD44inst0_65923(.addr(i3[4:0]), .out(tm81), .clk(clk));

   D34_66025 instD34inst0_66025(.addr(i3[4:0]), .out(tm76), .clk(clk));

   D46_66093 instD46inst0_66093(.addr(i3[4:0]), .out(tm85), .clk(clk));

   D48_66161 instD48inst0_66161(.addr(i3[4:0]), .out(tm89), .clk(clk));

    multfix #(16, 2) m65076(.a(tm257), .b(tm1277), .clk(clk), .q_sc(a649), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65098(.a(tm258), .b(tm1281), .clk(clk), .q_sc(a651), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65116(.a(tm258), .b(tm1277), .clk(clk), .q_sc(a652), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65127(.a(tm257), .b(tm1281), .clk(clk), .q_sc(a653), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65236(.a(tm265), .b(tm1293), .clk(clk), .q_sc(a661), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65258(.a(tm266), .b(tm1297), .clk(clk), .q_sc(a663), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65276(.a(tm266), .b(tm1293), .clk(clk), .q_sc(a664), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65287(.a(tm265), .b(tm1297), .clk(clk), .q_sc(a665), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65396(.a(tm273), .b(tm1309), .clk(clk), .q_sc(a673), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65418(.a(tm274), .b(tm1313), .clk(clk), .q_sc(a675), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65436(.a(tm274), .b(tm1309), .clk(clk), .q_sc(a676), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65447(.a(tm273), .b(tm1313), .clk(clk), .q_sc(a677), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65556(.a(tm281), .b(tm1325), .clk(clk), .q_sc(a685), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65578(.a(tm282), .b(tm1329), .clk(clk), .q_sc(a687), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65596(.a(tm282), .b(tm1325), .clk(clk), .q_sc(a688), .q_unsc(), .rst(reset));
    multfix #(16, 2) m65607(.a(tm281), .b(tm1329), .clk(clk), .q_sc(a689), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub65105(.a(a649), .b(a651), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add65134(.a(a652), .b(a653), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub65265(.a(a661), .b(a663), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add65294(.a(a664), .b(a665), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub65425(.a(a673), .b(a675), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add65454(.a(a676), .b(a677), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub65585(.a(a685), .b(a687), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add65614(.a(a688), .b(a689), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm257 <= 0;
         tm1277 <= 0;
         tm258 <= 0;
         tm1281 <= 0;
         tm258 <= 0;
         tm1277 <= 0;
         tm257 <= 0;
         tm1281 <= 0;
         tm265 <= 0;
         tm1293 <= 0;
         tm266 <= 0;
         tm1297 <= 0;
         tm266 <= 0;
         tm1293 <= 0;
         tm265 <= 0;
         tm1297 <= 0;
         tm273 <= 0;
         tm1309 <= 0;
         tm274 <= 0;
         tm1313 <= 0;
         tm274 <= 0;
         tm1309 <= 0;
         tm273 <= 0;
         tm1313 <= 0;
         tm281 <= 0;
         tm1325 <= 0;
         tm282 <= 0;
         tm1329 <= 0;
         tm282 <= 0;
         tm1325 <= 0;
         tm281 <= 0;
         tm1329 <= 0;
      end
      else begin
         i3 <= i3_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1274 <= a694;
         tm1278 <= a695;
         tm1290 <= a702;
         tm1294 <= a703;
         tm1306 <= a710;
         tm1310 <= a711;
         tm1322 <= a718;
         tm1326 <= a719;
         tm1338 <= a643;
         tm1345 <= a647;
         tm1352 <= a655;
         tm1359 <= a659;
         tm1366 <= a667;
         tm1373 <= a671;
         tm1380 <= a679;
         tm1387 <= a683;
         tm1275 <= tm1274;
         tm1279 <= tm1278;
         tm1291 <= tm1290;
         tm1295 <= tm1294;
         tm1307 <= tm1306;
         tm1311 <= tm1310;
         tm1323 <= tm1322;
         tm1327 <= tm1326;
         tm1339 <= tm1338;
         tm1346 <= tm1345;
         tm1353 <= tm1352;
         tm1360 <= tm1359;
         tm1367 <= tm1366;
         tm1374 <= tm1373;
         tm1381 <= tm1380;
         tm1388 <= tm1387;
         tm1276 <= tm1275;
         tm1280 <= tm1279;
         tm1292 <= tm1291;
         tm1296 <= tm1295;
         tm1308 <= tm1307;
         tm1312 <= tm1311;
         tm1324 <= tm1323;
         tm1328 <= tm1327;
         tm1340 <= tm1339;
         tm1347 <= tm1346;
         tm1354 <= tm1353;
         tm1361 <= tm1360;
         tm1368 <= tm1367;
         tm1375 <= tm1374;
         tm1382 <= tm1381;
         tm1389 <= tm1388;
         tm257 <= a648;
         tm258 <= a650;
         tm265 <= a660;
         tm266 <= a662;
         tm273 <= a672;
         tm274 <= a674;
         tm281 <= a684;
         tm282 <= a686;
         tm1277 <= tm1276;
         tm1281 <= tm1280;
         tm1293 <= tm1292;
         tm1297 <= tm1296;
         tm1309 <= tm1308;
         tm1313 <= tm1312;
         tm1325 <= tm1324;
         tm1329 <= tm1328;
         tm1341 <= tm1340;
         tm1348 <= tm1347;
         tm1355 <= tm1354;
         tm1362 <= tm1361;
         tm1369 <= tm1368;
         tm1376 <= tm1375;
         tm1383 <= tm1382;
         tm1390 <= tm1389;
         tm1342 <= tm1341;
         tm1349 <= tm1348;
         tm1356 <= tm1355;
         tm1363 <= tm1362;
         tm1370 <= tm1369;
         tm1377 <= tm1376;
         tm1384 <= tm1383;
         tm1391 <= tm1390;
         tm1343 <= tm1342;
         tm1350 <= tm1349;
         tm1357 <= tm1356;
         tm1364 <= tm1363;
         tm1371 <= tm1370;
         tm1378 <= tm1377;
         tm1385 <= tm1384;
         tm1392 <= tm1391;
         tm1344 <= tm1343;
         tm1351 <= tm1350;
         tm1358 <= tm1357;
         tm1365 <= tm1364;
         tm1372 <= tm1371;
         tm1379 <= tm1378;
         tm1386 <= tm1385;
         tm1393 <= tm1392;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock66166(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76766(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a514;
   wire signed [15:0] a515;
   wire signed [15:0] a516;
   wire signed [15:0] a517;
   wire signed [15:0] a522;
   wire signed [15:0] a523;
   wire signed [15:0] a524;
   wire signed [15:0] a525;
   wire signed [15:0] a530;
   wire signed [15:0] a531;
   wire signed [15:0] a532;
   wire signed [15:0] a533;
   wire signed [15:0] a538;
   wire signed [15:0] a539;
   wire signed [15:0] a540;
   wire signed [15:0] a541;
   wire signed [15:0] t297;
   wire signed [15:0] t298;
   wire signed [15:0] t299;
   wire signed [15:0] t300;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t301;
   wire signed [15:0] t302;
   wire signed [15:0] t303;
   wire signed [15:0] t304;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t305;
   wire signed [15:0] t306;
   wire signed [15:0] t307;
   wire signed [15:0] t308;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t309;
   wire signed [15:0] t310;
   wire signed [15:0] t311;
   wire signed [15:0] t312;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a514 = X0;
   assign a515 = X2;
   assign a516 = X1;
   assign a517 = X3;
   assign a522 = X4;
   assign a523 = X6;
   assign a524 = X5;
   assign a525 = X7;
   assign a530 = X8;
   assign a531 = X10;
   assign a532 = X9;
   assign a533 = X11;
   assign a538 = X12;
   assign a539 = X14;
   assign a540 = X13;
   assign a541 = X15;
   assign Y0 = t297;
   assign Y1 = t298;
   assign Y2 = t299;
   assign Y3 = t300;
   assign Y4 = t301;
   assign Y5 = t302;
   assign Y6 = t303;
   assign Y7 = t304;
   assign Y8 = t305;
   assign Y9 = t306;
   assign Y10 = t307;
   assign Y11 = t308;
   assign Y12 = t309;
   assign Y13 = t310;
   assign Y14 = t311;
   assign Y15 = t312;

    addfxp #(16, 1) add66178(.a(a514), .b(a515), .clk(clk), .q(t297));    // 0
    addfxp #(16, 1) add66193(.a(a516), .b(a517), .clk(clk), .q(t298));    // 0
    subfxp #(16, 1) sub66208(.a(a514), .b(a515), .clk(clk), .q(t299));    // 0
    subfxp #(16, 1) sub66223(.a(a516), .b(a517), .clk(clk), .q(t300));    // 0
    addfxp #(16, 1) add66254(.a(a522), .b(a523), .clk(clk), .q(t301));    // 0
    addfxp #(16, 1) add66269(.a(a524), .b(a525), .clk(clk), .q(t302));    // 0
    subfxp #(16, 1) sub66284(.a(a522), .b(a523), .clk(clk), .q(t303));    // 0
    subfxp #(16, 1) sub66299(.a(a524), .b(a525), .clk(clk), .q(t304));    // 0
    addfxp #(16, 1) add66330(.a(a530), .b(a531), .clk(clk), .q(t305));    // 0
    addfxp #(16, 1) add66345(.a(a532), .b(a533), .clk(clk), .q(t306));    // 0
    subfxp #(16, 1) sub66360(.a(a530), .b(a531), .clk(clk), .q(t307));    // 0
    subfxp #(16, 1) sub66375(.a(a532), .b(a533), .clk(clk), .q(t308));    // 0
    addfxp #(16, 1) add66406(.a(a538), .b(a539), .clk(clk), .q(t309));    // 0
    addfxp #(16, 1) add66421(.a(a540), .b(a541), .clk(clk), .q(t310));    // 0
    subfxp #(16, 1) sub66436(.a(a538), .b(a539), .clk(clk), .q(t311));    // 0
    subfxp #(16, 1) sub66451(.a(a540), .b(a541), .clk(clk), .q(t312));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 134
// Gap: 64
module rc66476(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm66474 instPerm76767(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet66474(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [5:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        6'd0: control <= 4'b1111;
        6'd1: control <= 4'b1111;
        6'd2: control <= 4'b1111;
        6'd3: control <= 4'b1111;
        6'd4: control <= 4'b1111;
        6'd5: control <= 4'b1111;
        6'd6: control <= 4'b1111;
        6'd7: control <= 4'b1111;
        6'd8: control <= 4'b1111;
        6'd9: control <= 4'b1111;
        6'd10: control <= 4'b1111;
        6'd11: control <= 4'b1111;
        6'd12: control <= 4'b1111;
        6'd13: control <= 4'b1111;
        6'd14: control <= 4'b1111;
        6'd15: control <= 4'b1111;
        6'd16: control <= 4'b1111;
        6'd17: control <= 4'b1111;
        6'd18: control <= 4'b1111;
        6'd19: control <= 4'b1111;
        6'd20: control <= 4'b1111;
        6'd21: control <= 4'b1111;
        6'd22: control <= 4'b1111;
        6'd23: control <= 4'b1111;
        6'd24: control <= 4'b1111;
        6'd25: control <= 4'b1111;
        6'd26: control <= 4'b1111;
        6'd27: control <= 4'b1111;
        6'd28: control <= 4'b1111;
        6'd29: control <= 4'b1111;
        6'd30: control <= 4'b1111;
        6'd31: control <= 4'b1111;
        6'd32: control <= 4'b0000;
        6'd33: control <= 4'b0000;
        6'd34: control <= 4'b0000;
        6'd35: control <= 4'b0000;
        6'd36: control <= 4'b0000;
        6'd37: control <= 4'b0000;
        6'd38: control <= 4'b0000;
        6'd39: control <= 4'b0000;
        6'd40: control <= 4'b0000;
        6'd41: control <= 4'b0000;
        6'd42: control <= 4'b0000;
        6'd43: control <= 4'b0000;
        6'd44: control <= 4'b0000;
        6'd45: control <= 4'b0000;
        6'd46: control <= 4'b0000;
        6'd47: control <= 4'b0000;
        6'd48: control <= 4'b0000;
        6'd49: control <= 4'b0000;
        6'd50: control <= 4'b0000;
        6'd51: control <= 4'b0000;
        6'd52: control <= 4'b0000;
        6'd53: control <= 4'b0000;
        6'd54: control <= 4'b0000;
        6'd55: control <= 4'b0000;
        6'd56: control <= 4'b0000;
        6'd57: control <= 4'b0000;
        6'd58: control <= 4'b0000;
        6'd59: control <= 4'b0000;
        6'd60: control <= 4'b0000;
        6'd61: control <= 4'b0000;
        6'd62: control <= 4'b0000;
        6'd63: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 134
// Gap: 64
module perm66474(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 64;

   parameter addrbits = 6;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm90;
   assign tm90 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76772(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76773(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(63, 6) nextReg_76784(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76785(.X(next2), .Y(next3), .clk(clk));
nextReg #(64, 6) nextReg_76788(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76789(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(63, 1) shiftFIFO_76792(.X(tm90), .Y(tm90_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76795(.X(tm90_d), .Y(tm90_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 6) shiftFIFO_76800(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd0 <= 32;
	     {1'd0,  6'd1}: s1rd0 <= 33;
	     {1'd0,  6'd2}: s1rd0 <= 34;
	     {1'd0,  6'd3}: s1rd0 <= 35;
	     {1'd0,  6'd4}: s1rd0 <= 36;
	     {1'd0,  6'd5}: s1rd0 <= 37;
	     {1'd0,  6'd6}: s1rd0 <= 38;
	     {1'd0,  6'd7}: s1rd0 <= 39;
	     {1'd0,  6'd8}: s1rd0 <= 40;
	     {1'd0,  6'd9}: s1rd0 <= 41;
	     {1'd0,  6'd10}: s1rd0 <= 42;
	     {1'd0,  6'd11}: s1rd0 <= 43;
	     {1'd0,  6'd12}: s1rd0 <= 44;
	     {1'd0,  6'd13}: s1rd0 <= 45;
	     {1'd0,  6'd14}: s1rd0 <= 46;
	     {1'd0,  6'd15}: s1rd0 <= 47;
	     {1'd0,  6'd16}: s1rd0 <= 48;
	     {1'd0,  6'd17}: s1rd0 <= 49;
	     {1'd0,  6'd18}: s1rd0 <= 50;
	     {1'd0,  6'd19}: s1rd0 <= 51;
	     {1'd0,  6'd20}: s1rd0 <= 52;
	     {1'd0,  6'd21}: s1rd0 <= 53;
	     {1'd0,  6'd22}: s1rd0 <= 54;
	     {1'd0,  6'd23}: s1rd0 <= 55;
	     {1'd0,  6'd24}: s1rd0 <= 56;
	     {1'd0,  6'd25}: s1rd0 <= 57;
	     {1'd0,  6'd26}: s1rd0 <= 58;
	     {1'd0,  6'd27}: s1rd0 <= 59;
	     {1'd0,  6'd28}: s1rd0 <= 60;
	     {1'd0,  6'd29}: s1rd0 <= 61;
	     {1'd0,  6'd30}: s1rd0 <= 62;
	     {1'd0,  6'd31}: s1rd0 <= 63;
	     {1'd0,  6'd32}: s1rd0 <= 0;
	     {1'd0,  6'd33}: s1rd0 <= 1;
	     {1'd0,  6'd34}: s1rd0 <= 2;
	     {1'd0,  6'd35}: s1rd0 <= 3;
	     {1'd0,  6'd36}: s1rd0 <= 4;
	     {1'd0,  6'd37}: s1rd0 <= 5;
	     {1'd0,  6'd38}: s1rd0 <= 6;
	     {1'd0,  6'd39}: s1rd0 <= 7;
	     {1'd0,  6'd40}: s1rd0 <= 8;
	     {1'd0,  6'd41}: s1rd0 <= 9;
	     {1'd0,  6'd42}: s1rd0 <= 10;
	     {1'd0,  6'd43}: s1rd0 <= 11;
	     {1'd0,  6'd44}: s1rd0 <= 12;
	     {1'd0,  6'd45}: s1rd0 <= 13;
	     {1'd0,  6'd46}: s1rd0 <= 14;
	     {1'd0,  6'd47}: s1rd0 <= 15;
	     {1'd0,  6'd48}: s1rd0 <= 16;
	     {1'd0,  6'd49}: s1rd0 <= 17;
	     {1'd0,  6'd50}: s1rd0 <= 18;
	     {1'd0,  6'd51}: s1rd0 <= 19;
	     {1'd0,  6'd52}: s1rd0 <= 20;
	     {1'd0,  6'd53}: s1rd0 <= 21;
	     {1'd0,  6'd54}: s1rd0 <= 22;
	     {1'd0,  6'd55}: s1rd0 <= 23;
	     {1'd0,  6'd56}: s1rd0 <= 24;
	     {1'd0,  6'd57}: s1rd0 <= 25;
	     {1'd0,  6'd58}: s1rd0 <= 26;
	     {1'd0,  6'd59}: s1rd0 <= 27;
	     {1'd0,  6'd60}: s1rd0 <= 28;
	     {1'd0,  6'd61}: s1rd0 <= 29;
	     {1'd0,  6'd62}: s1rd0 <= 30;
	     {1'd0,  6'd63}: s1rd0 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd1 <= 0;
	     {1'd0,  6'd1}: s1rd1 <= 1;
	     {1'd0,  6'd2}: s1rd1 <= 2;
	     {1'd0,  6'd3}: s1rd1 <= 3;
	     {1'd0,  6'd4}: s1rd1 <= 4;
	     {1'd0,  6'd5}: s1rd1 <= 5;
	     {1'd0,  6'd6}: s1rd1 <= 6;
	     {1'd0,  6'd7}: s1rd1 <= 7;
	     {1'd0,  6'd8}: s1rd1 <= 8;
	     {1'd0,  6'd9}: s1rd1 <= 9;
	     {1'd0,  6'd10}: s1rd1 <= 10;
	     {1'd0,  6'd11}: s1rd1 <= 11;
	     {1'd0,  6'd12}: s1rd1 <= 12;
	     {1'd0,  6'd13}: s1rd1 <= 13;
	     {1'd0,  6'd14}: s1rd1 <= 14;
	     {1'd0,  6'd15}: s1rd1 <= 15;
	     {1'd0,  6'd16}: s1rd1 <= 16;
	     {1'd0,  6'd17}: s1rd1 <= 17;
	     {1'd0,  6'd18}: s1rd1 <= 18;
	     {1'd0,  6'd19}: s1rd1 <= 19;
	     {1'd0,  6'd20}: s1rd1 <= 20;
	     {1'd0,  6'd21}: s1rd1 <= 21;
	     {1'd0,  6'd22}: s1rd1 <= 22;
	     {1'd0,  6'd23}: s1rd1 <= 23;
	     {1'd0,  6'd24}: s1rd1 <= 24;
	     {1'd0,  6'd25}: s1rd1 <= 25;
	     {1'd0,  6'd26}: s1rd1 <= 26;
	     {1'd0,  6'd27}: s1rd1 <= 27;
	     {1'd0,  6'd28}: s1rd1 <= 28;
	     {1'd0,  6'd29}: s1rd1 <= 29;
	     {1'd0,  6'd30}: s1rd1 <= 30;
	     {1'd0,  6'd31}: s1rd1 <= 31;
	     {1'd0,  6'd32}: s1rd1 <= 32;
	     {1'd0,  6'd33}: s1rd1 <= 33;
	     {1'd0,  6'd34}: s1rd1 <= 34;
	     {1'd0,  6'd35}: s1rd1 <= 35;
	     {1'd0,  6'd36}: s1rd1 <= 36;
	     {1'd0,  6'd37}: s1rd1 <= 37;
	     {1'd0,  6'd38}: s1rd1 <= 38;
	     {1'd0,  6'd39}: s1rd1 <= 39;
	     {1'd0,  6'd40}: s1rd1 <= 40;
	     {1'd0,  6'd41}: s1rd1 <= 41;
	     {1'd0,  6'd42}: s1rd1 <= 42;
	     {1'd0,  6'd43}: s1rd1 <= 43;
	     {1'd0,  6'd44}: s1rd1 <= 44;
	     {1'd0,  6'd45}: s1rd1 <= 45;
	     {1'd0,  6'd46}: s1rd1 <= 46;
	     {1'd0,  6'd47}: s1rd1 <= 47;
	     {1'd0,  6'd48}: s1rd1 <= 48;
	     {1'd0,  6'd49}: s1rd1 <= 49;
	     {1'd0,  6'd50}: s1rd1 <= 50;
	     {1'd0,  6'd51}: s1rd1 <= 51;
	     {1'd0,  6'd52}: s1rd1 <= 52;
	     {1'd0,  6'd53}: s1rd1 <= 53;
	     {1'd0,  6'd54}: s1rd1 <= 54;
	     {1'd0,  6'd55}: s1rd1 <= 55;
	     {1'd0,  6'd56}: s1rd1 <= 56;
	     {1'd0,  6'd57}: s1rd1 <= 57;
	     {1'd0,  6'd58}: s1rd1 <= 58;
	     {1'd0,  6'd59}: s1rd1 <= 59;
	     {1'd0,  6'd60}: s1rd1 <= 60;
	     {1'd0,  6'd61}: s1rd1 <= 61;
	     {1'd0,  6'd62}: s1rd1 <= 62;
	     {1'd0,  6'd63}: s1rd1 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd2 <= 32;
	     {1'd0,  6'd1}: s1rd2 <= 33;
	     {1'd0,  6'd2}: s1rd2 <= 34;
	     {1'd0,  6'd3}: s1rd2 <= 35;
	     {1'd0,  6'd4}: s1rd2 <= 36;
	     {1'd0,  6'd5}: s1rd2 <= 37;
	     {1'd0,  6'd6}: s1rd2 <= 38;
	     {1'd0,  6'd7}: s1rd2 <= 39;
	     {1'd0,  6'd8}: s1rd2 <= 40;
	     {1'd0,  6'd9}: s1rd2 <= 41;
	     {1'd0,  6'd10}: s1rd2 <= 42;
	     {1'd0,  6'd11}: s1rd2 <= 43;
	     {1'd0,  6'd12}: s1rd2 <= 44;
	     {1'd0,  6'd13}: s1rd2 <= 45;
	     {1'd0,  6'd14}: s1rd2 <= 46;
	     {1'd0,  6'd15}: s1rd2 <= 47;
	     {1'd0,  6'd16}: s1rd2 <= 48;
	     {1'd0,  6'd17}: s1rd2 <= 49;
	     {1'd0,  6'd18}: s1rd2 <= 50;
	     {1'd0,  6'd19}: s1rd2 <= 51;
	     {1'd0,  6'd20}: s1rd2 <= 52;
	     {1'd0,  6'd21}: s1rd2 <= 53;
	     {1'd0,  6'd22}: s1rd2 <= 54;
	     {1'd0,  6'd23}: s1rd2 <= 55;
	     {1'd0,  6'd24}: s1rd2 <= 56;
	     {1'd0,  6'd25}: s1rd2 <= 57;
	     {1'd0,  6'd26}: s1rd2 <= 58;
	     {1'd0,  6'd27}: s1rd2 <= 59;
	     {1'd0,  6'd28}: s1rd2 <= 60;
	     {1'd0,  6'd29}: s1rd2 <= 61;
	     {1'd0,  6'd30}: s1rd2 <= 62;
	     {1'd0,  6'd31}: s1rd2 <= 63;
	     {1'd0,  6'd32}: s1rd2 <= 0;
	     {1'd0,  6'd33}: s1rd2 <= 1;
	     {1'd0,  6'd34}: s1rd2 <= 2;
	     {1'd0,  6'd35}: s1rd2 <= 3;
	     {1'd0,  6'd36}: s1rd2 <= 4;
	     {1'd0,  6'd37}: s1rd2 <= 5;
	     {1'd0,  6'd38}: s1rd2 <= 6;
	     {1'd0,  6'd39}: s1rd2 <= 7;
	     {1'd0,  6'd40}: s1rd2 <= 8;
	     {1'd0,  6'd41}: s1rd2 <= 9;
	     {1'd0,  6'd42}: s1rd2 <= 10;
	     {1'd0,  6'd43}: s1rd2 <= 11;
	     {1'd0,  6'd44}: s1rd2 <= 12;
	     {1'd0,  6'd45}: s1rd2 <= 13;
	     {1'd0,  6'd46}: s1rd2 <= 14;
	     {1'd0,  6'd47}: s1rd2 <= 15;
	     {1'd0,  6'd48}: s1rd2 <= 16;
	     {1'd0,  6'd49}: s1rd2 <= 17;
	     {1'd0,  6'd50}: s1rd2 <= 18;
	     {1'd0,  6'd51}: s1rd2 <= 19;
	     {1'd0,  6'd52}: s1rd2 <= 20;
	     {1'd0,  6'd53}: s1rd2 <= 21;
	     {1'd0,  6'd54}: s1rd2 <= 22;
	     {1'd0,  6'd55}: s1rd2 <= 23;
	     {1'd0,  6'd56}: s1rd2 <= 24;
	     {1'd0,  6'd57}: s1rd2 <= 25;
	     {1'd0,  6'd58}: s1rd2 <= 26;
	     {1'd0,  6'd59}: s1rd2 <= 27;
	     {1'd0,  6'd60}: s1rd2 <= 28;
	     {1'd0,  6'd61}: s1rd2 <= 29;
	     {1'd0,  6'd62}: s1rd2 <= 30;
	     {1'd0,  6'd63}: s1rd2 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd3 <= 0;
	     {1'd0,  6'd1}: s1rd3 <= 1;
	     {1'd0,  6'd2}: s1rd3 <= 2;
	     {1'd0,  6'd3}: s1rd3 <= 3;
	     {1'd0,  6'd4}: s1rd3 <= 4;
	     {1'd0,  6'd5}: s1rd3 <= 5;
	     {1'd0,  6'd6}: s1rd3 <= 6;
	     {1'd0,  6'd7}: s1rd3 <= 7;
	     {1'd0,  6'd8}: s1rd3 <= 8;
	     {1'd0,  6'd9}: s1rd3 <= 9;
	     {1'd0,  6'd10}: s1rd3 <= 10;
	     {1'd0,  6'd11}: s1rd3 <= 11;
	     {1'd0,  6'd12}: s1rd3 <= 12;
	     {1'd0,  6'd13}: s1rd3 <= 13;
	     {1'd0,  6'd14}: s1rd3 <= 14;
	     {1'd0,  6'd15}: s1rd3 <= 15;
	     {1'd0,  6'd16}: s1rd3 <= 16;
	     {1'd0,  6'd17}: s1rd3 <= 17;
	     {1'd0,  6'd18}: s1rd3 <= 18;
	     {1'd0,  6'd19}: s1rd3 <= 19;
	     {1'd0,  6'd20}: s1rd3 <= 20;
	     {1'd0,  6'd21}: s1rd3 <= 21;
	     {1'd0,  6'd22}: s1rd3 <= 22;
	     {1'd0,  6'd23}: s1rd3 <= 23;
	     {1'd0,  6'd24}: s1rd3 <= 24;
	     {1'd0,  6'd25}: s1rd3 <= 25;
	     {1'd0,  6'd26}: s1rd3 <= 26;
	     {1'd0,  6'd27}: s1rd3 <= 27;
	     {1'd0,  6'd28}: s1rd3 <= 28;
	     {1'd0,  6'd29}: s1rd3 <= 29;
	     {1'd0,  6'd30}: s1rd3 <= 30;
	     {1'd0,  6'd31}: s1rd3 <= 31;
	     {1'd0,  6'd32}: s1rd3 <= 32;
	     {1'd0,  6'd33}: s1rd3 <= 33;
	     {1'd0,  6'd34}: s1rd3 <= 34;
	     {1'd0,  6'd35}: s1rd3 <= 35;
	     {1'd0,  6'd36}: s1rd3 <= 36;
	     {1'd0,  6'd37}: s1rd3 <= 37;
	     {1'd0,  6'd38}: s1rd3 <= 38;
	     {1'd0,  6'd39}: s1rd3 <= 39;
	     {1'd0,  6'd40}: s1rd3 <= 40;
	     {1'd0,  6'd41}: s1rd3 <= 41;
	     {1'd0,  6'd42}: s1rd3 <= 42;
	     {1'd0,  6'd43}: s1rd3 <= 43;
	     {1'd0,  6'd44}: s1rd3 <= 44;
	     {1'd0,  6'd45}: s1rd3 <= 45;
	     {1'd0,  6'd46}: s1rd3 <= 46;
	     {1'd0,  6'd47}: s1rd3 <= 47;
	     {1'd0,  6'd48}: s1rd3 <= 48;
	     {1'd0,  6'd49}: s1rd3 <= 49;
	     {1'd0,  6'd50}: s1rd3 <= 50;
	     {1'd0,  6'd51}: s1rd3 <= 51;
	     {1'd0,  6'd52}: s1rd3 <= 52;
	     {1'd0,  6'd53}: s1rd3 <= 53;
	     {1'd0,  6'd54}: s1rd3 <= 54;
	     {1'd0,  6'd55}: s1rd3 <= 55;
	     {1'd0,  6'd56}: s1rd3 <= 56;
	     {1'd0,  6'd57}: s1rd3 <= 57;
	     {1'd0,  6'd58}: s1rd3 <= 58;
	     {1'd0,  6'd59}: s1rd3 <= 59;
	     {1'd0,  6'd60}: s1rd3 <= 60;
	     {1'd0,  6'd61}: s1rd3 <= 61;
	     {1'd0,  6'd62}: s1rd3 <= 62;
	     {1'd0,  6'd63}: s1rd3 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd4 <= 32;
	     {1'd0,  6'd1}: s1rd4 <= 33;
	     {1'd0,  6'd2}: s1rd4 <= 34;
	     {1'd0,  6'd3}: s1rd4 <= 35;
	     {1'd0,  6'd4}: s1rd4 <= 36;
	     {1'd0,  6'd5}: s1rd4 <= 37;
	     {1'd0,  6'd6}: s1rd4 <= 38;
	     {1'd0,  6'd7}: s1rd4 <= 39;
	     {1'd0,  6'd8}: s1rd4 <= 40;
	     {1'd0,  6'd9}: s1rd4 <= 41;
	     {1'd0,  6'd10}: s1rd4 <= 42;
	     {1'd0,  6'd11}: s1rd4 <= 43;
	     {1'd0,  6'd12}: s1rd4 <= 44;
	     {1'd0,  6'd13}: s1rd4 <= 45;
	     {1'd0,  6'd14}: s1rd4 <= 46;
	     {1'd0,  6'd15}: s1rd4 <= 47;
	     {1'd0,  6'd16}: s1rd4 <= 48;
	     {1'd0,  6'd17}: s1rd4 <= 49;
	     {1'd0,  6'd18}: s1rd4 <= 50;
	     {1'd0,  6'd19}: s1rd4 <= 51;
	     {1'd0,  6'd20}: s1rd4 <= 52;
	     {1'd0,  6'd21}: s1rd4 <= 53;
	     {1'd0,  6'd22}: s1rd4 <= 54;
	     {1'd0,  6'd23}: s1rd4 <= 55;
	     {1'd0,  6'd24}: s1rd4 <= 56;
	     {1'd0,  6'd25}: s1rd4 <= 57;
	     {1'd0,  6'd26}: s1rd4 <= 58;
	     {1'd0,  6'd27}: s1rd4 <= 59;
	     {1'd0,  6'd28}: s1rd4 <= 60;
	     {1'd0,  6'd29}: s1rd4 <= 61;
	     {1'd0,  6'd30}: s1rd4 <= 62;
	     {1'd0,  6'd31}: s1rd4 <= 63;
	     {1'd0,  6'd32}: s1rd4 <= 0;
	     {1'd0,  6'd33}: s1rd4 <= 1;
	     {1'd0,  6'd34}: s1rd4 <= 2;
	     {1'd0,  6'd35}: s1rd4 <= 3;
	     {1'd0,  6'd36}: s1rd4 <= 4;
	     {1'd0,  6'd37}: s1rd4 <= 5;
	     {1'd0,  6'd38}: s1rd4 <= 6;
	     {1'd0,  6'd39}: s1rd4 <= 7;
	     {1'd0,  6'd40}: s1rd4 <= 8;
	     {1'd0,  6'd41}: s1rd4 <= 9;
	     {1'd0,  6'd42}: s1rd4 <= 10;
	     {1'd0,  6'd43}: s1rd4 <= 11;
	     {1'd0,  6'd44}: s1rd4 <= 12;
	     {1'd0,  6'd45}: s1rd4 <= 13;
	     {1'd0,  6'd46}: s1rd4 <= 14;
	     {1'd0,  6'd47}: s1rd4 <= 15;
	     {1'd0,  6'd48}: s1rd4 <= 16;
	     {1'd0,  6'd49}: s1rd4 <= 17;
	     {1'd0,  6'd50}: s1rd4 <= 18;
	     {1'd0,  6'd51}: s1rd4 <= 19;
	     {1'd0,  6'd52}: s1rd4 <= 20;
	     {1'd0,  6'd53}: s1rd4 <= 21;
	     {1'd0,  6'd54}: s1rd4 <= 22;
	     {1'd0,  6'd55}: s1rd4 <= 23;
	     {1'd0,  6'd56}: s1rd4 <= 24;
	     {1'd0,  6'd57}: s1rd4 <= 25;
	     {1'd0,  6'd58}: s1rd4 <= 26;
	     {1'd0,  6'd59}: s1rd4 <= 27;
	     {1'd0,  6'd60}: s1rd4 <= 28;
	     {1'd0,  6'd61}: s1rd4 <= 29;
	     {1'd0,  6'd62}: s1rd4 <= 30;
	     {1'd0,  6'd63}: s1rd4 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd5 <= 0;
	     {1'd0,  6'd1}: s1rd5 <= 1;
	     {1'd0,  6'd2}: s1rd5 <= 2;
	     {1'd0,  6'd3}: s1rd5 <= 3;
	     {1'd0,  6'd4}: s1rd5 <= 4;
	     {1'd0,  6'd5}: s1rd5 <= 5;
	     {1'd0,  6'd6}: s1rd5 <= 6;
	     {1'd0,  6'd7}: s1rd5 <= 7;
	     {1'd0,  6'd8}: s1rd5 <= 8;
	     {1'd0,  6'd9}: s1rd5 <= 9;
	     {1'd0,  6'd10}: s1rd5 <= 10;
	     {1'd0,  6'd11}: s1rd5 <= 11;
	     {1'd0,  6'd12}: s1rd5 <= 12;
	     {1'd0,  6'd13}: s1rd5 <= 13;
	     {1'd0,  6'd14}: s1rd5 <= 14;
	     {1'd0,  6'd15}: s1rd5 <= 15;
	     {1'd0,  6'd16}: s1rd5 <= 16;
	     {1'd0,  6'd17}: s1rd5 <= 17;
	     {1'd0,  6'd18}: s1rd5 <= 18;
	     {1'd0,  6'd19}: s1rd5 <= 19;
	     {1'd0,  6'd20}: s1rd5 <= 20;
	     {1'd0,  6'd21}: s1rd5 <= 21;
	     {1'd0,  6'd22}: s1rd5 <= 22;
	     {1'd0,  6'd23}: s1rd5 <= 23;
	     {1'd0,  6'd24}: s1rd5 <= 24;
	     {1'd0,  6'd25}: s1rd5 <= 25;
	     {1'd0,  6'd26}: s1rd5 <= 26;
	     {1'd0,  6'd27}: s1rd5 <= 27;
	     {1'd0,  6'd28}: s1rd5 <= 28;
	     {1'd0,  6'd29}: s1rd5 <= 29;
	     {1'd0,  6'd30}: s1rd5 <= 30;
	     {1'd0,  6'd31}: s1rd5 <= 31;
	     {1'd0,  6'd32}: s1rd5 <= 32;
	     {1'd0,  6'd33}: s1rd5 <= 33;
	     {1'd0,  6'd34}: s1rd5 <= 34;
	     {1'd0,  6'd35}: s1rd5 <= 35;
	     {1'd0,  6'd36}: s1rd5 <= 36;
	     {1'd0,  6'd37}: s1rd5 <= 37;
	     {1'd0,  6'd38}: s1rd5 <= 38;
	     {1'd0,  6'd39}: s1rd5 <= 39;
	     {1'd0,  6'd40}: s1rd5 <= 40;
	     {1'd0,  6'd41}: s1rd5 <= 41;
	     {1'd0,  6'd42}: s1rd5 <= 42;
	     {1'd0,  6'd43}: s1rd5 <= 43;
	     {1'd0,  6'd44}: s1rd5 <= 44;
	     {1'd0,  6'd45}: s1rd5 <= 45;
	     {1'd0,  6'd46}: s1rd5 <= 46;
	     {1'd0,  6'd47}: s1rd5 <= 47;
	     {1'd0,  6'd48}: s1rd5 <= 48;
	     {1'd0,  6'd49}: s1rd5 <= 49;
	     {1'd0,  6'd50}: s1rd5 <= 50;
	     {1'd0,  6'd51}: s1rd5 <= 51;
	     {1'd0,  6'd52}: s1rd5 <= 52;
	     {1'd0,  6'd53}: s1rd5 <= 53;
	     {1'd0,  6'd54}: s1rd5 <= 54;
	     {1'd0,  6'd55}: s1rd5 <= 55;
	     {1'd0,  6'd56}: s1rd5 <= 56;
	     {1'd0,  6'd57}: s1rd5 <= 57;
	     {1'd0,  6'd58}: s1rd5 <= 58;
	     {1'd0,  6'd59}: s1rd5 <= 59;
	     {1'd0,  6'd60}: s1rd5 <= 60;
	     {1'd0,  6'd61}: s1rd5 <= 61;
	     {1'd0,  6'd62}: s1rd5 <= 62;
	     {1'd0,  6'd63}: s1rd5 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd6 <= 32;
	     {1'd0,  6'd1}: s1rd6 <= 33;
	     {1'd0,  6'd2}: s1rd6 <= 34;
	     {1'd0,  6'd3}: s1rd6 <= 35;
	     {1'd0,  6'd4}: s1rd6 <= 36;
	     {1'd0,  6'd5}: s1rd6 <= 37;
	     {1'd0,  6'd6}: s1rd6 <= 38;
	     {1'd0,  6'd7}: s1rd6 <= 39;
	     {1'd0,  6'd8}: s1rd6 <= 40;
	     {1'd0,  6'd9}: s1rd6 <= 41;
	     {1'd0,  6'd10}: s1rd6 <= 42;
	     {1'd0,  6'd11}: s1rd6 <= 43;
	     {1'd0,  6'd12}: s1rd6 <= 44;
	     {1'd0,  6'd13}: s1rd6 <= 45;
	     {1'd0,  6'd14}: s1rd6 <= 46;
	     {1'd0,  6'd15}: s1rd6 <= 47;
	     {1'd0,  6'd16}: s1rd6 <= 48;
	     {1'd0,  6'd17}: s1rd6 <= 49;
	     {1'd0,  6'd18}: s1rd6 <= 50;
	     {1'd0,  6'd19}: s1rd6 <= 51;
	     {1'd0,  6'd20}: s1rd6 <= 52;
	     {1'd0,  6'd21}: s1rd6 <= 53;
	     {1'd0,  6'd22}: s1rd6 <= 54;
	     {1'd0,  6'd23}: s1rd6 <= 55;
	     {1'd0,  6'd24}: s1rd6 <= 56;
	     {1'd0,  6'd25}: s1rd6 <= 57;
	     {1'd0,  6'd26}: s1rd6 <= 58;
	     {1'd0,  6'd27}: s1rd6 <= 59;
	     {1'd0,  6'd28}: s1rd6 <= 60;
	     {1'd0,  6'd29}: s1rd6 <= 61;
	     {1'd0,  6'd30}: s1rd6 <= 62;
	     {1'd0,  6'd31}: s1rd6 <= 63;
	     {1'd0,  6'd32}: s1rd6 <= 0;
	     {1'd0,  6'd33}: s1rd6 <= 1;
	     {1'd0,  6'd34}: s1rd6 <= 2;
	     {1'd0,  6'd35}: s1rd6 <= 3;
	     {1'd0,  6'd36}: s1rd6 <= 4;
	     {1'd0,  6'd37}: s1rd6 <= 5;
	     {1'd0,  6'd38}: s1rd6 <= 6;
	     {1'd0,  6'd39}: s1rd6 <= 7;
	     {1'd0,  6'd40}: s1rd6 <= 8;
	     {1'd0,  6'd41}: s1rd6 <= 9;
	     {1'd0,  6'd42}: s1rd6 <= 10;
	     {1'd0,  6'd43}: s1rd6 <= 11;
	     {1'd0,  6'd44}: s1rd6 <= 12;
	     {1'd0,  6'd45}: s1rd6 <= 13;
	     {1'd0,  6'd46}: s1rd6 <= 14;
	     {1'd0,  6'd47}: s1rd6 <= 15;
	     {1'd0,  6'd48}: s1rd6 <= 16;
	     {1'd0,  6'd49}: s1rd6 <= 17;
	     {1'd0,  6'd50}: s1rd6 <= 18;
	     {1'd0,  6'd51}: s1rd6 <= 19;
	     {1'd0,  6'd52}: s1rd6 <= 20;
	     {1'd0,  6'd53}: s1rd6 <= 21;
	     {1'd0,  6'd54}: s1rd6 <= 22;
	     {1'd0,  6'd55}: s1rd6 <= 23;
	     {1'd0,  6'd56}: s1rd6 <= 24;
	     {1'd0,  6'd57}: s1rd6 <= 25;
	     {1'd0,  6'd58}: s1rd6 <= 26;
	     {1'd0,  6'd59}: s1rd6 <= 27;
	     {1'd0,  6'd60}: s1rd6 <= 28;
	     {1'd0,  6'd61}: s1rd6 <= 29;
	     {1'd0,  6'd62}: s1rd6 <= 30;
	     {1'd0,  6'd63}: s1rd6 <= 31;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm90_d, s1rdloc})
	     {1'd0,  6'd0}: s1rd7 <= 0;
	     {1'd0,  6'd1}: s1rd7 <= 1;
	     {1'd0,  6'd2}: s1rd7 <= 2;
	     {1'd0,  6'd3}: s1rd7 <= 3;
	     {1'd0,  6'd4}: s1rd7 <= 4;
	     {1'd0,  6'd5}: s1rd7 <= 5;
	     {1'd0,  6'd6}: s1rd7 <= 6;
	     {1'd0,  6'd7}: s1rd7 <= 7;
	     {1'd0,  6'd8}: s1rd7 <= 8;
	     {1'd0,  6'd9}: s1rd7 <= 9;
	     {1'd0,  6'd10}: s1rd7 <= 10;
	     {1'd0,  6'd11}: s1rd7 <= 11;
	     {1'd0,  6'd12}: s1rd7 <= 12;
	     {1'd0,  6'd13}: s1rd7 <= 13;
	     {1'd0,  6'd14}: s1rd7 <= 14;
	     {1'd0,  6'd15}: s1rd7 <= 15;
	     {1'd0,  6'd16}: s1rd7 <= 16;
	     {1'd0,  6'd17}: s1rd7 <= 17;
	     {1'd0,  6'd18}: s1rd7 <= 18;
	     {1'd0,  6'd19}: s1rd7 <= 19;
	     {1'd0,  6'd20}: s1rd7 <= 20;
	     {1'd0,  6'd21}: s1rd7 <= 21;
	     {1'd0,  6'd22}: s1rd7 <= 22;
	     {1'd0,  6'd23}: s1rd7 <= 23;
	     {1'd0,  6'd24}: s1rd7 <= 24;
	     {1'd0,  6'd25}: s1rd7 <= 25;
	     {1'd0,  6'd26}: s1rd7 <= 26;
	     {1'd0,  6'd27}: s1rd7 <= 27;
	     {1'd0,  6'd28}: s1rd7 <= 28;
	     {1'd0,  6'd29}: s1rd7 <= 29;
	     {1'd0,  6'd30}: s1rd7 <= 30;
	     {1'd0,  6'd31}: s1rd7 <= 31;
	     {1'd0,  6'd32}: s1rd7 <= 32;
	     {1'd0,  6'd33}: s1rd7 <= 33;
	     {1'd0,  6'd34}: s1rd7 <= 34;
	     {1'd0,  6'd35}: s1rd7 <= 35;
	     {1'd0,  6'd36}: s1rd7 <= 36;
	     {1'd0,  6'd37}: s1rd7 <= 37;
	     {1'd0,  6'd38}: s1rd7 <= 38;
	     {1'd0,  6'd39}: s1rd7 <= 39;
	     {1'd0,  6'd40}: s1rd7 <= 40;
	     {1'd0,  6'd41}: s1rd7 <= 41;
	     {1'd0,  6'd42}: s1rd7 <= 42;
	     {1'd0,  6'd43}: s1rd7 <= 43;
	     {1'd0,  6'd44}: s1rd7 <= 44;
	     {1'd0,  6'd45}: s1rd7 <= 45;
	     {1'd0,  6'd46}: s1rd7 <= 46;
	     {1'd0,  6'd47}: s1rd7 <= 47;
	     {1'd0,  6'd48}: s1rd7 <= 48;
	     {1'd0,  6'd49}: s1rd7 <= 49;
	     {1'd0,  6'd50}: s1rd7 <= 50;
	     {1'd0,  6'd51}: s1rd7 <= 51;
	     {1'd0,  6'd52}: s1rd7 <= 52;
	     {1'd0,  6'd53}: s1rd7 <= 53;
	     {1'd0,  6'd54}: s1rd7 <= 54;
	     {1'd0,  6'd55}: s1rd7 <= 55;
	     {1'd0,  6'd56}: s1rd7 <= 56;
	     {1'd0,  6'd57}: s1rd7 <= 57;
	     {1'd0,  6'd58}: s1rd7 <= 58;
	     {1'd0,  6'd59}: s1rd7 <= 59;
	     {1'd0,  6'd60}: s1rd7 <= 60;
	     {1'd0,  6'd61}: s1rd7 <= 61;
	     {1'd0,  6'd62}: s1rd7 <= 62;
	     {1'd0,  6'd63}: s1rd7 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet66474 sw(tm90_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr0 <= 32;
	      {1'd0, 6'd1}: s2wr0 <= 33;
	      {1'd0, 6'd2}: s2wr0 <= 34;
	      {1'd0, 6'd3}: s2wr0 <= 35;
	      {1'd0, 6'd4}: s2wr0 <= 36;
	      {1'd0, 6'd5}: s2wr0 <= 37;
	      {1'd0, 6'd6}: s2wr0 <= 38;
	      {1'd0, 6'd7}: s2wr0 <= 39;
	      {1'd0, 6'd8}: s2wr0 <= 40;
	      {1'd0, 6'd9}: s2wr0 <= 41;
	      {1'd0, 6'd10}: s2wr0 <= 42;
	      {1'd0, 6'd11}: s2wr0 <= 43;
	      {1'd0, 6'd12}: s2wr0 <= 44;
	      {1'd0, 6'd13}: s2wr0 <= 45;
	      {1'd0, 6'd14}: s2wr0 <= 46;
	      {1'd0, 6'd15}: s2wr0 <= 47;
	      {1'd0, 6'd16}: s2wr0 <= 48;
	      {1'd0, 6'd17}: s2wr0 <= 49;
	      {1'd0, 6'd18}: s2wr0 <= 50;
	      {1'd0, 6'd19}: s2wr0 <= 51;
	      {1'd0, 6'd20}: s2wr0 <= 52;
	      {1'd0, 6'd21}: s2wr0 <= 53;
	      {1'd0, 6'd22}: s2wr0 <= 54;
	      {1'd0, 6'd23}: s2wr0 <= 55;
	      {1'd0, 6'd24}: s2wr0 <= 56;
	      {1'd0, 6'd25}: s2wr0 <= 57;
	      {1'd0, 6'd26}: s2wr0 <= 58;
	      {1'd0, 6'd27}: s2wr0 <= 59;
	      {1'd0, 6'd28}: s2wr0 <= 60;
	      {1'd0, 6'd29}: s2wr0 <= 61;
	      {1'd0, 6'd30}: s2wr0 <= 62;
	      {1'd0, 6'd31}: s2wr0 <= 63;
	      {1'd0, 6'd32}: s2wr0 <= 0;
	      {1'd0, 6'd33}: s2wr0 <= 1;
	      {1'd0, 6'd34}: s2wr0 <= 2;
	      {1'd0, 6'd35}: s2wr0 <= 3;
	      {1'd0, 6'd36}: s2wr0 <= 4;
	      {1'd0, 6'd37}: s2wr0 <= 5;
	      {1'd0, 6'd38}: s2wr0 <= 6;
	      {1'd0, 6'd39}: s2wr0 <= 7;
	      {1'd0, 6'd40}: s2wr0 <= 8;
	      {1'd0, 6'd41}: s2wr0 <= 9;
	      {1'd0, 6'd42}: s2wr0 <= 10;
	      {1'd0, 6'd43}: s2wr0 <= 11;
	      {1'd0, 6'd44}: s2wr0 <= 12;
	      {1'd0, 6'd45}: s2wr0 <= 13;
	      {1'd0, 6'd46}: s2wr0 <= 14;
	      {1'd0, 6'd47}: s2wr0 <= 15;
	      {1'd0, 6'd48}: s2wr0 <= 16;
	      {1'd0, 6'd49}: s2wr0 <= 17;
	      {1'd0, 6'd50}: s2wr0 <= 18;
	      {1'd0, 6'd51}: s2wr0 <= 19;
	      {1'd0, 6'd52}: s2wr0 <= 20;
	      {1'd0, 6'd53}: s2wr0 <= 21;
	      {1'd0, 6'd54}: s2wr0 <= 22;
	      {1'd0, 6'd55}: s2wr0 <= 23;
	      {1'd0, 6'd56}: s2wr0 <= 24;
	      {1'd0, 6'd57}: s2wr0 <= 25;
	      {1'd0, 6'd58}: s2wr0 <= 26;
	      {1'd0, 6'd59}: s2wr0 <= 27;
	      {1'd0, 6'd60}: s2wr0 <= 28;
	      {1'd0, 6'd61}: s2wr0 <= 29;
	      {1'd0, 6'd62}: s2wr0 <= 30;
	      {1'd0, 6'd63}: s2wr0 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr1 <= 0;
	      {1'd0, 6'd1}: s2wr1 <= 1;
	      {1'd0, 6'd2}: s2wr1 <= 2;
	      {1'd0, 6'd3}: s2wr1 <= 3;
	      {1'd0, 6'd4}: s2wr1 <= 4;
	      {1'd0, 6'd5}: s2wr1 <= 5;
	      {1'd0, 6'd6}: s2wr1 <= 6;
	      {1'd0, 6'd7}: s2wr1 <= 7;
	      {1'd0, 6'd8}: s2wr1 <= 8;
	      {1'd0, 6'd9}: s2wr1 <= 9;
	      {1'd0, 6'd10}: s2wr1 <= 10;
	      {1'd0, 6'd11}: s2wr1 <= 11;
	      {1'd0, 6'd12}: s2wr1 <= 12;
	      {1'd0, 6'd13}: s2wr1 <= 13;
	      {1'd0, 6'd14}: s2wr1 <= 14;
	      {1'd0, 6'd15}: s2wr1 <= 15;
	      {1'd0, 6'd16}: s2wr1 <= 16;
	      {1'd0, 6'd17}: s2wr1 <= 17;
	      {1'd0, 6'd18}: s2wr1 <= 18;
	      {1'd0, 6'd19}: s2wr1 <= 19;
	      {1'd0, 6'd20}: s2wr1 <= 20;
	      {1'd0, 6'd21}: s2wr1 <= 21;
	      {1'd0, 6'd22}: s2wr1 <= 22;
	      {1'd0, 6'd23}: s2wr1 <= 23;
	      {1'd0, 6'd24}: s2wr1 <= 24;
	      {1'd0, 6'd25}: s2wr1 <= 25;
	      {1'd0, 6'd26}: s2wr1 <= 26;
	      {1'd0, 6'd27}: s2wr1 <= 27;
	      {1'd0, 6'd28}: s2wr1 <= 28;
	      {1'd0, 6'd29}: s2wr1 <= 29;
	      {1'd0, 6'd30}: s2wr1 <= 30;
	      {1'd0, 6'd31}: s2wr1 <= 31;
	      {1'd0, 6'd32}: s2wr1 <= 32;
	      {1'd0, 6'd33}: s2wr1 <= 33;
	      {1'd0, 6'd34}: s2wr1 <= 34;
	      {1'd0, 6'd35}: s2wr1 <= 35;
	      {1'd0, 6'd36}: s2wr1 <= 36;
	      {1'd0, 6'd37}: s2wr1 <= 37;
	      {1'd0, 6'd38}: s2wr1 <= 38;
	      {1'd0, 6'd39}: s2wr1 <= 39;
	      {1'd0, 6'd40}: s2wr1 <= 40;
	      {1'd0, 6'd41}: s2wr1 <= 41;
	      {1'd0, 6'd42}: s2wr1 <= 42;
	      {1'd0, 6'd43}: s2wr1 <= 43;
	      {1'd0, 6'd44}: s2wr1 <= 44;
	      {1'd0, 6'd45}: s2wr1 <= 45;
	      {1'd0, 6'd46}: s2wr1 <= 46;
	      {1'd0, 6'd47}: s2wr1 <= 47;
	      {1'd0, 6'd48}: s2wr1 <= 48;
	      {1'd0, 6'd49}: s2wr1 <= 49;
	      {1'd0, 6'd50}: s2wr1 <= 50;
	      {1'd0, 6'd51}: s2wr1 <= 51;
	      {1'd0, 6'd52}: s2wr1 <= 52;
	      {1'd0, 6'd53}: s2wr1 <= 53;
	      {1'd0, 6'd54}: s2wr1 <= 54;
	      {1'd0, 6'd55}: s2wr1 <= 55;
	      {1'd0, 6'd56}: s2wr1 <= 56;
	      {1'd0, 6'd57}: s2wr1 <= 57;
	      {1'd0, 6'd58}: s2wr1 <= 58;
	      {1'd0, 6'd59}: s2wr1 <= 59;
	      {1'd0, 6'd60}: s2wr1 <= 60;
	      {1'd0, 6'd61}: s2wr1 <= 61;
	      {1'd0, 6'd62}: s2wr1 <= 62;
	      {1'd0, 6'd63}: s2wr1 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr2 <= 32;
	      {1'd0, 6'd1}: s2wr2 <= 33;
	      {1'd0, 6'd2}: s2wr2 <= 34;
	      {1'd0, 6'd3}: s2wr2 <= 35;
	      {1'd0, 6'd4}: s2wr2 <= 36;
	      {1'd0, 6'd5}: s2wr2 <= 37;
	      {1'd0, 6'd6}: s2wr2 <= 38;
	      {1'd0, 6'd7}: s2wr2 <= 39;
	      {1'd0, 6'd8}: s2wr2 <= 40;
	      {1'd0, 6'd9}: s2wr2 <= 41;
	      {1'd0, 6'd10}: s2wr2 <= 42;
	      {1'd0, 6'd11}: s2wr2 <= 43;
	      {1'd0, 6'd12}: s2wr2 <= 44;
	      {1'd0, 6'd13}: s2wr2 <= 45;
	      {1'd0, 6'd14}: s2wr2 <= 46;
	      {1'd0, 6'd15}: s2wr2 <= 47;
	      {1'd0, 6'd16}: s2wr2 <= 48;
	      {1'd0, 6'd17}: s2wr2 <= 49;
	      {1'd0, 6'd18}: s2wr2 <= 50;
	      {1'd0, 6'd19}: s2wr2 <= 51;
	      {1'd0, 6'd20}: s2wr2 <= 52;
	      {1'd0, 6'd21}: s2wr2 <= 53;
	      {1'd0, 6'd22}: s2wr2 <= 54;
	      {1'd0, 6'd23}: s2wr2 <= 55;
	      {1'd0, 6'd24}: s2wr2 <= 56;
	      {1'd0, 6'd25}: s2wr2 <= 57;
	      {1'd0, 6'd26}: s2wr2 <= 58;
	      {1'd0, 6'd27}: s2wr2 <= 59;
	      {1'd0, 6'd28}: s2wr2 <= 60;
	      {1'd0, 6'd29}: s2wr2 <= 61;
	      {1'd0, 6'd30}: s2wr2 <= 62;
	      {1'd0, 6'd31}: s2wr2 <= 63;
	      {1'd0, 6'd32}: s2wr2 <= 0;
	      {1'd0, 6'd33}: s2wr2 <= 1;
	      {1'd0, 6'd34}: s2wr2 <= 2;
	      {1'd0, 6'd35}: s2wr2 <= 3;
	      {1'd0, 6'd36}: s2wr2 <= 4;
	      {1'd0, 6'd37}: s2wr2 <= 5;
	      {1'd0, 6'd38}: s2wr2 <= 6;
	      {1'd0, 6'd39}: s2wr2 <= 7;
	      {1'd0, 6'd40}: s2wr2 <= 8;
	      {1'd0, 6'd41}: s2wr2 <= 9;
	      {1'd0, 6'd42}: s2wr2 <= 10;
	      {1'd0, 6'd43}: s2wr2 <= 11;
	      {1'd0, 6'd44}: s2wr2 <= 12;
	      {1'd0, 6'd45}: s2wr2 <= 13;
	      {1'd0, 6'd46}: s2wr2 <= 14;
	      {1'd0, 6'd47}: s2wr2 <= 15;
	      {1'd0, 6'd48}: s2wr2 <= 16;
	      {1'd0, 6'd49}: s2wr2 <= 17;
	      {1'd0, 6'd50}: s2wr2 <= 18;
	      {1'd0, 6'd51}: s2wr2 <= 19;
	      {1'd0, 6'd52}: s2wr2 <= 20;
	      {1'd0, 6'd53}: s2wr2 <= 21;
	      {1'd0, 6'd54}: s2wr2 <= 22;
	      {1'd0, 6'd55}: s2wr2 <= 23;
	      {1'd0, 6'd56}: s2wr2 <= 24;
	      {1'd0, 6'd57}: s2wr2 <= 25;
	      {1'd0, 6'd58}: s2wr2 <= 26;
	      {1'd0, 6'd59}: s2wr2 <= 27;
	      {1'd0, 6'd60}: s2wr2 <= 28;
	      {1'd0, 6'd61}: s2wr2 <= 29;
	      {1'd0, 6'd62}: s2wr2 <= 30;
	      {1'd0, 6'd63}: s2wr2 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr3 <= 0;
	      {1'd0, 6'd1}: s2wr3 <= 1;
	      {1'd0, 6'd2}: s2wr3 <= 2;
	      {1'd0, 6'd3}: s2wr3 <= 3;
	      {1'd0, 6'd4}: s2wr3 <= 4;
	      {1'd0, 6'd5}: s2wr3 <= 5;
	      {1'd0, 6'd6}: s2wr3 <= 6;
	      {1'd0, 6'd7}: s2wr3 <= 7;
	      {1'd0, 6'd8}: s2wr3 <= 8;
	      {1'd0, 6'd9}: s2wr3 <= 9;
	      {1'd0, 6'd10}: s2wr3 <= 10;
	      {1'd0, 6'd11}: s2wr3 <= 11;
	      {1'd0, 6'd12}: s2wr3 <= 12;
	      {1'd0, 6'd13}: s2wr3 <= 13;
	      {1'd0, 6'd14}: s2wr3 <= 14;
	      {1'd0, 6'd15}: s2wr3 <= 15;
	      {1'd0, 6'd16}: s2wr3 <= 16;
	      {1'd0, 6'd17}: s2wr3 <= 17;
	      {1'd0, 6'd18}: s2wr3 <= 18;
	      {1'd0, 6'd19}: s2wr3 <= 19;
	      {1'd0, 6'd20}: s2wr3 <= 20;
	      {1'd0, 6'd21}: s2wr3 <= 21;
	      {1'd0, 6'd22}: s2wr3 <= 22;
	      {1'd0, 6'd23}: s2wr3 <= 23;
	      {1'd0, 6'd24}: s2wr3 <= 24;
	      {1'd0, 6'd25}: s2wr3 <= 25;
	      {1'd0, 6'd26}: s2wr3 <= 26;
	      {1'd0, 6'd27}: s2wr3 <= 27;
	      {1'd0, 6'd28}: s2wr3 <= 28;
	      {1'd0, 6'd29}: s2wr3 <= 29;
	      {1'd0, 6'd30}: s2wr3 <= 30;
	      {1'd0, 6'd31}: s2wr3 <= 31;
	      {1'd0, 6'd32}: s2wr3 <= 32;
	      {1'd0, 6'd33}: s2wr3 <= 33;
	      {1'd0, 6'd34}: s2wr3 <= 34;
	      {1'd0, 6'd35}: s2wr3 <= 35;
	      {1'd0, 6'd36}: s2wr3 <= 36;
	      {1'd0, 6'd37}: s2wr3 <= 37;
	      {1'd0, 6'd38}: s2wr3 <= 38;
	      {1'd0, 6'd39}: s2wr3 <= 39;
	      {1'd0, 6'd40}: s2wr3 <= 40;
	      {1'd0, 6'd41}: s2wr3 <= 41;
	      {1'd0, 6'd42}: s2wr3 <= 42;
	      {1'd0, 6'd43}: s2wr3 <= 43;
	      {1'd0, 6'd44}: s2wr3 <= 44;
	      {1'd0, 6'd45}: s2wr3 <= 45;
	      {1'd0, 6'd46}: s2wr3 <= 46;
	      {1'd0, 6'd47}: s2wr3 <= 47;
	      {1'd0, 6'd48}: s2wr3 <= 48;
	      {1'd0, 6'd49}: s2wr3 <= 49;
	      {1'd0, 6'd50}: s2wr3 <= 50;
	      {1'd0, 6'd51}: s2wr3 <= 51;
	      {1'd0, 6'd52}: s2wr3 <= 52;
	      {1'd0, 6'd53}: s2wr3 <= 53;
	      {1'd0, 6'd54}: s2wr3 <= 54;
	      {1'd0, 6'd55}: s2wr3 <= 55;
	      {1'd0, 6'd56}: s2wr3 <= 56;
	      {1'd0, 6'd57}: s2wr3 <= 57;
	      {1'd0, 6'd58}: s2wr3 <= 58;
	      {1'd0, 6'd59}: s2wr3 <= 59;
	      {1'd0, 6'd60}: s2wr3 <= 60;
	      {1'd0, 6'd61}: s2wr3 <= 61;
	      {1'd0, 6'd62}: s2wr3 <= 62;
	      {1'd0, 6'd63}: s2wr3 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr4 <= 32;
	      {1'd0, 6'd1}: s2wr4 <= 33;
	      {1'd0, 6'd2}: s2wr4 <= 34;
	      {1'd0, 6'd3}: s2wr4 <= 35;
	      {1'd0, 6'd4}: s2wr4 <= 36;
	      {1'd0, 6'd5}: s2wr4 <= 37;
	      {1'd0, 6'd6}: s2wr4 <= 38;
	      {1'd0, 6'd7}: s2wr4 <= 39;
	      {1'd0, 6'd8}: s2wr4 <= 40;
	      {1'd0, 6'd9}: s2wr4 <= 41;
	      {1'd0, 6'd10}: s2wr4 <= 42;
	      {1'd0, 6'd11}: s2wr4 <= 43;
	      {1'd0, 6'd12}: s2wr4 <= 44;
	      {1'd0, 6'd13}: s2wr4 <= 45;
	      {1'd0, 6'd14}: s2wr4 <= 46;
	      {1'd0, 6'd15}: s2wr4 <= 47;
	      {1'd0, 6'd16}: s2wr4 <= 48;
	      {1'd0, 6'd17}: s2wr4 <= 49;
	      {1'd0, 6'd18}: s2wr4 <= 50;
	      {1'd0, 6'd19}: s2wr4 <= 51;
	      {1'd0, 6'd20}: s2wr4 <= 52;
	      {1'd0, 6'd21}: s2wr4 <= 53;
	      {1'd0, 6'd22}: s2wr4 <= 54;
	      {1'd0, 6'd23}: s2wr4 <= 55;
	      {1'd0, 6'd24}: s2wr4 <= 56;
	      {1'd0, 6'd25}: s2wr4 <= 57;
	      {1'd0, 6'd26}: s2wr4 <= 58;
	      {1'd0, 6'd27}: s2wr4 <= 59;
	      {1'd0, 6'd28}: s2wr4 <= 60;
	      {1'd0, 6'd29}: s2wr4 <= 61;
	      {1'd0, 6'd30}: s2wr4 <= 62;
	      {1'd0, 6'd31}: s2wr4 <= 63;
	      {1'd0, 6'd32}: s2wr4 <= 0;
	      {1'd0, 6'd33}: s2wr4 <= 1;
	      {1'd0, 6'd34}: s2wr4 <= 2;
	      {1'd0, 6'd35}: s2wr4 <= 3;
	      {1'd0, 6'd36}: s2wr4 <= 4;
	      {1'd0, 6'd37}: s2wr4 <= 5;
	      {1'd0, 6'd38}: s2wr4 <= 6;
	      {1'd0, 6'd39}: s2wr4 <= 7;
	      {1'd0, 6'd40}: s2wr4 <= 8;
	      {1'd0, 6'd41}: s2wr4 <= 9;
	      {1'd0, 6'd42}: s2wr4 <= 10;
	      {1'd0, 6'd43}: s2wr4 <= 11;
	      {1'd0, 6'd44}: s2wr4 <= 12;
	      {1'd0, 6'd45}: s2wr4 <= 13;
	      {1'd0, 6'd46}: s2wr4 <= 14;
	      {1'd0, 6'd47}: s2wr4 <= 15;
	      {1'd0, 6'd48}: s2wr4 <= 16;
	      {1'd0, 6'd49}: s2wr4 <= 17;
	      {1'd0, 6'd50}: s2wr4 <= 18;
	      {1'd0, 6'd51}: s2wr4 <= 19;
	      {1'd0, 6'd52}: s2wr4 <= 20;
	      {1'd0, 6'd53}: s2wr4 <= 21;
	      {1'd0, 6'd54}: s2wr4 <= 22;
	      {1'd0, 6'd55}: s2wr4 <= 23;
	      {1'd0, 6'd56}: s2wr4 <= 24;
	      {1'd0, 6'd57}: s2wr4 <= 25;
	      {1'd0, 6'd58}: s2wr4 <= 26;
	      {1'd0, 6'd59}: s2wr4 <= 27;
	      {1'd0, 6'd60}: s2wr4 <= 28;
	      {1'd0, 6'd61}: s2wr4 <= 29;
	      {1'd0, 6'd62}: s2wr4 <= 30;
	      {1'd0, 6'd63}: s2wr4 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr5 <= 0;
	      {1'd0, 6'd1}: s2wr5 <= 1;
	      {1'd0, 6'd2}: s2wr5 <= 2;
	      {1'd0, 6'd3}: s2wr5 <= 3;
	      {1'd0, 6'd4}: s2wr5 <= 4;
	      {1'd0, 6'd5}: s2wr5 <= 5;
	      {1'd0, 6'd6}: s2wr5 <= 6;
	      {1'd0, 6'd7}: s2wr5 <= 7;
	      {1'd0, 6'd8}: s2wr5 <= 8;
	      {1'd0, 6'd9}: s2wr5 <= 9;
	      {1'd0, 6'd10}: s2wr5 <= 10;
	      {1'd0, 6'd11}: s2wr5 <= 11;
	      {1'd0, 6'd12}: s2wr5 <= 12;
	      {1'd0, 6'd13}: s2wr5 <= 13;
	      {1'd0, 6'd14}: s2wr5 <= 14;
	      {1'd0, 6'd15}: s2wr5 <= 15;
	      {1'd0, 6'd16}: s2wr5 <= 16;
	      {1'd0, 6'd17}: s2wr5 <= 17;
	      {1'd0, 6'd18}: s2wr5 <= 18;
	      {1'd0, 6'd19}: s2wr5 <= 19;
	      {1'd0, 6'd20}: s2wr5 <= 20;
	      {1'd0, 6'd21}: s2wr5 <= 21;
	      {1'd0, 6'd22}: s2wr5 <= 22;
	      {1'd0, 6'd23}: s2wr5 <= 23;
	      {1'd0, 6'd24}: s2wr5 <= 24;
	      {1'd0, 6'd25}: s2wr5 <= 25;
	      {1'd0, 6'd26}: s2wr5 <= 26;
	      {1'd0, 6'd27}: s2wr5 <= 27;
	      {1'd0, 6'd28}: s2wr5 <= 28;
	      {1'd0, 6'd29}: s2wr5 <= 29;
	      {1'd0, 6'd30}: s2wr5 <= 30;
	      {1'd0, 6'd31}: s2wr5 <= 31;
	      {1'd0, 6'd32}: s2wr5 <= 32;
	      {1'd0, 6'd33}: s2wr5 <= 33;
	      {1'd0, 6'd34}: s2wr5 <= 34;
	      {1'd0, 6'd35}: s2wr5 <= 35;
	      {1'd0, 6'd36}: s2wr5 <= 36;
	      {1'd0, 6'd37}: s2wr5 <= 37;
	      {1'd0, 6'd38}: s2wr5 <= 38;
	      {1'd0, 6'd39}: s2wr5 <= 39;
	      {1'd0, 6'd40}: s2wr5 <= 40;
	      {1'd0, 6'd41}: s2wr5 <= 41;
	      {1'd0, 6'd42}: s2wr5 <= 42;
	      {1'd0, 6'd43}: s2wr5 <= 43;
	      {1'd0, 6'd44}: s2wr5 <= 44;
	      {1'd0, 6'd45}: s2wr5 <= 45;
	      {1'd0, 6'd46}: s2wr5 <= 46;
	      {1'd0, 6'd47}: s2wr5 <= 47;
	      {1'd0, 6'd48}: s2wr5 <= 48;
	      {1'd0, 6'd49}: s2wr5 <= 49;
	      {1'd0, 6'd50}: s2wr5 <= 50;
	      {1'd0, 6'd51}: s2wr5 <= 51;
	      {1'd0, 6'd52}: s2wr5 <= 52;
	      {1'd0, 6'd53}: s2wr5 <= 53;
	      {1'd0, 6'd54}: s2wr5 <= 54;
	      {1'd0, 6'd55}: s2wr5 <= 55;
	      {1'd0, 6'd56}: s2wr5 <= 56;
	      {1'd0, 6'd57}: s2wr5 <= 57;
	      {1'd0, 6'd58}: s2wr5 <= 58;
	      {1'd0, 6'd59}: s2wr5 <= 59;
	      {1'd0, 6'd60}: s2wr5 <= 60;
	      {1'd0, 6'd61}: s2wr5 <= 61;
	      {1'd0, 6'd62}: s2wr5 <= 62;
	      {1'd0, 6'd63}: s2wr5 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr6 <= 32;
	      {1'd0, 6'd1}: s2wr6 <= 33;
	      {1'd0, 6'd2}: s2wr6 <= 34;
	      {1'd0, 6'd3}: s2wr6 <= 35;
	      {1'd0, 6'd4}: s2wr6 <= 36;
	      {1'd0, 6'd5}: s2wr6 <= 37;
	      {1'd0, 6'd6}: s2wr6 <= 38;
	      {1'd0, 6'd7}: s2wr6 <= 39;
	      {1'd0, 6'd8}: s2wr6 <= 40;
	      {1'd0, 6'd9}: s2wr6 <= 41;
	      {1'd0, 6'd10}: s2wr6 <= 42;
	      {1'd0, 6'd11}: s2wr6 <= 43;
	      {1'd0, 6'd12}: s2wr6 <= 44;
	      {1'd0, 6'd13}: s2wr6 <= 45;
	      {1'd0, 6'd14}: s2wr6 <= 46;
	      {1'd0, 6'd15}: s2wr6 <= 47;
	      {1'd0, 6'd16}: s2wr6 <= 48;
	      {1'd0, 6'd17}: s2wr6 <= 49;
	      {1'd0, 6'd18}: s2wr6 <= 50;
	      {1'd0, 6'd19}: s2wr6 <= 51;
	      {1'd0, 6'd20}: s2wr6 <= 52;
	      {1'd0, 6'd21}: s2wr6 <= 53;
	      {1'd0, 6'd22}: s2wr6 <= 54;
	      {1'd0, 6'd23}: s2wr6 <= 55;
	      {1'd0, 6'd24}: s2wr6 <= 56;
	      {1'd0, 6'd25}: s2wr6 <= 57;
	      {1'd0, 6'd26}: s2wr6 <= 58;
	      {1'd0, 6'd27}: s2wr6 <= 59;
	      {1'd0, 6'd28}: s2wr6 <= 60;
	      {1'd0, 6'd29}: s2wr6 <= 61;
	      {1'd0, 6'd30}: s2wr6 <= 62;
	      {1'd0, 6'd31}: s2wr6 <= 63;
	      {1'd0, 6'd32}: s2wr6 <= 0;
	      {1'd0, 6'd33}: s2wr6 <= 1;
	      {1'd0, 6'd34}: s2wr6 <= 2;
	      {1'd0, 6'd35}: s2wr6 <= 3;
	      {1'd0, 6'd36}: s2wr6 <= 4;
	      {1'd0, 6'd37}: s2wr6 <= 5;
	      {1'd0, 6'd38}: s2wr6 <= 6;
	      {1'd0, 6'd39}: s2wr6 <= 7;
	      {1'd0, 6'd40}: s2wr6 <= 8;
	      {1'd0, 6'd41}: s2wr6 <= 9;
	      {1'd0, 6'd42}: s2wr6 <= 10;
	      {1'd0, 6'd43}: s2wr6 <= 11;
	      {1'd0, 6'd44}: s2wr6 <= 12;
	      {1'd0, 6'd45}: s2wr6 <= 13;
	      {1'd0, 6'd46}: s2wr6 <= 14;
	      {1'd0, 6'd47}: s2wr6 <= 15;
	      {1'd0, 6'd48}: s2wr6 <= 16;
	      {1'd0, 6'd49}: s2wr6 <= 17;
	      {1'd0, 6'd50}: s2wr6 <= 18;
	      {1'd0, 6'd51}: s2wr6 <= 19;
	      {1'd0, 6'd52}: s2wr6 <= 20;
	      {1'd0, 6'd53}: s2wr6 <= 21;
	      {1'd0, 6'd54}: s2wr6 <= 22;
	      {1'd0, 6'd55}: s2wr6 <= 23;
	      {1'd0, 6'd56}: s2wr6 <= 24;
	      {1'd0, 6'd57}: s2wr6 <= 25;
	      {1'd0, 6'd58}: s2wr6 <= 26;
	      {1'd0, 6'd59}: s2wr6 <= 27;
	      {1'd0, 6'd60}: s2wr6 <= 28;
	      {1'd0, 6'd61}: s2wr6 <= 29;
	      {1'd0, 6'd62}: s2wr6 <= 30;
	      {1'd0, 6'd63}: s2wr6 <= 31;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm90_dd, writeCycle})
	      {1'd0, 6'd0}: s2wr7 <= 0;
	      {1'd0, 6'd1}: s2wr7 <= 1;
	      {1'd0, 6'd2}: s2wr7 <= 2;
	      {1'd0, 6'd3}: s2wr7 <= 3;
	      {1'd0, 6'd4}: s2wr7 <= 4;
	      {1'd0, 6'd5}: s2wr7 <= 5;
	      {1'd0, 6'd6}: s2wr7 <= 6;
	      {1'd0, 6'd7}: s2wr7 <= 7;
	      {1'd0, 6'd8}: s2wr7 <= 8;
	      {1'd0, 6'd9}: s2wr7 <= 9;
	      {1'd0, 6'd10}: s2wr7 <= 10;
	      {1'd0, 6'd11}: s2wr7 <= 11;
	      {1'd0, 6'd12}: s2wr7 <= 12;
	      {1'd0, 6'd13}: s2wr7 <= 13;
	      {1'd0, 6'd14}: s2wr7 <= 14;
	      {1'd0, 6'd15}: s2wr7 <= 15;
	      {1'd0, 6'd16}: s2wr7 <= 16;
	      {1'd0, 6'd17}: s2wr7 <= 17;
	      {1'd0, 6'd18}: s2wr7 <= 18;
	      {1'd0, 6'd19}: s2wr7 <= 19;
	      {1'd0, 6'd20}: s2wr7 <= 20;
	      {1'd0, 6'd21}: s2wr7 <= 21;
	      {1'd0, 6'd22}: s2wr7 <= 22;
	      {1'd0, 6'd23}: s2wr7 <= 23;
	      {1'd0, 6'd24}: s2wr7 <= 24;
	      {1'd0, 6'd25}: s2wr7 <= 25;
	      {1'd0, 6'd26}: s2wr7 <= 26;
	      {1'd0, 6'd27}: s2wr7 <= 27;
	      {1'd0, 6'd28}: s2wr7 <= 28;
	      {1'd0, 6'd29}: s2wr7 <= 29;
	      {1'd0, 6'd30}: s2wr7 <= 30;
	      {1'd0, 6'd31}: s2wr7 <= 31;
	      {1'd0, 6'd32}: s2wr7 <= 32;
	      {1'd0, 6'd33}: s2wr7 <= 33;
	      {1'd0, 6'd34}: s2wr7 <= 34;
	      {1'd0, 6'd35}: s2wr7 <= 35;
	      {1'd0, 6'd36}: s2wr7 <= 36;
	      {1'd0, 6'd37}: s2wr7 <= 37;
	      {1'd0, 6'd38}: s2wr7 <= 38;
	      {1'd0, 6'd39}: s2wr7 <= 39;
	      {1'd0, 6'd40}: s2wr7 <= 40;
	      {1'd0, 6'd41}: s2wr7 <= 41;
	      {1'd0, 6'd42}: s2wr7 <= 42;
	      {1'd0, 6'd43}: s2wr7 <= 43;
	      {1'd0, 6'd44}: s2wr7 <= 44;
	      {1'd0, 6'd45}: s2wr7 <= 45;
	      {1'd0, 6'd46}: s2wr7 <= 46;
	      {1'd0, 6'd47}: s2wr7 <= 47;
	      {1'd0, 6'd48}: s2wr7 <= 48;
	      {1'd0, 6'd49}: s2wr7 <= 49;
	      {1'd0, 6'd50}: s2wr7 <= 50;
	      {1'd0, 6'd51}: s2wr7 <= 51;
	      {1'd0, 6'd52}: s2wr7 <= 52;
	      {1'd0, 6'd53}: s2wr7 <= 53;
	      {1'd0, 6'd54}: s2wr7 <= 54;
	      {1'd0, 6'd55}: s2wr7 <= 55;
	      {1'd0, 6'd56}: s2wr7 <= 56;
	      {1'd0, 6'd57}: s2wr7 <= 57;
	      {1'd0, 6'd58}: s2wr7 <= 58;
	      {1'd0, 6'd59}: s2wr7 <= 59;
	      {1'd0, 6'd60}: s2wr7 <= 60;
	      {1'd0, 6'd61}: s2wr7 <= 61;
	      {1'd0, 6'd62}: s2wr7 <= 62;
	      {1'd0, 6'd63}: s2wr7 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 64
module DirSum_68177(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [5:0] i2;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i2 <= 0;
      end
      else begin
         if (next == 1)
            i2 <= 0;
         else if (i2 == 63)
            i2 <= 0;
         else
            i2 <= i2 + 1;
      end
   end

   codeBlock66479 codeBlockIsnt76805(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i2_in(i2),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D20_67185(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3fe1;
      2: out3 <= 16'h3f9c;
      3: out3 <= 16'h3f30;
      4: out3 <= 16'h3e9d;
      5: out3 <= 16'h3de3;
      6: out3 <= 16'h3d03;
      7: out3 <= 16'h3bfd;
      8: out3 <= 16'h3ad3;
      9: out3 <= 16'h3984;
      10: out3 <= 16'h3812;
      11: out3 <= 16'h367d;
      12: out3 <= 16'h34c6;
      13: out3 <= 16'h32ef;
      14: out3 <= 16'h30f9;
      15: out3 <= 16'h2ee4;
      16: out3 <= 16'h2cb2;
      17: out3 <= 16'h2a65;
      18: out3 <= 16'h27fe;
      19: out3 <= 16'h257e;
      20: out3 <= 16'h22e7;
      21: out3 <= 16'h203a;
      22: out3 <= 16'h1d79;
      23: out3 <= 16'h1aa7;
      24: out3 <= 16'h17c4;
      25: out3 <= 16'h14d2;
      26: out3 <= 16'h11d3;
      27: out3 <= 16'heca;
      28: out3 <= 16'hbb7;
      29: out3 <= 16'h89d;
      30: out3 <= 16'h57e;
      31: out3 <= 16'h25b;
      32: out3 <= 16'hff37;
      33: out3 <= 16'hfc13;
      34: out3 <= 16'hf8f2;
      35: out3 <= 16'hf5d5;
      36: out3 <= 16'hf2bf;
      37: out3 <= 16'hefb0;
      38: out3 <= 16'hecac;
      39: out3 <= 16'he9b4;
      40: out3 <= 16'he6c9;
      41: out3 <= 16'he3ee;
      42: out3 <= 16'he124;
      43: out3 <= 16'hde6d;
      44: out3 <= 16'hdbcb;
      45: out3 <= 16'hd93f;
      46: out3 <= 16'hd6cb;
      47: out3 <= 16'hd471;
      48: out3 <= 16'hd231;
      49: out3 <= 16'hd00e;
      50: out3 <= 16'hce08;
      51: out3 <= 16'hcc21;
      52: out3 <= 16'hca5b;
      53: out3 <= 16'hc8b5;
      54: out3 <= 16'hc731;
      55: out3 <= 16'hc5d0;
      56: out3 <= 16'hc493;
      57: out3 <= 16'hc37b;
      58: out3 <= 16'hc288;
      59: out3 <= 16'hc1bb;
      60: out3 <= 16'hc115;
      61: out3 <= 16'hc095;
      62: out3 <= 16'hc03c;
      63: out3 <= 16'hc00b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D18_67383(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3fec;
      2: out3 <= 16'h3fb1;
      3: out3 <= 16'h3f4f;
      4: out3 <= 16'h3ec5;
      5: out3 <= 16'h3e15;
      6: out3 <= 16'h3d3f;
      7: out3 <= 16'h3c42;
      8: out3 <= 16'h3b21;
      9: out3 <= 16'h39db;
      10: out3 <= 16'h3871;
      11: out3 <= 16'h36e5;
      12: out3 <= 16'h3537;
      13: out3 <= 16'h3368;
      14: out3 <= 16'h3179;
      15: out3 <= 16'h2f6c;
      16: out3 <= 16'h2d41;
      17: out3 <= 16'h2afb;
      18: out3 <= 16'h289a;
      19: out3 <= 16'h2620;
      20: out3 <= 16'h238e;
      21: out3 <= 16'h20e7;
      22: out3 <= 16'h1e2b;
      23: out3 <= 16'h1b5d;
      24: out3 <= 16'h187e;
      25: out3 <= 16'h1590;
      26: out3 <= 16'h1294;
      27: out3 <= 16'hf8d;
      28: out3 <= 16'hc7c;
      29: out3 <= 16'h964;
      30: out3 <= 16'h646;
      31: out3 <= 16'h324;
      32: out3 <= 16'h0;
      33: out3 <= 16'hfcdc;
      34: out3 <= 16'hf9ba;
      35: out3 <= 16'hf69c;
      36: out3 <= 16'hf384;
      37: out3 <= 16'hf073;
      38: out3 <= 16'hed6c;
      39: out3 <= 16'hea70;
      40: out3 <= 16'he782;
      41: out3 <= 16'he4a3;
      42: out3 <= 16'he1d5;
      43: out3 <= 16'hdf19;
      44: out3 <= 16'hdc72;
      45: out3 <= 16'hd9e0;
      46: out3 <= 16'hd766;
      47: out3 <= 16'hd505;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd094;
      50: out3 <= 16'hce87;
      51: out3 <= 16'hcc98;
      52: out3 <= 16'hcac9;
      53: out3 <= 16'hc91b;
      54: out3 <= 16'hc78f;
      55: out3 <= 16'hc625;
      56: out3 <= 16'hc4df;
      57: out3 <= 16'hc3be;
      58: out3 <= 16'hc2c1;
      59: out3 <= 16'hc1eb;
      60: out3 <= 16'hc13b;
      61: out3 <= 16'hc0b1;
      62: out3 <= 16'hc04f;
      63: out3 <= 16'hc014;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D22_67449(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffb;
      1: out3 <= 16'h3fd4;
      2: out3 <= 16'h3f85;
      3: out3 <= 16'h3f0f;
      4: out3 <= 16'h3e72;
      5: out3 <= 16'h3daf;
      6: out3 <= 16'h3cc5;
      7: out3 <= 16'h3bb6;
      8: out3 <= 16'h3a82;
      9: out3 <= 16'h392b;
      10: out3 <= 16'h37b0;
      11: out3 <= 16'h3612;
      12: out3 <= 16'h3453;
      13: out3 <= 16'h3274;
      14: out3 <= 16'h3076;
      15: out3 <= 16'h2e5a;
      16: out3 <= 16'h2c21;
      17: out3 <= 16'h29ce;
      18: out3 <= 16'h2760;
      19: out3 <= 16'h24da;
      20: out3 <= 16'h223d;
      21: out3 <= 16'h1f8c;
      22: out3 <= 16'h1cc6;
      23: out3 <= 16'h19ef;
      24: out3 <= 16'h1709;
      25: out3 <= 16'h1413;
      26: out3 <= 16'h1112;
      27: out3 <= 16'he06;
      28: out3 <= 16'haf1;
      29: out3 <= 16'h7d6;
      30: out3 <= 16'h4b5;
      31: out3 <= 16'h192;
      32: out3 <= 16'hfe6e;
      33: out3 <= 16'hfb4b;
      34: out3 <= 16'hf82a;
      35: out3 <= 16'hf50f;
      36: out3 <= 16'hf1fa;
      37: out3 <= 16'heeee;
      38: out3 <= 16'hebed;
      39: out3 <= 16'he8f7;
      40: out3 <= 16'he611;
      41: out3 <= 16'he33a;
      42: out3 <= 16'he074;
      43: out3 <= 16'hddc3;
      44: out3 <= 16'hdb26;
      45: out3 <= 16'hd8a0;
      46: out3 <= 16'hd632;
      47: out3 <= 16'hd3df;
      48: out3 <= 16'hd1a6;
      49: out3 <= 16'hcf8a;
      50: out3 <= 16'hcd8c;
      51: out3 <= 16'hcbad;
      52: out3 <= 16'hc9ee;
      53: out3 <= 16'hc850;
      54: out3 <= 16'hc6d5;
      55: out3 <= 16'hc57e;
      56: out3 <= 16'hc44a;
      57: out3 <= 16'hc33b;
      58: out3 <= 16'hc251;
      59: out3 <= 16'hc18e;
      60: out3 <= 16'hc0f1;
      61: out3 <= 16'hc07b;
      62: out3 <= 16'hc02c;
      63: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D24_67647(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ff5;
      1: out3 <= 16'h3fc4;
      2: out3 <= 16'h3f6b;
      3: out3 <= 16'h3eeb;
      4: out3 <= 16'h3e45;
      5: out3 <= 16'h3d78;
      6: out3 <= 16'h3c85;
      7: out3 <= 16'h3b6d;
      8: out3 <= 16'h3a30;
      9: out3 <= 16'h38cf;
      10: out3 <= 16'h374b;
      11: out3 <= 16'h35a5;
      12: out3 <= 16'h33df;
      13: out3 <= 16'h31f8;
      14: out3 <= 16'h2ff2;
      15: out3 <= 16'h2dcf;
      16: out3 <= 16'h2b8f;
      17: out3 <= 16'h2935;
      18: out3 <= 16'h26c1;
      19: out3 <= 16'h2435;
      20: out3 <= 16'h2193;
      21: out3 <= 16'h1edc;
      22: out3 <= 16'h1c12;
      23: out3 <= 16'h1937;
      24: out3 <= 16'h164c;
      25: out3 <= 16'h1354;
      26: out3 <= 16'h1050;
      27: out3 <= 16'hd41;
      28: out3 <= 16'ha2b;
      29: out3 <= 16'h70e;
      30: out3 <= 16'h3ed;
      31: out3 <= 16'hc9;
      32: out3 <= 16'hfda5;
      33: out3 <= 16'hfa82;
      34: out3 <= 16'hf763;
      35: out3 <= 16'hf449;
      36: out3 <= 16'hf136;
      37: out3 <= 16'hee2d;
      38: out3 <= 16'heb2e;
      39: out3 <= 16'he83c;
      40: out3 <= 16'he559;
      41: out3 <= 16'he287;
      42: out3 <= 16'hdfc6;
      43: out3 <= 16'hdd19;
      44: out3 <= 16'hda82;
      45: out3 <= 16'hd802;
      46: out3 <= 16'hd59b;
      47: out3 <= 16'hd34e;
      48: out3 <= 16'hd11c;
      49: out3 <= 16'hcf07;
      50: out3 <= 16'hcd11;
      51: out3 <= 16'hcb3a;
      52: out3 <= 16'hc983;
      53: out3 <= 16'hc7ee;
      54: out3 <= 16'hc67c;
      55: out3 <= 16'hc52d;
      56: out3 <= 16'hc403;
      57: out3 <= 16'hc2fd;
      58: out3 <= 16'hc21d;
      59: out3 <= 16'hc163;
      60: out3 <= 16'hc0d0;
      61: out3 <= 16'hc064;
      62: out3 <= 16'hc01f;
      63: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D32_67713(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfda5;
      1: out3 <= 16'hfa82;
      2: out3 <= 16'hf763;
      3: out3 <= 16'hf449;
      4: out3 <= 16'hf136;
      5: out3 <= 16'hee2d;
      6: out3 <= 16'heb2e;
      7: out3 <= 16'he83c;
      8: out3 <= 16'he559;
      9: out3 <= 16'he287;
      10: out3 <= 16'hdfc6;
      11: out3 <= 16'hdd19;
      12: out3 <= 16'hda82;
      13: out3 <= 16'hd802;
      14: out3 <= 16'hd59b;
      15: out3 <= 16'hd34e;
      16: out3 <= 16'hd11c;
      17: out3 <= 16'hcf07;
      18: out3 <= 16'hcd11;
      19: out3 <= 16'hcb3a;
      20: out3 <= 16'hc983;
      21: out3 <= 16'hc7ee;
      22: out3 <= 16'hc67c;
      23: out3 <= 16'hc52d;
      24: out3 <= 16'hc403;
      25: out3 <= 16'hc2fd;
      26: out3 <= 16'hc21d;
      27: out3 <= 16'hc163;
      28: out3 <= 16'hc0d0;
      29: out3 <= 16'hc064;
      30: out3 <= 16'hc01f;
      31: out3 <= 16'hc001;
      32: out3 <= 16'hc00b;
      33: out3 <= 16'hc03c;
      34: out3 <= 16'hc095;
      35: out3 <= 16'hc115;
      36: out3 <= 16'hc1bb;
      37: out3 <= 16'hc288;
      38: out3 <= 16'hc37b;
      39: out3 <= 16'hc493;
      40: out3 <= 16'hc5d0;
      41: out3 <= 16'hc731;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hca5b;
      44: out3 <= 16'hcc21;
      45: out3 <= 16'hce08;
      46: out3 <= 16'hd00e;
      47: out3 <= 16'hd231;
      48: out3 <= 16'hd471;
      49: out3 <= 16'hd6cb;
      50: out3 <= 16'hd93f;
      51: out3 <= 16'hdbcb;
      52: out3 <= 16'hde6d;
      53: out3 <= 16'he124;
      54: out3 <= 16'he3ee;
      55: out3 <= 16'he6c9;
      56: out3 <= 16'he9b4;
      57: out3 <= 16'hecac;
      58: out3 <= 16'hefb0;
      59: out3 <= 16'hf2bf;
      60: out3 <= 16'hf5d5;
      61: out3 <= 16'hf8f2;
      62: out3 <= 16'hfc13;
      63: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D26_67911(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfcdc;
      2: out3 <= 16'hf9ba;
      3: out3 <= 16'hf69c;
      4: out3 <= 16'hf384;
      5: out3 <= 16'hf073;
      6: out3 <= 16'hed6c;
      7: out3 <= 16'hea70;
      8: out3 <= 16'he782;
      9: out3 <= 16'he4a3;
      10: out3 <= 16'he1d5;
      11: out3 <= 16'hdf19;
      12: out3 <= 16'hdc72;
      13: out3 <= 16'hd9e0;
      14: out3 <= 16'hd766;
      15: out3 <= 16'hd505;
      16: out3 <= 16'hd2bf;
      17: out3 <= 16'hd094;
      18: out3 <= 16'hce87;
      19: out3 <= 16'hcc98;
      20: out3 <= 16'hcac9;
      21: out3 <= 16'hc91b;
      22: out3 <= 16'hc78f;
      23: out3 <= 16'hc625;
      24: out3 <= 16'hc4df;
      25: out3 <= 16'hc3be;
      26: out3 <= 16'hc2c1;
      27: out3 <= 16'hc1eb;
      28: out3 <= 16'hc13b;
      29: out3 <= 16'hc0b1;
      30: out3 <= 16'hc04f;
      31: out3 <= 16'hc014;
      32: out3 <= 16'hc000;
      33: out3 <= 16'hc014;
      34: out3 <= 16'hc04f;
      35: out3 <= 16'hc0b1;
      36: out3 <= 16'hc13b;
      37: out3 <= 16'hc1eb;
      38: out3 <= 16'hc2c1;
      39: out3 <= 16'hc3be;
      40: out3 <= 16'hc4df;
      41: out3 <= 16'hc625;
      42: out3 <= 16'hc78f;
      43: out3 <= 16'hc91b;
      44: out3 <= 16'hcac9;
      45: out3 <= 16'hcc98;
      46: out3 <= 16'hce87;
      47: out3 <= 16'hd094;
      48: out3 <= 16'hd2bf;
      49: out3 <= 16'hd505;
      50: out3 <= 16'hd766;
      51: out3 <= 16'hd9e0;
      52: out3 <= 16'hdc72;
      53: out3 <= 16'hdf19;
      54: out3 <= 16'he1d5;
      55: out3 <= 16'he4a3;
      56: out3 <= 16'he782;
      57: out3 <= 16'hea70;
      58: out3 <= 16'hed6c;
      59: out3 <= 16'hf073;
      60: out3 <= 16'hf384;
      61: out3 <= 16'hf69c;
      62: out3 <= 16'hf9ba;
      63: out3 <= 16'hfcdc;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D30_67977(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfe6e;
      1: out3 <= 16'hfb4b;
      2: out3 <= 16'hf82a;
      3: out3 <= 16'hf50f;
      4: out3 <= 16'hf1fa;
      5: out3 <= 16'heeee;
      6: out3 <= 16'hebed;
      7: out3 <= 16'he8f7;
      8: out3 <= 16'he611;
      9: out3 <= 16'he33a;
      10: out3 <= 16'he074;
      11: out3 <= 16'hddc3;
      12: out3 <= 16'hdb26;
      13: out3 <= 16'hd8a0;
      14: out3 <= 16'hd632;
      15: out3 <= 16'hd3df;
      16: out3 <= 16'hd1a6;
      17: out3 <= 16'hcf8a;
      18: out3 <= 16'hcd8c;
      19: out3 <= 16'hcbad;
      20: out3 <= 16'hc9ee;
      21: out3 <= 16'hc850;
      22: out3 <= 16'hc6d5;
      23: out3 <= 16'hc57e;
      24: out3 <= 16'hc44a;
      25: out3 <= 16'hc33b;
      26: out3 <= 16'hc251;
      27: out3 <= 16'hc18e;
      28: out3 <= 16'hc0f1;
      29: out3 <= 16'hc07b;
      30: out3 <= 16'hc02c;
      31: out3 <= 16'hc005;
      32: out3 <= 16'hc005;
      33: out3 <= 16'hc02c;
      34: out3 <= 16'hc07b;
      35: out3 <= 16'hc0f1;
      36: out3 <= 16'hc18e;
      37: out3 <= 16'hc251;
      38: out3 <= 16'hc33b;
      39: out3 <= 16'hc44a;
      40: out3 <= 16'hc57e;
      41: out3 <= 16'hc6d5;
      42: out3 <= 16'hc850;
      43: out3 <= 16'hc9ee;
      44: out3 <= 16'hcbad;
      45: out3 <= 16'hcd8c;
      46: out3 <= 16'hcf8a;
      47: out3 <= 16'hd1a6;
      48: out3 <= 16'hd3df;
      49: out3 <= 16'hd632;
      50: out3 <= 16'hd8a0;
      51: out3 <= 16'hdb26;
      52: out3 <= 16'hddc3;
      53: out3 <= 16'he074;
      54: out3 <= 16'he33a;
      55: out3 <= 16'he611;
      56: out3 <= 16'he8f7;
      57: out3 <= 16'hebed;
      58: out3 <= 16'heeee;
      59: out3 <= 16'hf1fa;
      60: out3 <= 16'hf50f;
      61: out3 <= 16'hf82a;
      62: out3 <= 16'hfb4b;
      63: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D28_68175(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [5:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfc13;
      2: out3 <= 16'hf8f2;
      3: out3 <= 16'hf5d5;
      4: out3 <= 16'hf2bf;
      5: out3 <= 16'hefb0;
      6: out3 <= 16'hecac;
      7: out3 <= 16'he9b4;
      8: out3 <= 16'he6c9;
      9: out3 <= 16'he3ee;
      10: out3 <= 16'he124;
      11: out3 <= 16'hde6d;
      12: out3 <= 16'hdbcb;
      13: out3 <= 16'hd93f;
      14: out3 <= 16'hd6cb;
      15: out3 <= 16'hd471;
      16: out3 <= 16'hd231;
      17: out3 <= 16'hd00e;
      18: out3 <= 16'hce08;
      19: out3 <= 16'hcc21;
      20: out3 <= 16'hca5b;
      21: out3 <= 16'hc8b5;
      22: out3 <= 16'hc731;
      23: out3 <= 16'hc5d0;
      24: out3 <= 16'hc493;
      25: out3 <= 16'hc37b;
      26: out3 <= 16'hc288;
      27: out3 <= 16'hc1bb;
      28: out3 <= 16'hc115;
      29: out3 <= 16'hc095;
      30: out3 <= 16'hc03c;
      31: out3 <= 16'hc00b;
      32: out3 <= 16'hc001;
      33: out3 <= 16'hc01f;
      34: out3 <= 16'hc064;
      35: out3 <= 16'hc0d0;
      36: out3 <= 16'hc163;
      37: out3 <= 16'hc21d;
      38: out3 <= 16'hc2fd;
      39: out3 <= 16'hc403;
      40: out3 <= 16'hc52d;
      41: out3 <= 16'hc67c;
      42: out3 <= 16'hc7ee;
      43: out3 <= 16'hc983;
      44: out3 <= 16'hcb3a;
      45: out3 <= 16'hcd11;
      46: out3 <= 16'hcf07;
      47: out3 <= 16'hd11c;
      48: out3 <= 16'hd34e;
      49: out3 <= 16'hd59b;
      50: out3 <= 16'hd802;
      51: out3 <= 16'hda82;
      52: out3 <= 16'hdd19;
      53: out3 <= 16'hdfc6;
      54: out3 <= 16'he287;
      55: out3 <= 16'he559;
      56: out3 <= 16'he83c;
      57: out3 <= 16'heb2e;
      58: out3 <= 16'hee2d;
      59: out3 <= 16'hf136;
      60: out3 <= 16'hf449;
      61: out3 <= 16'hf763;
      62: out3 <= 16'hfa82;
      63: out3 <= 16'hfda5;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock66479(clk, reset, next_in, next_out,
   i2_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [5:0] i2_in;
   reg [5:0] i2;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76808(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a450;
   wire signed [15:0] a403;
   wire signed [15:0] a453;
   wire signed [15:0] a407;
   wire signed [15:0] a454;
   wire signed [15:0] a455;
   wire signed [15:0] a458;
   wire signed [15:0] a415;
   wire signed [15:0] a461;
   wire signed [15:0] a419;
   wire signed [15:0] a462;
   wire signed [15:0] a463;
   wire signed [15:0] a466;
   wire signed [15:0] a427;
   wire signed [15:0] a469;
   wire signed [15:0] a431;
   wire signed [15:0] a470;
   wire signed [15:0] a471;
   wire signed [15:0] a474;
   wire signed [15:0] a439;
   wire signed [15:0] a477;
   wire signed [15:0] a443;
   wire signed [15:0] a478;
   wire signed [15:0] a479;
   reg signed [15:0] tm1394;
   reg signed [15:0] tm1398;
   reg signed [15:0] tm1410;
   reg signed [15:0] tm1414;
   reg signed [15:0] tm1426;
   reg signed [15:0] tm1430;
   reg signed [15:0] tm1442;
   reg signed [15:0] tm1446;
   reg signed [15:0] tm1458;
   reg signed [15:0] tm1465;
   reg signed [15:0] tm1472;
   reg signed [15:0] tm1479;
   reg signed [15:0] tm1486;
   reg signed [15:0] tm1493;
   reg signed [15:0] tm1500;
   reg signed [15:0] tm1507;
   reg signed [15:0] tm1395;
   reg signed [15:0] tm1399;
   reg signed [15:0] tm1411;
   reg signed [15:0] tm1415;
   reg signed [15:0] tm1427;
   reg signed [15:0] tm1431;
   reg signed [15:0] tm1443;
   reg signed [15:0] tm1447;
   reg signed [15:0] tm1459;
   reg signed [15:0] tm1466;
   reg signed [15:0] tm1473;
   reg signed [15:0] tm1480;
   reg signed [15:0] tm1487;
   reg signed [15:0] tm1494;
   reg signed [15:0] tm1501;
   reg signed [15:0] tm1508;
   wire signed [15:0] tm93;
   wire signed [15:0] a408;
   wire signed [15:0] tm94;
   wire signed [15:0] a410;
   wire signed [15:0] tm97;
   wire signed [15:0] a420;
   wire signed [15:0] tm98;
   wire signed [15:0] a422;
   wire signed [15:0] tm101;
   wire signed [15:0] a432;
   wire signed [15:0] tm102;
   wire signed [15:0] a434;
   wire signed [15:0] tm105;
   wire signed [15:0] a444;
   wire signed [15:0] tm106;
   wire signed [15:0] a446;
   reg signed [15:0] tm1396;
   reg signed [15:0] tm1400;
   reg signed [15:0] tm1412;
   reg signed [15:0] tm1416;
   reg signed [15:0] tm1428;
   reg signed [15:0] tm1432;
   reg signed [15:0] tm1444;
   reg signed [15:0] tm1448;
   reg signed [15:0] tm1460;
   reg signed [15:0] tm1467;
   reg signed [15:0] tm1474;
   reg signed [15:0] tm1481;
   reg signed [15:0] tm1488;
   reg signed [15:0] tm1495;
   reg signed [15:0] tm1502;
   reg signed [15:0] tm1509;
   reg signed [15:0] tm289;
   reg signed [15:0] tm290;
   reg signed [15:0] tm297;
   reg signed [15:0] tm298;
   reg signed [15:0] tm305;
   reg signed [15:0] tm306;
   reg signed [15:0] tm313;
   reg signed [15:0] tm314;
   reg signed [15:0] tm1397;
   reg signed [15:0] tm1401;
   reg signed [15:0] tm1413;
   reg signed [15:0] tm1417;
   reg signed [15:0] tm1429;
   reg signed [15:0] tm1433;
   reg signed [15:0] tm1445;
   reg signed [15:0] tm1449;
   reg signed [15:0] tm1461;
   reg signed [15:0] tm1468;
   reg signed [15:0] tm1475;
   reg signed [15:0] tm1482;
   reg signed [15:0] tm1489;
   reg signed [15:0] tm1496;
   reg signed [15:0] tm1503;
   reg signed [15:0] tm1510;
   reg signed [15:0] tm1462;
   reg signed [15:0] tm1469;
   reg signed [15:0] tm1476;
   reg signed [15:0] tm1483;
   reg signed [15:0] tm1490;
   reg signed [15:0] tm1497;
   reg signed [15:0] tm1504;
   reg signed [15:0] tm1511;
   wire signed [15:0] a409;
   wire signed [15:0] a411;
   wire signed [15:0] a412;
   wire signed [15:0] a413;
   wire signed [15:0] a421;
   wire signed [15:0] a423;
   wire signed [15:0] a424;
   wire signed [15:0] a425;
   wire signed [15:0] a433;
   wire signed [15:0] a435;
   wire signed [15:0] a436;
   wire signed [15:0] a437;
   wire signed [15:0] a445;
   wire signed [15:0] a447;
   wire signed [15:0] a448;
   wire signed [15:0] a449;
   reg signed [15:0] tm1463;
   reg signed [15:0] tm1470;
   reg signed [15:0] tm1477;
   reg signed [15:0] tm1484;
   reg signed [15:0] tm1491;
   reg signed [15:0] tm1498;
   reg signed [15:0] tm1505;
   reg signed [15:0] tm1512;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1464;
   reg signed [15:0] tm1471;
   reg signed [15:0] tm1478;
   reg signed [15:0] tm1485;
   reg signed [15:0] tm1492;
   reg signed [15:0] tm1499;
   reg signed [15:0] tm1506;
   reg signed [15:0] tm1513;


   assign a450 = X0;
   assign a403 = a450;
   assign a453 = X1;
   assign a407 = a453;
   assign a454 = X2;
   assign a455 = X3;
   assign a458 = X4;
   assign a415 = a458;
   assign a461 = X5;
   assign a419 = a461;
   assign a462 = X6;
   assign a463 = X7;
   assign a466 = X8;
   assign a427 = a466;
   assign a469 = X9;
   assign a431 = a469;
   assign a470 = X10;
   assign a471 = X11;
   assign a474 = X12;
   assign a439 = a474;
   assign a477 = X13;
   assign a443 = a477;
   assign a478 = X14;
   assign a479 = X15;
   assign a408 = tm93;
   assign a410 = tm94;
   assign a420 = tm97;
   assign a422 = tm98;
   assign a432 = tm101;
   assign a434 = tm102;
   assign a444 = tm105;
   assign a446 = tm106;
   assign Y0 = tm1464;
   assign Y1 = tm1471;
   assign Y4 = tm1478;
   assign Y5 = tm1485;
   assign Y8 = tm1492;
   assign Y9 = tm1499;
   assign Y12 = tm1506;
   assign Y13 = tm1513;

   D20_67185 instD20inst0_67185(.addr(i2[5:0]), .out(tm97), .clk(clk));

   D18_67383 instD18inst0_67383(.addr(i2[5:0]), .out(tm93), .clk(clk));

   D22_67449 instD22inst0_67449(.addr(i2[5:0]), .out(tm101), .clk(clk));

   D24_67647 instD24inst0_67647(.addr(i2[5:0]), .out(tm105), .clk(clk));

   D32_67713 instD32inst0_67713(.addr(i2[5:0]), .out(tm106), .clk(clk));

   D26_67911 instD26inst0_67911(.addr(i2[5:0]), .out(tm94), .clk(clk));

   D30_67977 instD30inst0_67977(.addr(i2[5:0]), .out(tm102), .clk(clk));

   D28_68175 instD28inst0_68175(.addr(i2[5:0]), .out(tm98), .clk(clk));

    multfix #(16, 2) m66578(.a(tm289), .b(tm1397), .clk(clk), .q_sc(a409), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66600(.a(tm290), .b(tm1401), .clk(clk), .q_sc(a411), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66618(.a(tm290), .b(tm1397), .clk(clk), .q_sc(a412), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66629(.a(tm289), .b(tm1401), .clk(clk), .q_sc(a413), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66738(.a(tm297), .b(tm1413), .clk(clk), .q_sc(a421), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66760(.a(tm298), .b(tm1417), .clk(clk), .q_sc(a423), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66778(.a(tm298), .b(tm1413), .clk(clk), .q_sc(a424), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66789(.a(tm297), .b(tm1417), .clk(clk), .q_sc(a425), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66898(.a(tm305), .b(tm1429), .clk(clk), .q_sc(a433), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66920(.a(tm306), .b(tm1433), .clk(clk), .q_sc(a435), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66938(.a(tm306), .b(tm1429), .clk(clk), .q_sc(a436), .q_unsc(), .rst(reset));
    multfix #(16, 2) m66949(.a(tm305), .b(tm1433), .clk(clk), .q_sc(a437), .q_unsc(), .rst(reset));
    multfix #(16, 2) m67058(.a(tm313), .b(tm1445), .clk(clk), .q_sc(a445), .q_unsc(), .rst(reset));
    multfix #(16, 2) m67080(.a(tm314), .b(tm1449), .clk(clk), .q_sc(a447), .q_unsc(), .rst(reset));
    multfix #(16, 2) m67098(.a(tm314), .b(tm1445), .clk(clk), .q_sc(a448), .q_unsc(), .rst(reset));
    multfix #(16, 2) m67109(.a(tm313), .b(tm1449), .clk(clk), .q_sc(a449), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub66607(.a(a409), .b(a411), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add66636(.a(a412), .b(a413), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub66767(.a(a421), .b(a423), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add66796(.a(a424), .b(a425), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub66927(.a(a433), .b(a435), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add66956(.a(a436), .b(a437), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub67087(.a(a445), .b(a447), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add67116(.a(a448), .b(a449), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm289 <= 0;
         tm1397 <= 0;
         tm290 <= 0;
         tm1401 <= 0;
         tm290 <= 0;
         tm1397 <= 0;
         tm289 <= 0;
         tm1401 <= 0;
         tm297 <= 0;
         tm1413 <= 0;
         tm298 <= 0;
         tm1417 <= 0;
         tm298 <= 0;
         tm1413 <= 0;
         tm297 <= 0;
         tm1417 <= 0;
         tm305 <= 0;
         tm1429 <= 0;
         tm306 <= 0;
         tm1433 <= 0;
         tm306 <= 0;
         tm1429 <= 0;
         tm305 <= 0;
         tm1433 <= 0;
         tm313 <= 0;
         tm1445 <= 0;
         tm314 <= 0;
         tm1449 <= 0;
         tm314 <= 0;
         tm1445 <= 0;
         tm313 <= 0;
         tm1449 <= 0;
      end
      else begin
         i2 <= i2_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1394 <= a454;
         tm1398 <= a455;
         tm1410 <= a462;
         tm1414 <= a463;
         tm1426 <= a470;
         tm1430 <= a471;
         tm1442 <= a478;
         tm1446 <= a479;
         tm1458 <= a403;
         tm1465 <= a407;
         tm1472 <= a415;
         tm1479 <= a419;
         tm1486 <= a427;
         tm1493 <= a431;
         tm1500 <= a439;
         tm1507 <= a443;
         tm1395 <= tm1394;
         tm1399 <= tm1398;
         tm1411 <= tm1410;
         tm1415 <= tm1414;
         tm1427 <= tm1426;
         tm1431 <= tm1430;
         tm1443 <= tm1442;
         tm1447 <= tm1446;
         tm1459 <= tm1458;
         tm1466 <= tm1465;
         tm1473 <= tm1472;
         tm1480 <= tm1479;
         tm1487 <= tm1486;
         tm1494 <= tm1493;
         tm1501 <= tm1500;
         tm1508 <= tm1507;
         tm1396 <= tm1395;
         tm1400 <= tm1399;
         tm1412 <= tm1411;
         tm1416 <= tm1415;
         tm1428 <= tm1427;
         tm1432 <= tm1431;
         tm1444 <= tm1443;
         tm1448 <= tm1447;
         tm1460 <= tm1459;
         tm1467 <= tm1466;
         tm1474 <= tm1473;
         tm1481 <= tm1480;
         tm1488 <= tm1487;
         tm1495 <= tm1494;
         tm1502 <= tm1501;
         tm1509 <= tm1508;
         tm289 <= a408;
         tm290 <= a410;
         tm297 <= a420;
         tm298 <= a422;
         tm305 <= a432;
         tm306 <= a434;
         tm313 <= a444;
         tm314 <= a446;
         tm1397 <= tm1396;
         tm1401 <= tm1400;
         tm1413 <= tm1412;
         tm1417 <= tm1416;
         tm1429 <= tm1428;
         tm1433 <= tm1432;
         tm1445 <= tm1444;
         tm1449 <= tm1448;
         tm1461 <= tm1460;
         tm1468 <= tm1467;
         tm1475 <= tm1474;
         tm1482 <= tm1481;
         tm1489 <= tm1488;
         tm1496 <= tm1495;
         tm1503 <= tm1502;
         tm1510 <= tm1509;
         tm1462 <= tm1461;
         tm1469 <= tm1468;
         tm1476 <= tm1475;
         tm1483 <= tm1482;
         tm1490 <= tm1489;
         tm1497 <= tm1496;
         tm1504 <= tm1503;
         tm1511 <= tm1510;
         tm1463 <= tm1462;
         tm1470 <= tm1469;
         tm1477 <= tm1476;
         tm1484 <= tm1483;
         tm1491 <= tm1490;
         tm1498 <= tm1497;
         tm1505 <= tm1504;
         tm1512 <= tm1511;
         tm1464 <= tm1463;
         tm1471 <= tm1470;
         tm1478 <= tm1477;
         tm1485 <= tm1484;
         tm1492 <= tm1491;
         tm1499 <= tm1498;
         tm1506 <= tm1505;
         tm1513 <= tm1512;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock68180(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76811(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a273;
   wire signed [15:0] a274;
   wire signed [15:0] a275;
   wire signed [15:0] a276;
   wire signed [15:0] a281;
   wire signed [15:0] a282;
   wire signed [15:0] a283;
   wire signed [15:0] a284;
   wire signed [15:0] a289;
   wire signed [15:0] a290;
   wire signed [15:0] a291;
   wire signed [15:0] a292;
   wire signed [15:0] a297;
   wire signed [15:0] a298;
   wire signed [15:0] a299;
   wire signed [15:0] a300;
   wire signed [15:0] t193;
   wire signed [15:0] t194;
   wire signed [15:0] t195;
   wire signed [15:0] t196;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t197;
   wire signed [15:0] t198;
   wire signed [15:0] t199;
   wire signed [15:0] t200;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t201;
   wire signed [15:0] t202;
   wire signed [15:0] t203;
   wire signed [15:0] t204;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t205;
   wire signed [15:0] t206;
   wire signed [15:0] t207;
   wire signed [15:0] t208;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a273 = X0;
   assign a274 = X2;
   assign a275 = X1;
   assign a276 = X3;
   assign a281 = X4;
   assign a282 = X6;
   assign a283 = X5;
   assign a284 = X7;
   assign a289 = X8;
   assign a290 = X10;
   assign a291 = X9;
   assign a292 = X11;
   assign a297 = X12;
   assign a298 = X14;
   assign a299 = X13;
   assign a300 = X15;
   assign Y0 = t193;
   assign Y1 = t194;
   assign Y2 = t195;
   assign Y3 = t196;
   assign Y4 = t197;
   assign Y5 = t198;
   assign Y6 = t199;
   assign Y7 = t200;
   assign Y8 = t201;
   assign Y9 = t202;
   assign Y10 = t203;
   assign Y11 = t204;
   assign Y12 = t205;
   assign Y13 = t206;
   assign Y14 = t207;
   assign Y15 = t208;

    addfxp #(16, 1) add68192(.a(a273), .b(a274), .clk(clk), .q(t193));    // 0
    addfxp #(16, 1) add68207(.a(a275), .b(a276), .clk(clk), .q(t194));    // 0
    subfxp #(16, 1) sub68222(.a(a273), .b(a274), .clk(clk), .q(t195));    // 0
    subfxp #(16, 1) sub68237(.a(a275), .b(a276), .clk(clk), .q(t196));    // 0
    addfxp #(16, 1) add68268(.a(a281), .b(a282), .clk(clk), .q(t197));    // 0
    addfxp #(16, 1) add68283(.a(a283), .b(a284), .clk(clk), .q(t198));    // 0
    subfxp #(16, 1) sub68298(.a(a281), .b(a282), .clk(clk), .q(t199));    // 0
    subfxp #(16, 1) sub68313(.a(a283), .b(a284), .clk(clk), .q(t200));    // 0
    addfxp #(16, 1) add68344(.a(a289), .b(a290), .clk(clk), .q(t201));    // 0
    addfxp #(16, 1) add68359(.a(a291), .b(a292), .clk(clk), .q(t202));    // 0
    subfxp #(16, 1) sub68374(.a(a289), .b(a290), .clk(clk), .q(t203));    // 0
    subfxp #(16, 1) sub68389(.a(a291), .b(a292), .clk(clk), .q(t204));    // 0
    addfxp #(16, 1) add68420(.a(a297), .b(a298), .clk(clk), .q(t205));    // 0
    addfxp #(16, 1) add68435(.a(a299), .b(a300), .clk(clk), .q(t206));    // 0
    subfxp #(16, 1) sub68450(.a(a297), .b(a298), .clk(clk), .q(t207));    // 0
    subfxp #(16, 1) sub68465(.a(a299), .b(a300), .clk(clk), .q(t208));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 262
// Gap: 128
module rc68490(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm68488 instPerm76812(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet68488(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 4'b1111;
        7'd1: control <= 4'b1111;
        7'd2: control <= 4'b1111;
        7'd3: control <= 4'b1111;
        7'd4: control <= 4'b1111;
        7'd5: control <= 4'b1111;
        7'd6: control <= 4'b1111;
        7'd7: control <= 4'b1111;
        7'd8: control <= 4'b1111;
        7'd9: control <= 4'b1111;
        7'd10: control <= 4'b1111;
        7'd11: control <= 4'b1111;
        7'd12: control <= 4'b1111;
        7'd13: control <= 4'b1111;
        7'd14: control <= 4'b1111;
        7'd15: control <= 4'b1111;
        7'd16: control <= 4'b1111;
        7'd17: control <= 4'b1111;
        7'd18: control <= 4'b1111;
        7'd19: control <= 4'b1111;
        7'd20: control <= 4'b1111;
        7'd21: control <= 4'b1111;
        7'd22: control <= 4'b1111;
        7'd23: control <= 4'b1111;
        7'd24: control <= 4'b1111;
        7'd25: control <= 4'b1111;
        7'd26: control <= 4'b1111;
        7'd27: control <= 4'b1111;
        7'd28: control <= 4'b1111;
        7'd29: control <= 4'b1111;
        7'd30: control <= 4'b1111;
        7'd31: control <= 4'b1111;
        7'd32: control <= 4'b1111;
        7'd33: control <= 4'b1111;
        7'd34: control <= 4'b1111;
        7'd35: control <= 4'b1111;
        7'd36: control <= 4'b1111;
        7'd37: control <= 4'b1111;
        7'd38: control <= 4'b1111;
        7'd39: control <= 4'b1111;
        7'd40: control <= 4'b1111;
        7'd41: control <= 4'b1111;
        7'd42: control <= 4'b1111;
        7'd43: control <= 4'b1111;
        7'd44: control <= 4'b1111;
        7'd45: control <= 4'b1111;
        7'd46: control <= 4'b1111;
        7'd47: control <= 4'b1111;
        7'd48: control <= 4'b1111;
        7'd49: control <= 4'b1111;
        7'd50: control <= 4'b1111;
        7'd51: control <= 4'b1111;
        7'd52: control <= 4'b1111;
        7'd53: control <= 4'b1111;
        7'd54: control <= 4'b1111;
        7'd55: control <= 4'b1111;
        7'd56: control <= 4'b1111;
        7'd57: control <= 4'b1111;
        7'd58: control <= 4'b1111;
        7'd59: control <= 4'b1111;
        7'd60: control <= 4'b1111;
        7'd61: control <= 4'b1111;
        7'd62: control <= 4'b1111;
        7'd63: control <= 4'b1111;
        7'd64: control <= 4'b0000;
        7'd65: control <= 4'b0000;
        7'd66: control <= 4'b0000;
        7'd67: control <= 4'b0000;
        7'd68: control <= 4'b0000;
        7'd69: control <= 4'b0000;
        7'd70: control <= 4'b0000;
        7'd71: control <= 4'b0000;
        7'd72: control <= 4'b0000;
        7'd73: control <= 4'b0000;
        7'd74: control <= 4'b0000;
        7'd75: control <= 4'b0000;
        7'd76: control <= 4'b0000;
        7'd77: control <= 4'b0000;
        7'd78: control <= 4'b0000;
        7'd79: control <= 4'b0000;
        7'd80: control <= 4'b0000;
        7'd81: control <= 4'b0000;
        7'd82: control <= 4'b0000;
        7'd83: control <= 4'b0000;
        7'd84: control <= 4'b0000;
        7'd85: control <= 4'b0000;
        7'd86: control <= 4'b0000;
        7'd87: control <= 4'b0000;
        7'd88: control <= 4'b0000;
        7'd89: control <= 4'b0000;
        7'd90: control <= 4'b0000;
        7'd91: control <= 4'b0000;
        7'd92: control <= 4'b0000;
        7'd93: control <= 4'b0000;
        7'd94: control <= 4'b0000;
        7'd95: control <= 4'b0000;
        7'd96: control <= 4'b0000;
        7'd97: control <= 4'b0000;
        7'd98: control <= 4'b0000;
        7'd99: control <= 4'b0000;
        7'd100: control <= 4'b0000;
        7'd101: control <= 4'b0000;
        7'd102: control <= 4'b0000;
        7'd103: control <= 4'b0000;
        7'd104: control <= 4'b0000;
        7'd105: control <= 4'b0000;
        7'd106: control <= 4'b0000;
        7'd107: control <= 4'b0000;
        7'd108: control <= 4'b0000;
        7'd109: control <= 4'b0000;
        7'd110: control <= 4'b0000;
        7'd111: control <= 4'b0000;
        7'd112: control <= 4'b0000;
        7'd113: control <= 4'b0000;
        7'd114: control <= 4'b0000;
        7'd115: control <= 4'b0000;
        7'd116: control <= 4'b0000;
        7'd117: control <= 4'b0000;
        7'd118: control <= 4'b0000;
        7'd119: control <= 4'b0000;
        7'd120: control <= 4'b0000;
        7'd121: control <= 4'b0000;
        7'd122: control <= 4'b0000;
        7'd123: control <= 4'b0000;
        7'd124: control <= 4'b0000;
        7'd125: control <= 4'b0000;
        7'd126: control <= 4'b0000;
        7'd127: control <= 4'b0000;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_2;
     assign t1_3 = t0_3;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_6;
     assign t1_7 = t0_7;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_4;
         t3_5 <= t2_5;
         t3_6 <= t2_6;
         t3_7 <= t2_7;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = (control1[3] == 0) ? t4_0 : t4_1;
     assign t5_1 = (control1[3] == 0) ? t4_1 : t4_0;
     assign t5_2 = (control1[2] == 0) ? t4_2 : t4_3;
     assign t5_3 = (control1[2] == 0) ? t4_3 : t4_2;
     assign t5_4 = (control1[1] == 0) ? t4_4 : t4_5;
     assign t5_5 = (control1[1] == 0) ? t4_5 : t4_4;
     assign t5_6 = (control1[0] == 0) ? t4_6 : t4_7;
     assign t5_7 = (control1[0] == 0) ? t4_7 : t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_2;
         t7_3 <= t6_3;
         t7_4 <= t6_4;
         t7_5 <= t6_5;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= t8_0;
         t9_1 <= t8_1;
         t9_2 <= t8_2;
         t9_3 <= t8_3;
         t9_4 <= t8_4;
         t9_5 <= t8_5;
         t9_6 <= t8_6;
         t9_7 <= t8_7;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm68488(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm107;
   assign tm107 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76817(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76818(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_76829(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76830(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_76833(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76834(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_76837(.X(tm107), .Y(tm107_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76840(.X(tm107_d), .Y(tm107_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_76845(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 64;
	     {1'd0,  7'd1}: s1rd0 <= 65;
	     {1'd0,  7'd2}: s1rd0 <= 66;
	     {1'd0,  7'd3}: s1rd0 <= 67;
	     {1'd0,  7'd4}: s1rd0 <= 68;
	     {1'd0,  7'd5}: s1rd0 <= 69;
	     {1'd0,  7'd6}: s1rd0 <= 70;
	     {1'd0,  7'd7}: s1rd0 <= 71;
	     {1'd0,  7'd8}: s1rd0 <= 72;
	     {1'd0,  7'd9}: s1rd0 <= 73;
	     {1'd0,  7'd10}: s1rd0 <= 74;
	     {1'd0,  7'd11}: s1rd0 <= 75;
	     {1'd0,  7'd12}: s1rd0 <= 76;
	     {1'd0,  7'd13}: s1rd0 <= 77;
	     {1'd0,  7'd14}: s1rd0 <= 78;
	     {1'd0,  7'd15}: s1rd0 <= 79;
	     {1'd0,  7'd16}: s1rd0 <= 80;
	     {1'd0,  7'd17}: s1rd0 <= 81;
	     {1'd0,  7'd18}: s1rd0 <= 82;
	     {1'd0,  7'd19}: s1rd0 <= 83;
	     {1'd0,  7'd20}: s1rd0 <= 84;
	     {1'd0,  7'd21}: s1rd0 <= 85;
	     {1'd0,  7'd22}: s1rd0 <= 86;
	     {1'd0,  7'd23}: s1rd0 <= 87;
	     {1'd0,  7'd24}: s1rd0 <= 88;
	     {1'd0,  7'd25}: s1rd0 <= 89;
	     {1'd0,  7'd26}: s1rd0 <= 90;
	     {1'd0,  7'd27}: s1rd0 <= 91;
	     {1'd0,  7'd28}: s1rd0 <= 92;
	     {1'd0,  7'd29}: s1rd0 <= 93;
	     {1'd0,  7'd30}: s1rd0 <= 94;
	     {1'd0,  7'd31}: s1rd0 <= 95;
	     {1'd0,  7'd32}: s1rd0 <= 96;
	     {1'd0,  7'd33}: s1rd0 <= 97;
	     {1'd0,  7'd34}: s1rd0 <= 98;
	     {1'd0,  7'd35}: s1rd0 <= 99;
	     {1'd0,  7'd36}: s1rd0 <= 100;
	     {1'd0,  7'd37}: s1rd0 <= 101;
	     {1'd0,  7'd38}: s1rd0 <= 102;
	     {1'd0,  7'd39}: s1rd0 <= 103;
	     {1'd0,  7'd40}: s1rd0 <= 104;
	     {1'd0,  7'd41}: s1rd0 <= 105;
	     {1'd0,  7'd42}: s1rd0 <= 106;
	     {1'd0,  7'd43}: s1rd0 <= 107;
	     {1'd0,  7'd44}: s1rd0 <= 108;
	     {1'd0,  7'd45}: s1rd0 <= 109;
	     {1'd0,  7'd46}: s1rd0 <= 110;
	     {1'd0,  7'd47}: s1rd0 <= 111;
	     {1'd0,  7'd48}: s1rd0 <= 112;
	     {1'd0,  7'd49}: s1rd0 <= 113;
	     {1'd0,  7'd50}: s1rd0 <= 114;
	     {1'd0,  7'd51}: s1rd0 <= 115;
	     {1'd0,  7'd52}: s1rd0 <= 116;
	     {1'd0,  7'd53}: s1rd0 <= 117;
	     {1'd0,  7'd54}: s1rd0 <= 118;
	     {1'd0,  7'd55}: s1rd0 <= 119;
	     {1'd0,  7'd56}: s1rd0 <= 120;
	     {1'd0,  7'd57}: s1rd0 <= 121;
	     {1'd0,  7'd58}: s1rd0 <= 122;
	     {1'd0,  7'd59}: s1rd0 <= 123;
	     {1'd0,  7'd60}: s1rd0 <= 124;
	     {1'd0,  7'd61}: s1rd0 <= 125;
	     {1'd0,  7'd62}: s1rd0 <= 126;
	     {1'd0,  7'd63}: s1rd0 <= 127;
	     {1'd0,  7'd64}: s1rd0 <= 0;
	     {1'd0,  7'd65}: s1rd0 <= 1;
	     {1'd0,  7'd66}: s1rd0 <= 2;
	     {1'd0,  7'd67}: s1rd0 <= 3;
	     {1'd0,  7'd68}: s1rd0 <= 4;
	     {1'd0,  7'd69}: s1rd0 <= 5;
	     {1'd0,  7'd70}: s1rd0 <= 6;
	     {1'd0,  7'd71}: s1rd0 <= 7;
	     {1'd0,  7'd72}: s1rd0 <= 8;
	     {1'd0,  7'd73}: s1rd0 <= 9;
	     {1'd0,  7'd74}: s1rd0 <= 10;
	     {1'd0,  7'd75}: s1rd0 <= 11;
	     {1'd0,  7'd76}: s1rd0 <= 12;
	     {1'd0,  7'd77}: s1rd0 <= 13;
	     {1'd0,  7'd78}: s1rd0 <= 14;
	     {1'd0,  7'd79}: s1rd0 <= 15;
	     {1'd0,  7'd80}: s1rd0 <= 16;
	     {1'd0,  7'd81}: s1rd0 <= 17;
	     {1'd0,  7'd82}: s1rd0 <= 18;
	     {1'd0,  7'd83}: s1rd0 <= 19;
	     {1'd0,  7'd84}: s1rd0 <= 20;
	     {1'd0,  7'd85}: s1rd0 <= 21;
	     {1'd0,  7'd86}: s1rd0 <= 22;
	     {1'd0,  7'd87}: s1rd0 <= 23;
	     {1'd0,  7'd88}: s1rd0 <= 24;
	     {1'd0,  7'd89}: s1rd0 <= 25;
	     {1'd0,  7'd90}: s1rd0 <= 26;
	     {1'd0,  7'd91}: s1rd0 <= 27;
	     {1'd0,  7'd92}: s1rd0 <= 28;
	     {1'd0,  7'd93}: s1rd0 <= 29;
	     {1'd0,  7'd94}: s1rd0 <= 30;
	     {1'd0,  7'd95}: s1rd0 <= 31;
	     {1'd0,  7'd96}: s1rd0 <= 32;
	     {1'd0,  7'd97}: s1rd0 <= 33;
	     {1'd0,  7'd98}: s1rd0 <= 34;
	     {1'd0,  7'd99}: s1rd0 <= 35;
	     {1'd0,  7'd100}: s1rd0 <= 36;
	     {1'd0,  7'd101}: s1rd0 <= 37;
	     {1'd0,  7'd102}: s1rd0 <= 38;
	     {1'd0,  7'd103}: s1rd0 <= 39;
	     {1'd0,  7'd104}: s1rd0 <= 40;
	     {1'd0,  7'd105}: s1rd0 <= 41;
	     {1'd0,  7'd106}: s1rd0 <= 42;
	     {1'd0,  7'd107}: s1rd0 <= 43;
	     {1'd0,  7'd108}: s1rd0 <= 44;
	     {1'd0,  7'd109}: s1rd0 <= 45;
	     {1'd0,  7'd110}: s1rd0 <= 46;
	     {1'd0,  7'd111}: s1rd0 <= 47;
	     {1'd0,  7'd112}: s1rd0 <= 48;
	     {1'd0,  7'd113}: s1rd0 <= 49;
	     {1'd0,  7'd114}: s1rd0 <= 50;
	     {1'd0,  7'd115}: s1rd0 <= 51;
	     {1'd0,  7'd116}: s1rd0 <= 52;
	     {1'd0,  7'd117}: s1rd0 <= 53;
	     {1'd0,  7'd118}: s1rd0 <= 54;
	     {1'd0,  7'd119}: s1rd0 <= 55;
	     {1'd0,  7'd120}: s1rd0 <= 56;
	     {1'd0,  7'd121}: s1rd0 <= 57;
	     {1'd0,  7'd122}: s1rd0 <= 58;
	     {1'd0,  7'd123}: s1rd0 <= 59;
	     {1'd0,  7'd124}: s1rd0 <= 60;
	     {1'd0,  7'd125}: s1rd0 <= 61;
	     {1'd0,  7'd126}: s1rd0 <= 62;
	     {1'd0,  7'd127}: s1rd0 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 0;
	     {1'd0,  7'd1}: s1rd1 <= 1;
	     {1'd0,  7'd2}: s1rd1 <= 2;
	     {1'd0,  7'd3}: s1rd1 <= 3;
	     {1'd0,  7'd4}: s1rd1 <= 4;
	     {1'd0,  7'd5}: s1rd1 <= 5;
	     {1'd0,  7'd6}: s1rd1 <= 6;
	     {1'd0,  7'd7}: s1rd1 <= 7;
	     {1'd0,  7'd8}: s1rd1 <= 8;
	     {1'd0,  7'd9}: s1rd1 <= 9;
	     {1'd0,  7'd10}: s1rd1 <= 10;
	     {1'd0,  7'd11}: s1rd1 <= 11;
	     {1'd0,  7'd12}: s1rd1 <= 12;
	     {1'd0,  7'd13}: s1rd1 <= 13;
	     {1'd0,  7'd14}: s1rd1 <= 14;
	     {1'd0,  7'd15}: s1rd1 <= 15;
	     {1'd0,  7'd16}: s1rd1 <= 16;
	     {1'd0,  7'd17}: s1rd1 <= 17;
	     {1'd0,  7'd18}: s1rd1 <= 18;
	     {1'd0,  7'd19}: s1rd1 <= 19;
	     {1'd0,  7'd20}: s1rd1 <= 20;
	     {1'd0,  7'd21}: s1rd1 <= 21;
	     {1'd0,  7'd22}: s1rd1 <= 22;
	     {1'd0,  7'd23}: s1rd1 <= 23;
	     {1'd0,  7'd24}: s1rd1 <= 24;
	     {1'd0,  7'd25}: s1rd1 <= 25;
	     {1'd0,  7'd26}: s1rd1 <= 26;
	     {1'd0,  7'd27}: s1rd1 <= 27;
	     {1'd0,  7'd28}: s1rd1 <= 28;
	     {1'd0,  7'd29}: s1rd1 <= 29;
	     {1'd0,  7'd30}: s1rd1 <= 30;
	     {1'd0,  7'd31}: s1rd1 <= 31;
	     {1'd0,  7'd32}: s1rd1 <= 32;
	     {1'd0,  7'd33}: s1rd1 <= 33;
	     {1'd0,  7'd34}: s1rd1 <= 34;
	     {1'd0,  7'd35}: s1rd1 <= 35;
	     {1'd0,  7'd36}: s1rd1 <= 36;
	     {1'd0,  7'd37}: s1rd1 <= 37;
	     {1'd0,  7'd38}: s1rd1 <= 38;
	     {1'd0,  7'd39}: s1rd1 <= 39;
	     {1'd0,  7'd40}: s1rd1 <= 40;
	     {1'd0,  7'd41}: s1rd1 <= 41;
	     {1'd0,  7'd42}: s1rd1 <= 42;
	     {1'd0,  7'd43}: s1rd1 <= 43;
	     {1'd0,  7'd44}: s1rd1 <= 44;
	     {1'd0,  7'd45}: s1rd1 <= 45;
	     {1'd0,  7'd46}: s1rd1 <= 46;
	     {1'd0,  7'd47}: s1rd1 <= 47;
	     {1'd0,  7'd48}: s1rd1 <= 48;
	     {1'd0,  7'd49}: s1rd1 <= 49;
	     {1'd0,  7'd50}: s1rd1 <= 50;
	     {1'd0,  7'd51}: s1rd1 <= 51;
	     {1'd0,  7'd52}: s1rd1 <= 52;
	     {1'd0,  7'd53}: s1rd1 <= 53;
	     {1'd0,  7'd54}: s1rd1 <= 54;
	     {1'd0,  7'd55}: s1rd1 <= 55;
	     {1'd0,  7'd56}: s1rd1 <= 56;
	     {1'd0,  7'd57}: s1rd1 <= 57;
	     {1'd0,  7'd58}: s1rd1 <= 58;
	     {1'd0,  7'd59}: s1rd1 <= 59;
	     {1'd0,  7'd60}: s1rd1 <= 60;
	     {1'd0,  7'd61}: s1rd1 <= 61;
	     {1'd0,  7'd62}: s1rd1 <= 62;
	     {1'd0,  7'd63}: s1rd1 <= 63;
	     {1'd0,  7'd64}: s1rd1 <= 64;
	     {1'd0,  7'd65}: s1rd1 <= 65;
	     {1'd0,  7'd66}: s1rd1 <= 66;
	     {1'd0,  7'd67}: s1rd1 <= 67;
	     {1'd0,  7'd68}: s1rd1 <= 68;
	     {1'd0,  7'd69}: s1rd1 <= 69;
	     {1'd0,  7'd70}: s1rd1 <= 70;
	     {1'd0,  7'd71}: s1rd1 <= 71;
	     {1'd0,  7'd72}: s1rd1 <= 72;
	     {1'd0,  7'd73}: s1rd1 <= 73;
	     {1'd0,  7'd74}: s1rd1 <= 74;
	     {1'd0,  7'd75}: s1rd1 <= 75;
	     {1'd0,  7'd76}: s1rd1 <= 76;
	     {1'd0,  7'd77}: s1rd1 <= 77;
	     {1'd0,  7'd78}: s1rd1 <= 78;
	     {1'd0,  7'd79}: s1rd1 <= 79;
	     {1'd0,  7'd80}: s1rd1 <= 80;
	     {1'd0,  7'd81}: s1rd1 <= 81;
	     {1'd0,  7'd82}: s1rd1 <= 82;
	     {1'd0,  7'd83}: s1rd1 <= 83;
	     {1'd0,  7'd84}: s1rd1 <= 84;
	     {1'd0,  7'd85}: s1rd1 <= 85;
	     {1'd0,  7'd86}: s1rd1 <= 86;
	     {1'd0,  7'd87}: s1rd1 <= 87;
	     {1'd0,  7'd88}: s1rd1 <= 88;
	     {1'd0,  7'd89}: s1rd1 <= 89;
	     {1'd0,  7'd90}: s1rd1 <= 90;
	     {1'd0,  7'd91}: s1rd1 <= 91;
	     {1'd0,  7'd92}: s1rd1 <= 92;
	     {1'd0,  7'd93}: s1rd1 <= 93;
	     {1'd0,  7'd94}: s1rd1 <= 94;
	     {1'd0,  7'd95}: s1rd1 <= 95;
	     {1'd0,  7'd96}: s1rd1 <= 96;
	     {1'd0,  7'd97}: s1rd1 <= 97;
	     {1'd0,  7'd98}: s1rd1 <= 98;
	     {1'd0,  7'd99}: s1rd1 <= 99;
	     {1'd0,  7'd100}: s1rd1 <= 100;
	     {1'd0,  7'd101}: s1rd1 <= 101;
	     {1'd0,  7'd102}: s1rd1 <= 102;
	     {1'd0,  7'd103}: s1rd1 <= 103;
	     {1'd0,  7'd104}: s1rd1 <= 104;
	     {1'd0,  7'd105}: s1rd1 <= 105;
	     {1'd0,  7'd106}: s1rd1 <= 106;
	     {1'd0,  7'd107}: s1rd1 <= 107;
	     {1'd0,  7'd108}: s1rd1 <= 108;
	     {1'd0,  7'd109}: s1rd1 <= 109;
	     {1'd0,  7'd110}: s1rd1 <= 110;
	     {1'd0,  7'd111}: s1rd1 <= 111;
	     {1'd0,  7'd112}: s1rd1 <= 112;
	     {1'd0,  7'd113}: s1rd1 <= 113;
	     {1'd0,  7'd114}: s1rd1 <= 114;
	     {1'd0,  7'd115}: s1rd1 <= 115;
	     {1'd0,  7'd116}: s1rd1 <= 116;
	     {1'd0,  7'd117}: s1rd1 <= 117;
	     {1'd0,  7'd118}: s1rd1 <= 118;
	     {1'd0,  7'd119}: s1rd1 <= 119;
	     {1'd0,  7'd120}: s1rd1 <= 120;
	     {1'd0,  7'd121}: s1rd1 <= 121;
	     {1'd0,  7'd122}: s1rd1 <= 122;
	     {1'd0,  7'd123}: s1rd1 <= 123;
	     {1'd0,  7'd124}: s1rd1 <= 124;
	     {1'd0,  7'd125}: s1rd1 <= 125;
	     {1'd0,  7'd126}: s1rd1 <= 126;
	     {1'd0,  7'd127}: s1rd1 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 64;
	     {1'd0,  7'd1}: s1rd2 <= 65;
	     {1'd0,  7'd2}: s1rd2 <= 66;
	     {1'd0,  7'd3}: s1rd2 <= 67;
	     {1'd0,  7'd4}: s1rd2 <= 68;
	     {1'd0,  7'd5}: s1rd2 <= 69;
	     {1'd0,  7'd6}: s1rd2 <= 70;
	     {1'd0,  7'd7}: s1rd2 <= 71;
	     {1'd0,  7'd8}: s1rd2 <= 72;
	     {1'd0,  7'd9}: s1rd2 <= 73;
	     {1'd0,  7'd10}: s1rd2 <= 74;
	     {1'd0,  7'd11}: s1rd2 <= 75;
	     {1'd0,  7'd12}: s1rd2 <= 76;
	     {1'd0,  7'd13}: s1rd2 <= 77;
	     {1'd0,  7'd14}: s1rd2 <= 78;
	     {1'd0,  7'd15}: s1rd2 <= 79;
	     {1'd0,  7'd16}: s1rd2 <= 80;
	     {1'd0,  7'd17}: s1rd2 <= 81;
	     {1'd0,  7'd18}: s1rd2 <= 82;
	     {1'd0,  7'd19}: s1rd2 <= 83;
	     {1'd0,  7'd20}: s1rd2 <= 84;
	     {1'd0,  7'd21}: s1rd2 <= 85;
	     {1'd0,  7'd22}: s1rd2 <= 86;
	     {1'd0,  7'd23}: s1rd2 <= 87;
	     {1'd0,  7'd24}: s1rd2 <= 88;
	     {1'd0,  7'd25}: s1rd2 <= 89;
	     {1'd0,  7'd26}: s1rd2 <= 90;
	     {1'd0,  7'd27}: s1rd2 <= 91;
	     {1'd0,  7'd28}: s1rd2 <= 92;
	     {1'd0,  7'd29}: s1rd2 <= 93;
	     {1'd0,  7'd30}: s1rd2 <= 94;
	     {1'd0,  7'd31}: s1rd2 <= 95;
	     {1'd0,  7'd32}: s1rd2 <= 96;
	     {1'd0,  7'd33}: s1rd2 <= 97;
	     {1'd0,  7'd34}: s1rd2 <= 98;
	     {1'd0,  7'd35}: s1rd2 <= 99;
	     {1'd0,  7'd36}: s1rd2 <= 100;
	     {1'd0,  7'd37}: s1rd2 <= 101;
	     {1'd0,  7'd38}: s1rd2 <= 102;
	     {1'd0,  7'd39}: s1rd2 <= 103;
	     {1'd0,  7'd40}: s1rd2 <= 104;
	     {1'd0,  7'd41}: s1rd2 <= 105;
	     {1'd0,  7'd42}: s1rd2 <= 106;
	     {1'd0,  7'd43}: s1rd2 <= 107;
	     {1'd0,  7'd44}: s1rd2 <= 108;
	     {1'd0,  7'd45}: s1rd2 <= 109;
	     {1'd0,  7'd46}: s1rd2 <= 110;
	     {1'd0,  7'd47}: s1rd2 <= 111;
	     {1'd0,  7'd48}: s1rd2 <= 112;
	     {1'd0,  7'd49}: s1rd2 <= 113;
	     {1'd0,  7'd50}: s1rd2 <= 114;
	     {1'd0,  7'd51}: s1rd2 <= 115;
	     {1'd0,  7'd52}: s1rd2 <= 116;
	     {1'd0,  7'd53}: s1rd2 <= 117;
	     {1'd0,  7'd54}: s1rd2 <= 118;
	     {1'd0,  7'd55}: s1rd2 <= 119;
	     {1'd0,  7'd56}: s1rd2 <= 120;
	     {1'd0,  7'd57}: s1rd2 <= 121;
	     {1'd0,  7'd58}: s1rd2 <= 122;
	     {1'd0,  7'd59}: s1rd2 <= 123;
	     {1'd0,  7'd60}: s1rd2 <= 124;
	     {1'd0,  7'd61}: s1rd2 <= 125;
	     {1'd0,  7'd62}: s1rd2 <= 126;
	     {1'd0,  7'd63}: s1rd2 <= 127;
	     {1'd0,  7'd64}: s1rd2 <= 0;
	     {1'd0,  7'd65}: s1rd2 <= 1;
	     {1'd0,  7'd66}: s1rd2 <= 2;
	     {1'd0,  7'd67}: s1rd2 <= 3;
	     {1'd0,  7'd68}: s1rd2 <= 4;
	     {1'd0,  7'd69}: s1rd2 <= 5;
	     {1'd0,  7'd70}: s1rd2 <= 6;
	     {1'd0,  7'd71}: s1rd2 <= 7;
	     {1'd0,  7'd72}: s1rd2 <= 8;
	     {1'd0,  7'd73}: s1rd2 <= 9;
	     {1'd0,  7'd74}: s1rd2 <= 10;
	     {1'd0,  7'd75}: s1rd2 <= 11;
	     {1'd0,  7'd76}: s1rd2 <= 12;
	     {1'd0,  7'd77}: s1rd2 <= 13;
	     {1'd0,  7'd78}: s1rd2 <= 14;
	     {1'd0,  7'd79}: s1rd2 <= 15;
	     {1'd0,  7'd80}: s1rd2 <= 16;
	     {1'd0,  7'd81}: s1rd2 <= 17;
	     {1'd0,  7'd82}: s1rd2 <= 18;
	     {1'd0,  7'd83}: s1rd2 <= 19;
	     {1'd0,  7'd84}: s1rd2 <= 20;
	     {1'd0,  7'd85}: s1rd2 <= 21;
	     {1'd0,  7'd86}: s1rd2 <= 22;
	     {1'd0,  7'd87}: s1rd2 <= 23;
	     {1'd0,  7'd88}: s1rd2 <= 24;
	     {1'd0,  7'd89}: s1rd2 <= 25;
	     {1'd0,  7'd90}: s1rd2 <= 26;
	     {1'd0,  7'd91}: s1rd2 <= 27;
	     {1'd0,  7'd92}: s1rd2 <= 28;
	     {1'd0,  7'd93}: s1rd2 <= 29;
	     {1'd0,  7'd94}: s1rd2 <= 30;
	     {1'd0,  7'd95}: s1rd2 <= 31;
	     {1'd0,  7'd96}: s1rd2 <= 32;
	     {1'd0,  7'd97}: s1rd2 <= 33;
	     {1'd0,  7'd98}: s1rd2 <= 34;
	     {1'd0,  7'd99}: s1rd2 <= 35;
	     {1'd0,  7'd100}: s1rd2 <= 36;
	     {1'd0,  7'd101}: s1rd2 <= 37;
	     {1'd0,  7'd102}: s1rd2 <= 38;
	     {1'd0,  7'd103}: s1rd2 <= 39;
	     {1'd0,  7'd104}: s1rd2 <= 40;
	     {1'd0,  7'd105}: s1rd2 <= 41;
	     {1'd0,  7'd106}: s1rd2 <= 42;
	     {1'd0,  7'd107}: s1rd2 <= 43;
	     {1'd0,  7'd108}: s1rd2 <= 44;
	     {1'd0,  7'd109}: s1rd2 <= 45;
	     {1'd0,  7'd110}: s1rd2 <= 46;
	     {1'd0,  7'd111}: s1rd2 <= 47;
	     {1'd0,  7'd112}: s1rd2 <= 48;
	     {1'd0,  7'd113}: s1rd2 <= 49;
	     {1'd0,  7'd114}: s1rd2 <= 50;
	     {1'd0,  7'd115}: s1rd2 <= 51;
	     {1'd0,  7'd116}: s1rd2 <= 52;
	     {1'd0,  7'd117}: s1rd2 <= 53;
	     {1'd0,  7'd118}: s1rd2 <= 54;
	     {1'd0,  7'd119}: s1rd2 <= 55;
	     {1'd0,  7'd120}: s1rd2 <= 56;
	     {1'd0,  7'd121}: s1rd2 <= 57;
	     {1'd0,  7'd122}: s1rd2 <= 58;
	     {1'd0,  7'd123}: s1rd2 <= 59;
	     {1'd0,  7'd124}: s1rd2 <= 60;
	     {1'd0,  7'd125}: s1rd2 <= 61;
	     {1'd0,  7'd126}: s1rd2 <= 62;
	     {1'd0,  7'd127}: s1rd2 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 1;
	     {1'd0,  7'd2}: s1rd3 <= 2;
	     {1'd0,  7'd3}: s1rd3 <= 3;
	     {1'd0,  7'd4}: s1rd3 <= 4;
	     {1'd0,  7'd5}: s1rd3 <= 5;
	     {1'd0,  7'd6}: s1rd3 <= 6;
	     {1'd0,  7'd7}: s1rd3 <= 7;
	     {1'd0,  7'd8}: s1rd3 <= 8;
	     {1'd0,  7'd9}: s1rd3 <= 9;
	     {1'd0,  7'd10}: s1rd3 <= 10;
	     {1'd0,  7'd11}: s1rd3 <= 11;
	     {1'd0,  7'd12}: s1rd3 <= 12;
	     {1'd0,  7'd13}: s1rd3 <= 13;
	     {1'd0,  7'd14}: s1rd3 <= 14;
	     {1'd0,  7'd15}: s1rd3 <= 15;
	     {1'd0,  7'd16}: s1rd3 <= 16;
	     {1'd0,  7'd17}: s1rd3 <= 17;
	     {1'd0,  7'd18}: s1rd3 <= 18;
	     {1'd0,  7'd19}: s1rd3 <= 19;
	     {1'd0,  7'd20}: s1rd3 <= 20;
	     {1'd0,  7'd21}: s1rd3 <= 21;
	     {1'd0,  7'd22}: s1rd3 <= 22;
	     {1'd0,  7'd23}: s1rd3 <= 23;
	     {1'd0,  7'd24}: s1rd3 <= 24;
	     {1'd0,  7'd25}: s1rd3 <= 25;
	     {1'd0,  7'd26}: s1rd3 <= 26;
	     {1'd0,  7'd27}: s1rd3 <= 27;
	     {1'd0,  7'd28}: s1rd3 <= 28;
	     {1'd0,  7'd29}: s1rd3 <= 29;
	     {1'd0,  7'd30}: s1rd3 <= 30;
	     {1'd0,  7'd31}: s1rd3 <= 31;
	     {1'd0,  7'd32}: s1rd3 <= 32;
	     {1'd0,  7'd33}: s1rd3 <= 33;
	     {1'd0,  7'd34}: s1rd3 <= 34;
	     {1'd0,  7'd35}: s1rd3 <= 35;
	     {1'd0,  7'd36}: s1rd3 <= 36;
	     {1'd0,  7'd37}: s1rd3 <= 37;
	     {1'd0,  7'd38}: s1rd3 <= 38;
	     {1'd0,  7'd39}: s1rd3 <= 39;
	     {1'd0,  7'd40}: s1rd3 <= 40;
	     {1'd0,  7'd41}: s1rd3 <= 41;
	     {1'd0,  7'd42}: s1rd3 <= 42;
	     {1'd0,  7'd43}: s1rd3 <= 43;
	     {1'd0,  7'd44}: s1rd3 <= 44;
	     {1'd0,  7'd45}: s1rd3 <= 45;
	     {1'd0,  7'd46}: s1rd3 <= 46;
	     {1'd0,  7'd47}: s1rd3 <= 47;
	     {1'd0,  7'd48}: s1rd3 <= 48;
	     {1'd0,  7'd49}: s1rd3 <= 49;
	     {1'd0,  7'd50}: s1rd3 <= 50;
	     {1'd0,  7'd51}: s1rd3 <= 51;
	     {1'd0,  7'd52}: s1rd3 <= 52;
	     {1'd0,  7'd53}: s1rd3 <= 53;
	     {1'd0,  7'd54}: s1rd3 <= 54;
	     {1'd0,  7'd55}: s1rd3 <= 55;
	     {1'd0,  7'd56}: s1rd3 <= 56;
	     {1'd0,  7'd57}: s1rd3 <= 57;
	     {1'd0,  7'd58}: s1rd3 <= 58;
	     {1'd0,  7'd59}: s1rd3 <= 59;
	     {1'd0,  7'd60}: s1rd3 <= 60;
	     {1'd0,  7'd61}: s1rd3 <= 61;
	     {1'd0,  7'd62}: s1rd3 <= 62;
	     {1'd0,  7'd63}: s1rd3 <= 63;
	     {1'd0,  7'd64}: s1rd3 <= 64;
	     {1'd0,  7'd65}: s1rd3 <= 65;
	     {1'd0,  7'd66}: s1rd3 <= 66;
	     {1'd0,  7'd67}: s1rd3 <= 67;
	     {1'd0,  7'd68}: s1rd3 <= 68;
	     {1'd0,  7'd69}: s1rd3 <= 69;
	     {1'd0,  7'd70}: s1rd3 <= 70;
	     {1'd0,  7'd71}: s1rd3 <= 71;
	     {1'd0,  7'd72}: s1rd3 <= 72;
	     {1'd0,  7'd73}: s1rd3 <= 73;
	     {1'd0,  7'd74}: s1rd3 <= 74;
	     {1'd0,  7'd75}: s1rd3 <= 75;
	     {1'd0,  7'd76}: s1rd3 <= 76;
	     {1'd0,  7'd77}: s1rd3 <= 77;
	     {1'd0,  7'd78}: s1rd3 <= 78;
	     {1'd0,  7'd79}: s1rd3 <= 79;
	     {1'd0,  7'd80}: s1rd3 <= 80;
	     {1'd0,  7'd81}: s1rd3 <= 81;
	     {1'd0,  7'd82}: s1rd3 <= 82;
	     {1'd0,  7'd83}: s1rd3 <= 83;
	     {1'd0,  7'd84}: s1rd3 <= 84;
	     {1'd0,  7'd85}: s1rd3 <= 85;
	     {1'd0,  7'd86}: s1rd3 <= 86;
	     {1'd0,  7'd87}: s1rd3 <= 87;
	     {1'd0,  7'd88}: s1rd3 <= 88;
	     {1'd0,  7'd89}: s1rd3 <= 89;
	     {1'd0,  7'd90}: s1rd3 <= 90;
	     {1'd0,  7'd91}: s1rd3 <= 91;
	     {1'd0,  7'd92}: s1rd3 <= 92;
	     {1'd0,  7'd93}: s1rd3 <= 93;
	     {1'd0,  7'd94}: s1rd3 <= 94;
	     {1'd0,  7'd95}: s1rd3 <= 95;
	     {1'd0,  7'd96}: s1rd3 <= 96;
	     {1'd0,  7'd97}: s1rd3 <= 97;
	     {1'd0,  7'd98}: s1rd3 <= 98;
	     {1'd0,  7'd99}: s1rd3 <= 99;
	     {1'd0,  7'd100}: s1rd3 <= 100;
	     {1'd0,  7'd101}: s1rd3 <= 101;
	     {1'd0,  7'd102}: s1rd3 <= 102;
	     {1'd0,  7'd103}: s1rd3 <= 103;
	     {1'd0,  7'd104}: s1rd3 <= 104;
	     {1'd0,  7'd105}: s1rd3 <= 105;
	     {1'd0,  7'd106}: s1rd3 <= 106;
	     {1'd0,  7'd107}: s1rd3 <= 107;
	     {1'd0,  7'd108}: s1rd3 <= 108;
	     {1'd0,  7'd109}: s1rd3 <= 109;
	     {1'd0,  7'd110}: s1rd3 <= 110;
	     {1'd0,  7'd111}: s1rd3 <= 111;
	     {1'd0,  7'd112}: s1rd3 <= 112;
	     {1'd0,  7'd113}: s1rd3 <= 113;
	     {1'd0,  7'd114}: s1rd3 <= 114;
	     {1'd0,  7'd115}: s1rd3 <= 115;
	     {1'd0,  7'd116}: s1rd3 <= 116;
	     {1'd0,  7'd117}: s1rd3 <= 117;
	     {1'd0,  7'd118}: s1rd3 <= 118;
	     {1'd0,  7'd119}: s1rd3 <= 119;
	     {1'd0,  7'd120}: s1rd3 <= 120;
	     {1'd0,  7'd121}: s1rd3 <= 121;
	     {1'd0,  7'd122}: s1rd3 <= 122;
	     {1'd0,  7'd123}: s1rd3 <= 123;
	     {1'd0,  7'd124}: s1rd3 <= 124;
	     {1'd0,  7'd125}: s1rd3 <= 125;
	     {1'd0,  7'd126}: s1rd3 <= 126;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 64;
	     {1'd0,  7'd1}: s1rd4 <= 65;
	     {1'd0,  7'd2}: s1rd4 <= 66;
	     {1'd0,  7'd3}: s1rd4 <= 67;
	     {1'd0,  7'd4}: s1rd4 <= 68;
	     {1'd0,  7'd5}: s1rd4 <= 69;
	     {1'd0,  7'd6}: s1rd4 <= 70;
	     {1'd0,  7'd7}: s1rd4 <= 71;
	     {1'd0,  7'd8}: s1rd4 <= 72;
	     {1'd0,  7'd9}: s1rd4 <= 73;
	     {1'd0,  7'd10}: s1rd4 <= 74;
	     {1'd0,  7'd11}: s1rd4 <= 75;
	     {1'd0,  7'd12}: s1rd4 <= 76;
	     {1'd0,  7'd13}: s1rd4 <= 77;
	     {1'd0,  7'd14}: s1rd4 <= 78;
	     {1'd0,  7'd15}: s1rd4 <= 79;
	     {1'd0,  7'd16}: s1rd4 <= 80;
	     {1'd0,  7'd17}: s1rd4 <= 81;
	     {1'd0,  7'd18}: s1rd4 <= 82;
	     {1'd0,  7'd19}: s1rd4 <= 83;
	     {1'd0,  7'd20}: s1rd4 <= 84;
	     {1'd0,  7'd21}: s1rd4 <= 85;
	     {1'd0,  7'd22}: s1rd4 <= 86;
	     {1'd0,  7'd23}: s1rd4 <= 87;
	     {1'd0,  7'd24}: s1rd4 <= 88;
	     {1'd0,  7'd25}: s1rd4 <= 89;
	     {1'd0,  7'd26}: s1rd4 <= 90;
	     {1'd0,  7'd27}: s1rd4 <= 91;
	     {1'd0,  7'd28}: s1rd4 <= 92;
	     {1'd0,  7'd29}: s1rd4 <= 93;
	     {1'd0,  7'd30}: s1rd4 <= 94;
	     {1'd0,  7'd31}: s1rd4 <= 95;
	     {1'd0,  7'd32}: s1rd4 <= 96;
	     {1'd0,  7'd33}: s1rd4 <= 97;
	     {1'd0,  7'd34}: s1rd4 <= 98;
	     {1'd0,  7'd35}: s1rd4 <= 99;
	     {1'd0,  7'd36}: s1rd4 <= 100;
	     {1'd0,  7'd37}: s1rd4 <= 101;
	     {1'd0,  7'd38}: s1rd4 <= 102;
	     {1'd0,  7'd39}: s1rd4 <= 103;
	     {1'd0,  7'd40}: s1rd4 <= 104;
	     {1'd0,  7'd41}: s1rd4 <= 105;
	     {1'd0,  7'd42}: s1rd4 <= 106;
	     {1'd0,  7'd43}: s1rd4 <= 107;
	     {1'd0,  7'd44}: s1rd4 <= 108;
	     {1'd0,  7'd45}: s1rd4 <= 109;
	     {1'd0,  7'd46}: s1rd4 <= 110;
	     {1'd0,  7'd47}: s1rd4 <= 111;
	     {1'd0,  7'd48}: s1rd4 <= 112;
	     {1'd0,  7'd49}: s1rd4 <= 113;
	     {1'd0,  7'd50}: s1rd4 <= 114;
	     {1'd0,  7'd51}: s1rd4 <= 115;
	     {1'd0,  7'd52}: s1rd4 <= 116;
	     {1'd0,  7'd53}: s1rd4 <= 117;
	     {1'd0,  7'd54}: s1rd4 <= 118;
	     {1'd0,  7'd55}: s1rd4 <= 119;
	     {1'd0,  7'd56}: s1rd4 <= 120;
	     {1'd0,  7'd57}: s1rd4 <= 121;
	     {1'd0,  7'd58}: s1rd4 <= 122;
	     {1'd0,  7'd59}: s1rd4 <= 123;
	     {1'd0,  7'd60}: s1rd4 <= 124;
	     {1'd0,  7'd61}: s1rd4 <= 125;
	     {1'd0,  7'd62}: s1rd4 <= 126;
	     {1'd0,  7'd63}: s1rd4 <= 127;
	     {1'd0,  7'd64}: s1rd4 <= 0;
	     {1'd0,  7'd65}: s1rd4 <= 1;
	     {1'd0,  7'd66}: s1rd4 <= 2;
	     {1'd0,  7'd67}: s1rd4 <= 3;
	     {1'd0,  7'd68}: s1rd4 <= 4;
	     {1'd0,  7'd69}: s1rd4 <= 5;
	     {1'd0,  7'd70}: s1rd4 <= 6;
	     {1'd0,  7'd71}: s1rd4 <= 7;
	     {1'd0,  7'd72}: s1rd4 <= 8;
	     {1'd0,  7'd73}: s1rd4 <= 9;
	     {1'd0,  7'd74}: s1rd4 <= 10;
	     {1'd0,  7'd75}: s1rd4 <= 11;
	     {1'd0,  7'd76}: s1rd4 <= 12;
	     {1'd0,  7'd77}: s1rd4 <= 13;
	     {1'd0,  7'd78}: s1rd4 <= 14;
	     {1'd0,  7'd79}: s1rd4 <= 15;
	     {1'd0,  7'd80}: s1rd4 <= 16;
	     {1'd0,  7'd81}: s1rd4 <= 17;
	     {1'd0,  7'd82}: s1rd4 <= 18;
	     {1'd0,  7'd83}: s1rd4 <= 19;
	     {1'd0,  7'd84}: s1rd4 <= 20;
	     {1'd0,  7'd85}: s1rd4 <= 21;
	     {1'd0,  7'd86}: s1rd4 <= 22;
	     {1'd0,  7'd87}: s1rd4 <= 23;
	     {1'd0,  7'd88}: s1rd4 <= 24;
	     {1'd0,  7'd89}: s1rd4 <= 25;
	     {1'd0,  7'd90}: s1rd4 <= 26;
	     {1'd0,  7'd91}: s1rd4 <= 27;
	     {1'd0,  7'd92}: s1rd4 <= 28;
	     {1'd0,  7'd93}: s1rd4 <= 29;
	     {1'd0,  7'd94}: s1rd4 <= 30;
	     {1'd0,  7'd95}: s1rd4 <= 31;
	     {1'd0,  7'd96}: s1rd4 <= 32;
	     {1'd0,  7'd97}: s1rd4 <= 33;
	     {1'd0,  7'd98}: s1rd4 <= 34;
	     {1'd0,  7'd99}: s1rd4 <= 35;
	     {1'd0,  7'd100}: s1rd4 <= 36;
	     {1'd0,  7'd101}: s1rd4 <= 37;
	     {1'd0,  7'd102}: s1rd4 <= 38;
	     {1'd0,  7'd103}: s1rd4 <= 39;
	     {1'd0,  7'd104}: s1rd4 <= 40;
	     {1'd0,  7'd105}: s1rd4 <= 41;
	     {1'd0,  7'd106}: s1rd4 <= 42;
	     {1'd0,  7'd107}: s1rd4 <= 43;
	     {1'd0,  7'd108}: s1rd4 <= 44;
	     {1'd0,  7'd109}: s1rd4 <= 45;
	     {1'd0,  7'd110}: s1rd4 <= 46;
	     {1'd0,  7'd111}: s1rd4 <= 47;
	     {1'd0,  7'd112}: s1rd4 <= 48;
	     {1'd0,  7'd113}: s1rd4 <= 49;
	     {1'd0,  7'd114}: s1rd4 <= 50;
	     {1'd0,  7'd115}: s1rd4 <= 51;
	     {1'd0,  7'd116}: s1rd4 <= 52;
	     {1'd0,  7'd117}: s1rd4 <= 53;
	     {1'd0,  7'd118}: s1rd4 <= 54;
	     {1'd0,  7'd119}: s1rd4 <= 55;
	     {1'd0,  7'd120}: s1rd4 <= 56;
	     {1'd0,  7'd121}: s1rd4 <= 57;
	     {1'd0,  7'd122}: s1rd4 <= 58;
	     {1'd0,  7'd123}: s1rd4 <= 59;
	     {1'd0,  7'd124}: s1rd4 <= 60;
	     {1'd0,  7'd125}: s1rd4 <= 61;
	     {1'd0,  7'd126}: s1rd4 <= 62;
	     {1'd0,  7'd127}: s1rd4 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 0;
	     {1'd0,  7'd1}: s1rd5 <= 1;
	     {1'd0,  7'd2}: s1rd5 <= 2;
	     {1'd0,  7'd3}: s1rd5 <= 3;
	     {1'd0,  7'd4}: s1rd5 <= 4;
	     {1'd0,  7'd5}: s1rd5 <= 5;
	     {1'd0,  7'd6}: s1rd5 <= 6;
	     {1'd0,  7'd7}: s1rd5 <= 7;
	     {1'd0,  7'd8}: s1rd5 <= 8;
	     {1'd0,  7'd9}: s1rd5 <= 9;
	     {1'd0,  7'd10}: s1rd5 <= 10;
	     {1'd0,  7'd11}: s1rd5 <= 11;
	     {1'd0,  7'd12}: s1rd5 <= 12;
	     {1'd0,  7'd13}: s1rd5 <= 13;
	     {1'd0,  7'd14}: s1rd5 <= 14;
	     {1'd0,  7'd15}: s1rd5 <= 15;
	     {1'd0,  7'd16}: s1rd5 <= 16;
	     {1'd0,  7'd17}: s1rd5 <= 17;
	     {1'd0,  7'd18}: s1rd5 <= 18;
	     {1'd0,  7'd19}: s1rd5 <= 19;
	     {1'd0,  7'd20}: s1rd5 <= 20;
	     {1'd0,  7'd21}: s1rd5 <= 21;
	     {1'd0,  7'd22}: s1rd5 <= 22;
	     {1'd0,  7'd23}: s1rd5 <= 23;
	     {1'd0,  7'd24}: s1rd5 <= 24;
	     {1'd0,  7'd25}: s1rd5 <= 25;
	     {1'd0,  7'd26}: s1rd5 <= 26;
	     {1'd0,  7'd27}: s1rd5 <= 27;
	     {1'd0,  7'd28}: s1rd5 <= 28;
	     {1'd0,  7'd29}: s1rd5 <= 29;
	     {1'd0,  7'd30}: s1rd5 <= 30;
	     {1'd0,  7'd31}: s1rd5 <= 31;
	     {1'd0,  7'd32}: s1rd5 <= 32;
	     {1'd0,  7'd33}: s1rd5 <= 33;
	     {1'd0,  7'd34}: s1rd5 <= 34;
	     {1'd0,  7'd35}: s1rd5 <= 35;
	     {1'd0,  7'd36}: s1rd5 <= 36;
	     {1'd0,  7'd37}: s1rd5 <= 37;
	     {1'd0,  7'd38}: s1rd5 <= 38;
	     {1'd0,  7'd39}: s1rd5 <= 39;
	     {1'd0,  7'd40}: s1rd5 <= 40;
	     {1'd0,  7'd41}: s1rd5 <= 41;
	     {1'd0,  7'd42}: s1rd5 <= 42;
	     {1'd0,  7'd43}: s1rd5 <= 43;
	     {1'd0,  7'd44}: s1rd5 <= 44;
	     {1'd0,  7'd45}: s1rd5 <= 45;
	     {1'd0,  7'd46}: s1rd5 <= 46;
	     {1'd0,  7'd47}: s1rd5 <= 47;
	     {1'd0,  7'd48}: s1rd5 <= 48;
	     {1'd0,  7'd49}: s1rd5 <= 49;
	     {1'd0,  7'd50}: s1rd5 <= 50;
	     {1'd0,  7'd51}: s1rd5 <= 51;
	     {1'd0,  7'd52}: s1rd5 <= 52;
	     {1'd0,  7'd53}: s1rd5 <= 53;
	     {1'd0,  7'd54}: s1rd5 <= 54;
	     {1'd0,  7'd55}: s1rd5 <= 55;
	     {1'd0,  7'd56}: s1rd5 <= 56;
	     {1'd0,  7'd57}: s1rd5 <= 57;
	     {1'd0,  7'd58}: s1rd5 <= 58;
	     {1'd0,  7'd59}: s1rd5 <= 59;
	     {1'd0,  7'd60}: s1rd5 <= 60;
	     {1'd0,  7'd61}: s1rd5 <= 61;
	     {1'd0,  7'd62}: s1rd5 <= 62;
	     {1'd0,  7'd63}: s1rd5 <= 63;
	     {1'd0,  7'd64}: s1rd5 <= 64;
	     {1'd0,  7'd65}: s1rd5 <= 65;
	     {1'd0,  7'd66}: s1rd5 <= 66;
	     {1'd0,  7'd67}: s1rd5 <= 67;
	     {1'd0,  7'd68}: s1rd5 <= 68;
	     {1'd0,  7'd69}: s1rd5 <= 69;
	     {1'd0,  7'd70}: s1rd5 <= 70;
	     {1'd0,  7'd71}: s1rd5 <= 71;
	     {1'd0,  7'd72}: s1rd5 <= 72;
	     {1'd0,  7'd73}: s1rd5 <= 73;
	     {1'd0,  7'd74}: s1rd5 <= 74;
	     {1'd0,  7'd75}: s1rd5 <= 75;
	     {1'd0,  7'd76}: s1rd5 <= 76;
	     {1'd0,  7'd77}: s1rd5 <= 77;
	     {1'd0,  7'd78}: s1rd5 <= 78;
	     {1'd0,  7'd79}: s1rd5 <= 79;
	     {1'd0,  7'd80}: s1rd5 <= 80;
	     {1'd0,  7'd81}: s1rd5 <= 81;
	     {1'd0,  7'd82}: s1rd5 <= 82;
	     {1'd0,  7'd83}: s1rd5 <= 83;
	     {1'd0,  7'd84}: s1rd5 <= 84;
	     {1'd0,  7'd85}: s1rd5 <= 85;
	     {1'd0,  7'd86}: s1rd5 <= 86;
	     {1'd0,  7'd87}: s1rd5 <= 87;
	     {1'd0,  7'd88}: s1rd5 <= 88;
	     {1'd0,  7'd89}: s1rd5 <= 89;
	     {1'd0,  7'd90}: s1rd5 <= 90;
	     {1'd0,  7'd91}: s1rd5 <= 91;
	     {1'd0,  7'd92}: s1rd5 <= 92;
	     {1'd0,  7'd93}: s1rd5 <= 93;
	     {1'd0,  7'd94}: s1rd5 <= 94;
	     {1'd0,  7'd95}: s1rd5 <= 95;
	     {1'd0,  7'd96}: s1rd5 <= 96;
	     {1'd0,  7'd97}: s1rd5 <= 97;
	     {1'd0,  7'd98}: s1rd5 <= 98;
	     {1'd0,  7'd99}: s1rd5 <= 99;
	     {1'd0,  7'd100}: s1rd5 <= 100;
	     {1'd0,  7'd101}: s1rd5 <= 101;
	     {1'd0,  7'd102}: s1rd5 <= 102;
	     {1'd0,  7'd103}: s1rd5 <= 103;
	     {1'd0,  7'd104}: s1rd5 <= 104;
	     {1'd0,  7'd105}: s1rd5 <= 105;
	     {1'd0,  7'd106}: s1rd5 <= 106;
	     {1'd0,  7'd107}: s1rd5 <= 107;
	     {1'd0,  7'd108}: s1rd5 <= 108;
	     {1'd0,  7'd109}: s1rd5 <= 109;
	     {1'd0,  7'd110}: s1rd5 <= 110;
	     {1'd0,  7'd111}: s1rd5 <= 111;
	     {1'd0,  7'd112}: s1rd5 <= 112;
	     {1'd0,  7'd113}: s1rd5 <= 113;
	     {1'd0,  7'd114}: s1rd5 <= 114;
	     {1'd0,  7'd115}: s1rd5 <= 115;
	     {1'd0,  7'd116}: s1rd5 <= 116;
	     {1'd0,  7'd117}: s1rd5 <= 117;
	     {1'd0,  7'd118}: s1rd5 <= 118;
	     {1'd0,  7'd119}: s1rd5 <= 119;
	     {1'd0,  7'd120}: s1rd5 <= 120;
	     {1'd0,  7'd121}: s1rd5 <= 121;
	     {1'd0,  7'd122}: s1rd5 <= 122;
	     {1'd0,  7'd123}: s1rd5 <= 123;
	     {1'd0,  7'd124}: s1rd5 <= 124;
	     {1'd0,  7'd125}: s1rd5 <= 125;
	     {1'd0,  7'd126}: s1rd5 <= 126;
	     {1'd0,  7'd127}: s1rd5 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 64;
	     {1'd0,  7'd1}: s1rd6 <= 65;
	     {1'd0,  7'd2}: s1rd6 <= 66;
	     {1'd0,  7'd3}: s1rd6 <= 67;
	     {1'd0,  7'd4}: s1rd6 <= 68;
	     {1'd0,  7'd5}: s1rd6 <= 69;
	     {1'd0,  7'd6}: s1rd6 <= 70;
	     {1'd0,  7'd7}: s1rd6 <= 71;
	     {1'd0,  7'd8}: s1rd6 <= 72;
	     {1'd0,  7'd9}: s1rd6 <= 73;
	     {1'd0,  7'd10}: s1rd6 <= 74;
	     {1'd0,  7'd11}: s1rd6 <= 75;
	     {1'd0,  7'd12}: s1rd6 <= 76;
	     {1'd0,  7'd13}: s1rd6 <= 77;
	     {1'd0,  7'd14}: s1rd6 <= 78;
	     {1'd0,  7'd15}: s1rd6 <= 79;
	     {1'd0,  7'd16}: s1rd6 <= 80;
	     {1'd0,  7'd17}: s1rd6 <= 81;
	     {1'd0,  7'd18}: s1rd6 <= 82;
	     {1'd0,  7'd19}: s1rd6 <= 83;
	     {1'd0,  7'd20}: s1rd6 <= 84;
	     {1'd0,  7'd21}: s1rd6 <= 85;
	     {1'd0,  7'd22}: s1rd6 <= 86;
	     {1'd0,  7'd23}: s1rd6 <= 87;
	     {1'd0,  7'd24}: s1rd6 <= 88;
	     {1'd0,  7'd25}: s1rd6 <= 89;
	     {1'd0,  7'd26}: s1rd6 <= 90;
	     {1'd0,  7'd27}: s1rd6 <= 91;
	     {1'd0,  7'd28}: s1rd6 <= 92;
	     {1'd0,  7'd29}: s1rd6 <= 93;
	     {1'd0,  7'd30}: s1rd6 <= 94;
	     {1'd0,  7'd31}: s1rd6 <= 95;
	     {1'd0,  7'd32}: s1rd6 <= 96;
	     {1'd0,  7'd33}: s1rd6 <= 97;
	     {1'd0,  7'd34}: s1rd6 <= 98;
	     {1'd0,  7'd35}: s1rd6 <= 99;
	     {1'd0,  7'd36}: s1rd6 <= 100;
	     {1'd0,  7'd37}: s1rd6 <= 101;
	     {1'd0,  7'd38}: s1rd6 <= 102;
	     {1'd0,  7'd39}: s1rd6 <= 103;
	     {1'd0,  7'd40}: s1rd6 <= 104;
	     {1'd0,  7'd41}: s1rd6 <= 105;
	     {1'd0,  7'd42}: s1rd6 <= 106;
	     {1'd0,  7'd43}: s1rd6 <= 107;
	     {1'd0,  7'd44}: s1rd6 <= 108;
	     {1'd0,  7'd45}: s1rd6 <= 109;
	     {1'd0,  7'd46}: s1rd6 <= 110;
	     {1'd0,  7'd47}: s1rd6 <= 111;
	     {1'd0,  7'd48}: s1rd6 <= 112;
	     {1'd0,  7'd49}: s1rd6 <= 113;
	     {1'd0,  7'd50}: s1rd6 <= 114;
	     {1'd0,  7'd51}: s1rd6 <= 115;
	     {1'd0,  7'd52}: s1rd6 <= 116;
	     {1'd0,  7'd53}: s1rd6 <= 117;
	     {1'd0,  7'd54}: s1rd6 <= 118;
	     {1'd0,  7'd55}: s1rd6 <= 119;
	     {1'd0,  7'd56}: s1rd6 <= 120;
	     {1'd0,  7'd57}: s1rd6 <= 121;
	     {1'd0,  7'd58}: s1rd6 <= 122;
	     {1'd0,  7'd59}: s1rd6 <= 123;
	     {1'd0,  7'd60}: s1rd6 <= 124;
	     {1'd0,  7'd61}: s1rd6 <= 125;
	     {1'd0,  7'd62}: s1rd6 <= 126;
	     {1'd0,  7'd63}: s1rd6 <= 127;
	     {1'd0,  7'd64}: s1rd6 <= 0;
	     {1'd0,  7'd65}: s1rd6 <= 1;
	     {1'd0,  7'd66}: s1rd6 <= 2;
	     {1'd0,  7'd67}: s1rd6 <= 3;
	     {1'd0,  7'd68}: s1rd6 <= 4;
	     {1'd0,  7'd69}: s1rd6 <= 5;
	     {1'd0,  7'd70}: s1rd6 <= 6;
	     {1'd0,  7'd71}: s1rd6 <= 7;
	     {1'd0,  7'd72}: s1rd6 <= 8;
	     {1'd0,  7'd73}: s1rd6 <= 9;
	     {1'd0,  7'd74}: s1rd6 <= 10;
	     {1'd0,  7'd75}: s1rd6 <= 11;
	     {1'd0,  7'd76}: s1rd6 <= 12;
	     {1'd0,  7'd77}: s1rd6 <= 13;
	     {1'd0,  7'd78}: s1rd6 <= 14;
	     {1'd0,  7'd79}: s1rd6 <= 15;
	     {1'd0,  7'd80}: s1rd6 <= 16;
	     {1'd0,  7'd81}: s1rd6 <= 17;
	     {1'd0,  7'd82}: s1rd6 <= 18;
	     {1'd0,  7'd83}: s1rd6 <= 19;
	     {1'd0,  7'd84}: s1rd6 <= 20;
	     {1'd0,  7'd85}: s1rd6 <= 21;
	     {1'd0,  7'd86}: s1rd6 <= 22;
	     {1'd0,  7'd87}: s1rd6 <= 23;
	     {1'd0,  7'd88}: s1rd6 <= 24;
	     {1'd0,  7'd89}: s1rd6 <= 25;
	     {1'd0,  7'd90}: s1rd6 <= 26;
	     {1'd0,  7'd91}: s1rd6 <= 27;
	     {1'd0,  7'd92}: s1rd6 <= 28;
	     {1'd0,  7'd93}: s1rd6 <= 29;
	     {1'd0,  7'd94}: s1rd6 <= 30;
	     {1'd0,  7'd95}: s1rd6 <= 31;
	     {1'd0,  7'd96}: s1rd6 <= 32;
	     {1'd0,  7'd97}: s1rd6 <= 33;
	     {1'd0,  7'd98}: s1rd6 <= 34;
	     {1'd0,  7'd99}: s1rd6 <= 35;
	     {1'd0,  7'd100}: s1rd6 <= 36;
	     {1'd0,  7'd101}: s1rd6 <= 37;
	     {1'd0,  7'd102}: s1rd6 <= 38;
	     {1'd0,  7'd103}: s1rd6 <= 39;
	     {1'd0,  7'd104}: s1rd6 <= 40;
	     {1'd0,  7'd105}: s1rd6 <= 41;
	     {1'd0,  7'd106}: s1rd6 <= 42;
	     {1'd0,  7'd107}: s1rd6 <= 43;
	     {1'd0,  7'd108}: s1rd6 <= 44;
	     {1'd0,  7'd109}: s1rd6 <= 45;
	     {1'd0,  7'd110}: s1rd6 <= 46;
	     {1'd0,  7'd111}: s1rd6 <= 47;
	     {1'd0,  7'd112}: s1rd6 <= 48;
	     {1'd0,  7'd113}: s1rd6 <= 49;
	     {1'd0,  7'd114}: s1rd6 <= 50;
	     {1'd0,  7'd115}: s1rd6 <= 51;
	     {1'd0,  7'd116}: s1rd6 <= 52;
	     {1'd0,  7'd117}: s1rd6 <= 53;
	     {1'd0,  7'd118}: s1rd6 <= 54;
	     {1'd0,  7'd119}: s1rd6 <= 55;
	     {1'd0,  7'd120}: s1rd6 <= 56;
	     {1'd0,  7'd121}: s1rd6 <= 57;
	     {1'd0,  7'd122}: s1rd6 <= 58;
	     {1'd0,  7'd123}: s1rd6 <= 59;
	     {1'd0,  7'd124}: s1rd6 <= 60;
	     {1'd0,  7'd125}: s1rd6 <= 61;
	     {1'd0,  7'd126}: s1rd6 <= 62;
	     {1'd0,  7'd127}: s1rd6 <= 63;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm107_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 1;
	     {1'd0,  7'd2}: s1rd7 <= 2;
	     {1'd0,  7'd3}: s1rd7 <= 3;
	     {1'd0,  7'd4}: s1rd7 <= 4;
	     {1'd0,  7'd5}: s1rd7 <= 5;
	     {1'd0,  7'd6}: s1rd7 <= 6;
	     {1'd0,  7'd7}: s1rd7 <= 7;
	     {1'd0,  7'd8}: s1rd7 <= 8;
	     {1'd0,  7'd9}: s1rd7 <= 9;
	     {1'd0,  7'd10}: s1rd7 <= 10;
	     {1'd0,  7'd11}: s1rd7 <= 11;
	     {1'd0,  7'd12}: s1rd7 <= 12;
	     {1'd0,  7'd13}: s1rd7 <= 13;
	     {1'd0,  7'd14}: s1rd7 <= 14;
	     {1'd0,  7'd15}: s1rd7 <= 15;
	     {1'd0,  7'd16}: s1rd7 <= 16;
	     {1'd0,  7'd17}: s1rd7 <= 17;
	     {1'd0,  7'd18}: s1rd7 <= 18;
	     {1'd0,  7'd19}: s1rd7 <= 19;
	     {1'd0,  7'd20}: s1rd7 <= 20;
	     {1'd0,  7'd21}: s1rd7 <= 21;
	     {1'd0,  7'd22}: s1rd7 <= 22;
	     {1'd0,  7'd23}: s1rd7 <= 23;
	     {1'd0,  7'd24}: s1rd7 <= 24;
	     {1'd0,  7'd25}: s1rd7 <= 25;
	     {1'd0,  7'd26}: s1rd7 <= 26;
	     {1'd0,  7'd27}: s1rd7 <= 27;
	     {1'd0,  7'd28}: s1rd7 <= 28;
	     {1'd0,  7'd29}: s1rd7 <= 29;
	     {1'd0,  7'd30}: s1rd7 <= 30;
	     {1'd0,  7'd31}: s1rd7 <= 31;
	     {1'd0,  7'd32}: s1rd7 <= 32;
	     {1'd0,  7'd33}: s1rd7 <= 33;
	     {1'd0,  7'd34}: s1rd7 <= 34;
	     {1'd0,  7'd35}: s1rd7 <= 35;
	     {1'd0,  7'd36}: s1rd7 <= 36;
	     {1'd0,  7'd37}: s1rd7 <= 37;
	     {1'd0,  7'd38}: s1rd7 <= 38;
	     {1'd0,  7'd39}: s1rd7 <= 39;
	     {1'd0,  7'd40}: s1rd7 <= 40;
	     {1'd0,  7'd41}: s1rd7 <= 41;
	     {1'd0,  7'd42}: s1rd7 <= 42;
	     {1'd0,  7'd43}: s1rd7 <= 43;
	     {1'd0,  7'd44}: s1rd7 <= 44;
	     {1'd0,  7'd45}: s1rd7 <= 45;
	     {1'd0,  7'd46}: s1rd7 <= 46;
	     {1'd0,  7'd47}: s1rd7 <= 47;
	     {1'd0,  7'd48}: s1rd7 <= 48;
	     {1'd0,  7'd49}: s1rd7 <= 49;
	     {1'd0,  7'd50}: s1rd7 <= 50;
	     {1'd0,  7'd51}: s1rd7 <= 51;
	     {1'd0,  7'd52}: s1rd7 <= 52;
	     {1'd0,  7'd53}: s1rd7 <= 53;
	     {1'd0,  7'd54}: s1rd7 <= 54;
	     {1'd0,  7'd55}: s1rd7 <= 55;
	     {1'd0,  7'd56}: s1rd7 <= 56;
	     {1'd0,  7'd57}: s1rd7 <= 57;
	     {1'd0,  7'd58}: s1rd7 <= 58;
	     {1'd0,  7'd59}: s1rd7 <= 59;
	     {1'd0,  7'd60}: s1rd7 <= 60;
	     {1'd0,  7'd61}: s1rd7 <= 61;
	     {1'd0,  7'd62}: s1rd7 <= 62;
	     {1'd0,  7'd63}: s1rd7 <= 63;
	     {1'd0,  7'd64}: s1rd7 <= 64;
	     {1'd0,  7'd65}: s1rd7 <= 65;
	     {1'd0,  7'd66}: s1rd7 <= 66;
	     {1'd0,  7'd67}: s1rd7 <= 67;
	     {1'd0,  7'd68}: s1rd7 <= 68;
	     {1'd0,  7'd69}: s1rd7 <= 69;
	     {1'd0,  7'd70}: s1rd7 <= 70;
	     {1'd0,  7'd71}: s1rd7 <= 71;
	     {1'd0,  7'd72}: s1rd7 <= 72;
	     {1'd0,  7'd73}: s1rd7 <= 73;
	     {1'd0,  7'd74}: s1rd7 <= 74;
	     {1'd0,  7'd75}: s1rd7 <= 75;
	     {1'd0,  7'd76}: s1rd7 <= 76;
	     {1'd0,  7'd77}: s1rd7 <= 77;
	     {1'd0,  7'd78}: s1rd7 <= 78;
	     {1'd0,  7'd79}: s1rd7 <= 79;
	     {1'd0,  7'd80}: s1rd7 <= 80;
	     {1'd0,  7'd81}: s1rd7 <= 81;
	     {1'd0,  7'd82}: s1rd7 <= 82;
	     {1'd0,  7'd83}: s1rd7 <= 83;
	     {1'd0,  7'd84}: s1rd7 <= 84;
	     {1'd0,  7'd85}: s1rd7 <= 85;
	     {1'd0,  7'd86}: s1rd7 <= 86;
	     {1'd0,  7'd87}: s1rd7 <= 87;
	     {1'd0,  7'd88}: s1rd7 <= 88;
	     {1'd0,  7'd89}: s1rd7 <= 89;
	     {1'd0,  7'd90}: s1rd7 <= 90;
	     {1'd0,  7'd91}: s1rd7 <= 91;
	     {1'd0,  7'd92}: s1rd7 <= 92;
	     {1'd0,  7'd93}: s1rd7 <= 93;
	     {1'd0,  7'd94}: s1rd7 <= 94;
	     {1'd0,  7'd95}: s1rd7 <= 95;
	     {1'd0,  7'd96}: s1rd7 <= 96;
	     {1'd0,  7'd97}: s1rd7 <= 97;
	     {1'd0,  7'd98}: s1rd7 <= 98;
	     {1'd0,  7'd99}: s1rd7 <= 99;
	     {1'd0,  7'd100}: s1rd7 <= 100;
	     {1'd0,  7'd101}: s1rd7 <= 101;
	     {1'd0,  7'd102}: s1rd7 <= 102;
	     {1'd0,  7'd103}: s1rd7 <= 103;
	     {1'd0,  7'd104}: s1rd7 <= 104;
	     {1'd0,  7'd105}: s1rd7 <= 105;
	     {1'd0,  7'd106}: s1rd7 <= 106;
	     {1'd0,  7'd107}: s1rd7 <= 107;
	     {1'd0,  7'd108}: s1rd7 <= 108;
	     {1'd0,  7'd109}: s1rd7 <= 109;
	     {1'd0,  7'd110}: s1rd7 <= 110;
	     {1'd0,  7'd111}: s1rd7 <= 111;
	     {1'd0,  7'd112}: s1rd7 <= 112;
	     {1'd0,  7'd113}: s1rd7 <= 113;
	     {1'd0,  7'd114}: s1rd7 <= 114;
	     {1'd0,  7'd115}: s1rd7 <= 115;
	     {1'd0,  7'd116}: s1rd7 <= 116;
	     {1'd0,  7'd117}: s1rd7 <= 117;
	     {1'd0,  7'd118}: s1rd7 <= 118;
	     {1'd0,  7'd119}: s1rd7 <= 119;
	     {1'd0,  7'd120}: s1rd7 <= 120;
	     {1'd0,  7'd121}: s1rd7 <= 121;
	     {1'd0,  7'd122}: s1rd7 <= 122;
	     {1'd0,  7'd123}: s1rd7 <= 123;
	     {1'd0,  7'd124}: s1rd7 <= 124;
	     {1'd0,  7'd125}: s1rd7 <= 125;
	     {1'd0,  7'd126}: s1rd7 <= 126;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet68488 sw(tm107_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 64;
	      {1'd0, 7'd1}: s2wr0 <= 65;
	      {1'd0, 7'd2}: s2wr0 <= 66;
	      {1'd0, 7'd3}: s2wr0 <= 67;
	      {1'd0, 7'd4}: s2wr0 <= 68;
	      {1'd0, 7'd5}: s2wr0 <= 69;
	      {1'd0, 7'd6}: s2wr0 <= 70;
	      {1'd0, 7'd7}: s2wr0 <= 71;
	      {1'd0, 7'd8}: s2wr0 <= 72;
	      {1'd0, 7'd9}: s2wr0 <= 73;
	      {1'd0, 7'd10}: s2wr0 <= 74;
	      {1'd0, 7'd11}: s2wr0 <= 75;
	      {1'd0, 7'd12}: s2wr0 <= 76;
	      {1'd0, 7'd13}: s2wr0 <= 77;
	      {1'd0, 7'd14}: s2wr0 <= 78;
	      {1'd0, 7'd15}: s2wr0 <= 79;
	      {1'd0, 7'd16}: s2wr0 <= 80;
	      {1'd0, 7'd17}: s2wr0 <= 81;
	      {1'd0, 7'd18}: s2wr0 <= 82;
	      {1'd0, 7'd19}: s2wr0 <= 83;
	      {1'd0, 7'd20}: s2wr0 <= 84;
	      {1'd0, 7'd21}: s2wr0 <= 85;
	      {1'd0, 7'd22}: s2wr0 <= 86;
	      {1'd0, 7'd23}: s2wr0 <= 87;
	      {1'd0, 7'd24}: s2wr0 <= 88;
	      {1'd0, 7'd25}: s2wr0 <= 89;
	      {1'd0, 7'd26}: s2wr0 <= 90;
	      {1'd0, 7'd27}: s2wr0 <= 91;
	      {1'd0, 7'd28}: s2wr0 <= 92;
	      {1'd0, 7'd29}: s2wr0 <= 93;
	      {1'd0, 7'd30}: s2wr0 <= 94;
	      {1'd0, 7'd31}: s2wr0 <= 95;
	      {1'd0, 7'd32}: s2wr0 <= 96;
	      {1'd0, 7'd33}: s2wr0 <= 97;
	      {1'd0, 7'd34}: s2wr0 <= 98;
	      {1'd0, 7'd35}: s2wr0 <= 99;
	      {1'd0, 7'd36}: s2wr0 <= 100;
	      {1'd0, 7'd37}: s2wr0 <= 101;
	      {1'd0, 7'd38}: s2wr0 <= 102;
	      {1'd0, 7'd39}: s2wr0 <= 103;
	      {1'd0, 7'd40}: s2wr0 <= 104;
	      {1'd0, 7'd41}: s2wr0 <= 105;
	      {1'd0, 7'd42}: s2wr0 <= 106;
	      {1'd0, 7'd43}: s2wr0 <= 107;
	      {1'd0, 7'd44}: s2wr0 <= 108;
	      {1'd0, 7'd45}: s2wr0 <= 109;
	      {1'd0, 7'd46}: s2wr0 <= 110;
	      {1'd0, 7'd47}: s2wr0 <= 111;
	      {1'd0, 7'd48}: s2wr0 <= 112;
	      {1'd0, 7'd49}: s2wr0 <= 113;
	      {1'd0, 7'd50}: s2wr0 <= 114;
	      {1'd0, 7'd51}: s2wr0 <= 115;
	      {1'd0, 7'd52}: s2wr0 <= 116;
	      {1'd0, 7'd53}: s2wr0 <= 117;
	      {1'd0, 7'd54}: s2wr0 <= 118;
	      {1'd0, 7'd55}: s2wr0 <= 119;
	      {1'd0, 7'd56}: s2wr0 <= 120;
	      {1'd0, 7'd57}: s2wr0 <= 121;
	      {1'd0, 7'd58}: s2wr0 <= 122;
	      {1'd0, 7'd59}: s2wr0 <= 123;
	      {1'd0, 7'd60}: s2wr0 <= 124;
	      {1'd0, 7'd61}: s2wr0 <= 125;
	      {1'd0, 7'd62}: s2wr0 <= 126;
	      {1'd0, 7'd63}: s2wr0 <= 127;
	      {1'd0, 7'd64}: s2wr0 <= 0;
	      {1'd0, 7'd65}: s2wr0 <= 1;
	      {1'd0, 7'd66}: s2wr0 <= 2;
	      {1'd0, 7'd67}: s2wr0 <= 3;
	      {1'd0, 7'd68}: s2wr0 <= 4;
	      {1'd0, 7'd69}: s2wr0 <= 5;
	      {1'd0, 7'd70}: s2wr0 <= 6;
	      {1'd0, 7'd71}: s2wr0 <= 7;
	      {1'd0, 7'd72}: s2wr0 <= 8;
	      {1'd0, 7'd73}: s2wr0 <= 9;
	      {1'd0, 7'd74}: s2wr0 <= 10;
	      {1'd0, 7'd75}: s2wr0 <= 11;
	      {1'd0, 7'd76}: s2wr0 <= 12;
	      {1'd0, 7'd77}: s2wr0 <= 13;
	      {1'd0, 7'd78}: s2wr0 <= 14;
	      {1'd0, 7'd79}: s2wr0 <= 15;
	      {1'd0, 7'd80}: s2wr0 <= 16;
	      {1'd0, 7'd81}: s2wr0 <= 17;
	      {1'd0, 7'd82}: s2wr0 <= 18;
	      {1'd0, 7'd83}: s2wr0 <= 19;
	      {1'd0, 7'd84}: s2wr0 <= 20;
	      {1'd0, 7'd85}: s2wr0 <= 21;
	      {1'd0, 7'd86}: s2wr0 <= 22;
	      {1'd0, 7'd87}: s2wr0 <= 23;
	      {1'd0, 7'd88}: s2wr0 <= 24;
	      {1'd0, 7'd89}: s2wr0 <= 25;
	      {1'd0, 7'd90}: s2wr0 <= 26;
	      {1'd0, 7'd91}: s2wr0 <= 27;
	      {1'd0, 7'd92}: s2wr0 <= 28;
	      {1'd0, 7'd93}: s2wr0 <= 29;
	      {1'd0, 7'd94}: s2wr0 <= 30;
	      {1'd0, 7'd95}: s2wr0 <= 31;
	      {1'd0, 7'd96}: s2wr0 <= 32;
	      {1'd0, 7'd97}: s2wr0 <= 33;
	      {1'd0, 7'd98}: s2wr0 <= 34;
	      {1'd0, 7'd99}: s2wr0 <= 35;
	      {1'd0, 7'd100}: s2wr0 <= 36;
	      {1'd0, 7'd101}: s2wr0 <= 37;
	      {1'd0, 7'd102}: s2wr0 <= 38;
	      {1'd0, 7'd103}: s2wr0 <= 39;
	      {1'd0, 7'd104}: s2wr0 <= 40;
	      {1'd0, 7'd105}: s2wr0 <= 41;
	      {1'd0, 7'd106}: s2wr0 <= 42;
	      {1'd0, 7'd107}: s2wr0 <= 43;
	      {1'd0, 7'd108}: s2wr0 <= 44;
	      {1'd0, 7'd109}: s2wr0 <= 45;
	      {1'd0, 7'd110}: s2wr0 <= 46;
	      {1'd0, 7'd111}: s2wr0 <= 47;
	      {1'd0, 7'd112}: s2wr0 <= 48;
	      {1'd0, 7'd113}: s2wr0 <= 49;
	      {1'd0, 7'd114}: s2wr0 <= 50;
	      {1'd0, 7'd115}: s2wr0 <= 51;
	      {1'd0, 7'd116}: s2wr0 <= 52;
	      {1'd0, 7'd117}: s2wr0 <= 53;
	      {1'd0, 7'd118}: s2wr0 <= 54;
	      {1'd0, 7'd119}: s2wr0 <= 55;
	      {1'd0, 7'd120}: s2wr0 <= 56;
	      {1'd0, 7'd121}: s2wr0 <= 57;
	      {1'd0, 7'd122}: s2wr0 <= 58;
	      {1'd0, 7'd123}: s2wr0 <= 59;
	      {1'd0, 7'd124}: s2wr0 <= 60;
	      {1'd0, 7'd125}: s2wr0 <= 61;
	      {1'd0, 7'd126}: s2wr0 <= 62;
	      {1'd0, 7'd127}: s2wr0 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 0;
	      {1'd0, 7'd1}: s2wr1 <= 1;
	      {1'd0, 7'd2}: s2wr1 <= 2;
	      {1'd0, 7'd3}: s2wr1 <= 3;
	      {1'd0, 7'd4}: s2wr1 <= 4;
	      {1'd0, 7'd5}: s2wr1 <= 5;
	      {1'd0, 7'd6}: s2wr1 <= 6;
	      {1'd0, 7'd7}: s2wr1 <= 7;
	      {1'd0, 7'd8}: s2wr1 <= 8;
	      {1'd0, 7'd9}: s2wr1 <= 9;
	      {1'd0, 7'd10}: s2wr1 <= 10;
	      {1'd0, 7'd11}: s2wr1 <= 11;
	      {1'd0, 7'd12}: s2wr1 <= 12;
	      {1'd0, 7'd13}: s2wr1 <= 13;
	      {1'd0, 7'd14}: s2wr1 <= 14;
	      {1'd0, 7'd15}: s2wr1 <= 15;
	      {1'd0, 7'd16}: s2wr1 <= 16;
	      {1'd0, 7'd17}: s2wr1 <= 17;
	      {1'd0, 7'd18}: s2wr1 <= 18;
	      {1'd0, 7'd19}: s2wr1 <= 19;
	      {1'd0, 7'd20}: s2wr1 <= 20;
	      {1'd0, 7'd21}: s2wr1 <= 21;
	      {1'd0, 7'd22}: s2wr1 <= 22;
	      {1'd0, 7'd23}: s2wr1 <= 23;
	      {1'd0, 7'd24}: s2wr1 <= 24;
	      {1'd0, 7'd25}: s2wr1 <= 25;
	      {1'd0, 7'd26}: s2wr1 <= 26;
	      {1'd0, 7'd27}: s2wr1 <= 27;
	      {1'd0, 7'd28}: s2wr1 <= 28;
	      {1'd0, 7'd29}: s2wr1 <= 29;
	      {1'd0, 7'd30}: s2wr1 <= 30;
	      {1'd0, 7'd31}: s2wr1 <= 31;
	      {1'd0, 7'd32}: s2wr1 <= 32;
	      {1'd0, 7'd33}: s2wr1 <= 33;
	      {1'd0, 7'd34}: s2wr1 <= 34;
	      {1'd0, 7'd35}: s2wr1 <= 35;
	      {1'd0, 7'd36}: s2wr1 <= 36;
	      {1'd0, 7'd37}: s2wr1 <= 37;
	      {1'd0, 7'd38}: s2wr1 <= 38;
	      {1'd0, 7'd39}: s2wr1 <= 39;
	      {1'd0, 7'd40}: s2wr1 <= 40;
	      {1'd0, 7'd41}: s2wr1 <= 41;
	      {1'd0, 7'd42}: s2wr1 <= 42;
	      {1'd0, 7'd43}: s2wr1 <= 43;
	      {1'd0, 7'd44}: s2wr1 <= 44;
	      {1'd0, 7'd45}: s2wr1 <= 45;
	      {1'd0, 7'd46}: s2wr1 <= 46;
	      {1'd0, 7'd47}: s2wr1 <= 47;
	      {1'd0, 7'd48}: s2wr1 <= 48;
	      {1'd0, 7'd49}: s2wr1 <= 49;
	      {1'd0, 7'd50}: s2wr1 <= 50;
	      {1'd0, 7'd51}: s2wr1 <= 51;
	      {1'd0, 7'd52}: s2wr1 <= 52;
	      {1'd0, 7'd53}: s2wr1 <= 53;
	      {1'd0, 7'd54}: s2wr1 <= 54;
	      {1'd0, 7'd55}: s2wr1 <= 55;
	      {1'd0, 7'd56}: s2wr1 <= 56;
	      {1'd0, 7'd57}: s2wr1 <= 57;
	      {1'd0, 7'd58}: s2wr1 <= 58;
	      {1'd0, 7'd59}: s2wr1 <= 59;
	      {1'd0, 7'd60}: s2wr1 <= 60;
	      {1'd0, 7'd61}: s2wr1 <= 61;
	      {1'd0, 7'd62}: s2wr1 <= 62;
	      {1'd0, 7'd63}: s2wr1 <= 63;
	      {1'd0, 7'd64}: s2wr1 <= 64;
	      {1'd0, 7'd65}: s2wr1 <= 65;
	      {1'd0, 7'd66}: s2wr1 <= 66;
	      {1'd0, 7'd67}: s2wr1 <= 67;
	      {1'd0, 7'd68}: s2wr1 <= 68;
	      {1'd0, 7'd69}: s2wr1 <= 69;
	      {1'd0, 7'd70}: s2wr1 <= 70;
	      {1'd0, 7'd71}: s2wr1 <= 71;
	      {1'd0, 7'd72}: s2wr1 <= 72;
	      {1'd0, 7'd73}: s2wr1 <= 73;
	      {1'd0, 7'd74}: s2wr1 <= 74;
	      {1'd0, 7'd75}: s2wr1 <= 75;
	      {1'd0, 7'd76}: s2wr1 <= 76;
	      {1'd0, 7'd77}: s2wr1 <= 77;
	      {1'd0, 7'd78}: s2wr1 <= 78;
	      {1'd0, 7'd79}: s2wr1 <= 79;
	      {1'd0, 7'd80}: s2wr1 <= 80;
	      {1'd0, 7'd81}: s2wr1 <= 81;
	      {1'd0, 7'd82}: s2wr1 <= 82;
	      {1'd0, 7'd83}: s2wr1 <= 83;
	      {1'd0, 7'd84}: s2wr1 <= 84;
	      {1'd0, 7'd85}: s2wr1 <= 85;
	      {1'd0, 7'd86}: s2wr1 <= 86;
	      {1'd0, 7'd87}: s2wr1 <= 87;
	      {1'd0, 7'd88}: s2wr1 <= 88;
	      {1'd0, 7'd89}: s2wr1 <= 89;
	      {1'd0, 7'd90}: s2wr1 <= 90;
	      {1'd0, 7'd91}: s2wr1 <= 91;
	      {1'd0, 7'd92}: s2wr1 <= 92;
	      {1'd0, 7'd93}: s2wr1 <= 93;
	      {1'd0, 7'd94}: s2wr1 <= 94;
	      {1'd0, 7'd95}: s2wr1 <= 95;
	      {1'd0, 7'd96}: s2wr1 <= 96;
	      {1'd0, 7'd97}: s2wr1 <= 97;
	      {1'd0, 7'd98}: s2wr1 <= 98;
	      {1'd0, 7'd99}: s2wr1 <= 99;
	      {1'd0, 7'd100}: s2wr1 <= 100;
	      {1'd0, 7'd101}: s2wr1 <= 101;
	      {1'd0, 7'd102}: s2wr1 <= 102;
	      {1'd0, 7'd103}: s2wr1 <= 103;
	      {1'd0, 7'd104}: s2wr1 <= 104;
	      {1'd0, 7'd105}: s2wr1 <= 105;
	      {1'd0, 7'd106}: s2wr1 <= 106;
	      {1'd0, 7'd107}: s2wr1 <= 107;
	      {1'd0, 7'd108}: s2wr1 <= 108;
	      {1'd0, 7'd109}: s2wr1 <= 109;
	      {1'd0, 7'd110}: s2wr1 <= 110;
	      {1'd0, 7'd111}: s2wr1 <= 111;
	      {1'd0, 7'd112}: s2wr1 <= 112;
	      {1'd0, 7'd113}: s2wr1 <= 113;
	      {1'd0, 7'd114}: s2wr1 <= 114;
	      {1'd0, 7'd115}: s2wr1 <= 115;
	      {1'd0, 7'd116}: s2wr1 <= 116;
	      {1'd0, 7'd117}: s2wr1 <= 117;
	      {1'd0, 7'd118}: s2wr1 <= 118;
	      {1'd0, 7'd119}: s2wr1 <= 119;
	      {1'd0, 7'd120}: s2wr1 <= 120;
	      {1'd0, 7'd121}: s2wr1 <= 121;
	      {1'd0, 7'd122}: s2wr1 <= 122;
	      {1'd0, 7'd123}: s2wr1 <= 123;
	      {1'd0, 7'd124}: s2wr1 <= 124;
	      {1'd0, 7'd125}: s2wr1 <= 125;
	      {1'd0, 7'd126}: s2wr1 <= 126;
	      {1'd0, 7'd127}: s2wr1 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 64;
	      {1'd0, 7'd1}: s2wr2 <= 65;
	      {1'd0, 7'd2}: s2wr2 <= 66;
	      {1'd0, 7'd3}: s2wr2 <= 67;
	      {1'd0, 7'd4}: s2wr2 <= 68;
	      {1'd0, 7'd5}: s2wr2 <= 69;
	      {1'd0, 7'd6}: s2wr2 <= 70;
	      {1'd0, 7'd7}: s2wr2 <= 71;
	      {1'd0, 7'd8}: s2wr2 <= 72;
	      {1'd0, 7'd9}: s2wr2 <= 73;
	      {1'd0, 7'd10}: s2wr2 <= 74;
	      {1'd0, 7'd11}: s2wr2 <= 75;
	      {1'd0, 7'd12}: s2wr2 <= 76;
	      {1'd0, 7'd13}: s2wr2 <= 77;
	      {1'd0, 7'd14}: s2wr2 <= 78;
	      {1'd0, 7'd15}: s2wr2 <= 79;
	      {1'd0, 7'd16}: s2wr2 <= 80;
	      {1'd0, 7'd17}: s2wr2 <= 81;
	      {1'd0, 7'd18}: s2wr2 <= 82;
	      {1'd0, 7'd19}: s2wr2 <= 83;
	      {1'd0, 7'd20}: s2wr2 <= 84;
	      {1'd0, 7'd21}: s2wr2 <= 85;
	      {1'd0, 7'd22}: s2wr2 <= 86;
	      {1'd0, 7'd23}: s2wr2 <= 87;
	      {1'd0, 7'd24}: s2wr2 <= 88;
	      {1'd0, 7'd25}: s2wr2 <= 89;
	      {1'd0, 7'd26}: s2wr2 <= 90;
	      {1'd0, 7'd27}: s2wr2 <= 91;
	      {1'd0, 7'd28}: s2wr2 <= 92;
	      {1'd0, 7'd29}: s2wr2 <= 93;
	      {1'd0, 7'd30}: s2wr2 <= 94;
	      {1'd0, 7'd31}: s2wr2 <= 95;
	      {1'd0, 7'd32}: s2wr2 <= 96;
	      {1'd0, 7'd33}: s2wr2 <= 97;
	      {1'd0, 7'd34}: s2wr2 <= 98;
	      {1'd0, 7'd35}: s2wr2 <= 99;
	      {1'd0, 7'd36}: s2wr2 <= 100;
	      {1'd0, 7'd37}: s2wr2 <= 101;
	      {1'd0, 7'd38}: s2wr2 <= 102;
	      {1'd0, 7'd39}: s2wr2 <= 103;
	      {1'd0, 7'd40}: s2wr2 <= 104;
	      {1'd0, 7'd41}: s2wr2 <= 105;
	      {1'd0, 7'd42}: s2wr2 <= 106;
	      {1'd0, 7'd43}: s2wr2 <= 107;
	      {1'd0, 7'd44}: s2wr2 <= 108;
	      {1'd0, 7'd45}: s2wr2 <= 109;
	      {1'd0, 7'd46}: s2wr2 <= 110;
	      {1'd0, 7'd47}: s2wr2 <= 111;
	      {1'd0, 7'd48}: s2wr2 <= 112;
	      {1'd0, 7'd49}: s2wr2 <= 113;
	      {1'd0, 7'd50}: s2wr2 <= 114;
	      {1'd0, 7'd51}: s2wr2 <= 115;
	      {1'd0, 7'd52}: s2wr2 <= 116;
	      {1'd0, 7'd53}: s2wr2 <= 117;
	      {1'd0, 7'd54}: s2wr2 <= 118;
	      {1'd0, 7'd55}: s2wr2 <= 119;
	      {1'd0, 7'd56}: s2wr2 <= 120;
	      {1'd0, 7'd57}: s2wr2 <= 121;
	      {1'd0, 7'd58}: s2wr2 <= 122;
	      {1'd0, 7'd59}: s2wr2 <= 123;
	      {1'd0, 7'd60}: s2wr2 <= 124;
	      {1'd0, 7'd61}: s2wr2 <= 125;
	      {1'd0, 7'd62}: s2wr2 <= 126;
	      {1'd0, 7'd63}: s2wr2 <= 127;
	      {1'd0, 7'd64}: s2wr2 <= 0;
	      {1'd0, 7'd65}: s2wr2 <= 1;
	      {1'd0, 7'd66}: s2wr2 <= 2;
	      {1'd0, 7'd67}: s2wr2 <= 3;
	      {1'd0, 7'd68}: s2wr2 <= 4;
	      {1'd0, 7'd69}: s2wr2 <= 5;
	      {1'd0, 7'd70}: s2wr2 <= 6;
	      {1'd0, 7'd71}: s2wr2 <= 7;
	      {1'd0, 7'd72}: s2wr2 <= 8;
	      {1'd0, 7'd73}: s2wr2 <= 9;
	      {1'd0, 7'd74}: s2wr2 <= 10;
	      {1'd0, 7'd75}: s2wr2 <= 11;
	      {1'd0, 7'd76}: s2wr2 <= 12;
	      {1'd0, 7'd77}: s2wr2 <= 13;
	      {1'd0, 7'd78}: s2wr2 <= 14;
	      {1'd0, 7'd79}: s2wr2 <= 15;
	      {1'd0, 7'd80}: s2wr2 <= 16;
	      {1'd0, 7'd81}: s2wr2 <= 17;
	      {1'd0, 7'd82}: s2wr2 <= 18;
	      {1'd0, 7'd83}: s2wr2 <= 19;
	      {1'd0, 7'd84}: s2wr2 <= 20;
	      {1'd0, 7'd85}: s2wr2 <= 21;
	      {1'd0, 7'd86}: s2wr2 <= 22;
	      {1'd0, 7'd87}: s2wr2 <= 23;
	      {1'd0, 7'd88}: s2wr2 <= 24;
	      {1'd0, 7'd89}: s2wr2 <= 25;
	      {1'd0, 7'd90}: s2wr2 <= 26;
	      {1'd0, 7'd91}: s2wr2 <= 27;
	      {1'd0, 7'd92}: s2wr2 <= 28;
	      {1'd0, 7'd93}: s2wr2 <= 29;
	      {1'd0, 7'd94}: s2wr2 <= 30;
	      {1'd0, 7'd95}: s2wr2 <= 31;
	      {1'd0, 7'd96}: s2wr2 <= 32;
	      {1'd0, 7'd97}: s2wr2 <= 33;
	      {1'd0, 7'd98}: s2wr2 <= 34;
	      {1'd0, 7'd99}: s2wr2 <= 35;
	      {1'd0, 7'd100}: s2wr2 <= 36;
	      {1'd0, 7'd101}: s2wr2 <= 37;
	      {1'd0, 7'd102}: s2wr2 <= 38;
	      {1'd0, 7'd103}: s2wr2 <= 39;
	      {1'd0, 7'd104}: s2wr2 <= 40;
	      {1'd0, 7'd105}: s2wr2 <= 41;
	      {1'd0, 7'd106}: s2wr2 <= 42;
	      {1'd0, 7'd107}: s2wr2 <= 43;
	      {1'd0, 7'd108}: s2wr2 <= 44;
	      {1'd0, 7'd109}: s2wr2 <= 45;
	      {1'd0, 7'd110}: s2wr2 <= 46;
	      {1'd0, 7'd111}: s2wr2 <= 47;
	      {1'd0, 7'd112}: s2wr2 <= 48;
	      {1'd0, 7'd113}: s2wr2 <= 49;
	      {1'd0, 7'd114}: s2wr2 <= 50;
	      {1'd0, 7'd115}: s2wr2 <= 51;
	      {1'd0, 7'd116}: s2wr2 <= 52;
	      {1'd0, 7'd117}: s2wr2 <= 53;
	      {1'd0, 7'd118}: s2wr2 <= 54;
	      {1'd0, 7'd119}: s2wr2 <= 55;
	      {1'd0, 7'd120}: s2wr2 <= 56;
	      {1'd0, 7'd121}: s2wr2 <= 57;
	      {1'd0, 7'd122}: s2wr2 <= 58;
	      {1'd0, 7'd123}: s2wr2 <= 59;
	      {1'd0, 7'd124}: s2wr2 <= 60;
	      {1'd0, 7'd125}: s2wr2 <= 61;
	      {1'd0, 7'd126}: s2wr2 <= 62;
	      {1'd0, 7'd127}: s2wr2 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 0;
	      {1'd0, 7'd1}: s2wr3 <= 1;
	      {1'd0, 7'd2}: s2wr3 <= 2;
	      {1'd0, 7'd3}: s2wr3 <= 3;
	      {1'd0, 7'd4}: s2wr3 <= 4;
	      {1'd0, 7'd5}: s2wr3 <= 5;
	      {1'd0, 7'd6}: s2wr3 <= 6;
	      {1'd0, 7'd7}: s2wr3 <= 7;
	      {1'd0, 7'd8}: s2wr3 <= 8;
	      {1'd0, 7'd9}: s2wr3 <= 9;
	      {1'd0, 7'd10}: s2wr3 <= 10;
	      {1'd0, 7'd11}: s2wr3 <= 11;
	      {1'd0, 7'd12}: s2wr3 <= 12;
	      {1'd0, 7'd13}: s2wr3 <= 13;
	      {1'd0, 7'd14}: s2wr3 <= 14;
	      {1'd0, 7'd15}: s2wr3 <= 15;
	      {1'd0, 7'd16}: s2wr3 <= 16;
	      {1'd0, 7'd17}: s2wr3 <= 17;
	      {1'd0, 7'd18}: s2wr3 <= 18;
	      {1'd0, 7'd19}: s2wr3 <= 19;
	      {1'd0, 7'd20}: s2wr3 <= 20;
	      {1'd0, 7'd21}: s2wr3 <= 21;
	      {1'd0, 7'd22}: s2wr3 <= 22;
	      {1'd0, 7'd23}: s2wr3 <= 23;
	      {1'd0, 7'd24}: s2wr3 <= 24;
	      {1'd0, 7'd25}: s2wr3 <= 25;
	      {1'd0, 7'd26}: s2wr3 <= 26;
	      {1'd0, 7'd27}: s2wr3 <= 27;
	      {1'd0, 7'd28}: s2wr3 <= 28;
	      {1'd0, 7'd29}: s2wr3 <= 29;
	      {1'd0, 7'd30}: s2wr3 <= 30;
	      {1'd0, 7'd31}: s2wr3 <= 31;
	      {1'd0, 7'd32}: s2wr3 <= 32;
	      {1'd0, 7'd33}: s2wr3 <= 33;
	      {1'd0, 7'd34}: s2wr3 <= 34;
	      {1'd0, 7'd35}: s2wr3 <= 35;
	      {1'd0, 7'd36}: s2wr3 <= 36;
	      {1'd0, 7'd37}: s2wr3 <= 37;
	      {1'd0, 7'd38}: s2wr3 <= 38;
	      {1'd0, 7'd39}: s2wr3 <= 39;
	      {1'd0, 7'd40}: s2wr3 <= 40;
	      {1'd0, 7'd41}: s2wr3 <= 41;
	      {1'd0, 7'd42}: s2wr3 <= 42;
	      {1'd0, 7'd43}: s2wr3 <= 43;
	      {1'd0, 7'd44}: s2wr3 <= 44;
	      {1'd0, 7'd45}: s2wr3 <= 45;
	      {1'd0, 7'd46}: s2wr3 <= 46;
	      {1'd0, 7'd47}: s2wr3 <= 47;
	      {1'd0, 7'd48}: s2wr3 <= 48;
	      {1'd0, 7'd49}: s2wr3 <= 49;
	      {1'd0, 7'd50}: s2wr3 <= 50;
	      {1'd0, 7'd51}: s2wr3 <= 51;
	      {1'd0, 7'd52}: s2wr3 <= 52;
	      {1'd0, 7'd53}: s2wr3 <= 53;
	      {1'd0, 7'd54}: s2wr3 <= 54;
	      {1'd0, 7'd55}: s2wr3 <= 55;
	      {1'd0, 7'd56}: s2wr3 <= 56;
	      {1'd0, 7'd57}: s2wr3 <= 57;
	      {1'd0, 7'd58}: s2wr3 <= 58;
	      {1'd0, 7'd59}: s2wr3 <= 59;
	      {1'd0, 7'd60}: s2wr3 <= 60;
	      {1'd0, 7'd61}: s2wr3 <= 61;
	      {1'd0, 7'd62}: s2wr3 <= 62;
	      {1'd0, 7'd63}: s2wr3 <= 63;
	      {1'd0, 7'd64}: s2wr3 <= 64;
	      {1'd0, 7'd65}: s2wr3 <= 65;
	      {1'd0, 7'd66}: s2wr3 <= 66;
	      {1'd0, 7'd67}: s2wr3 <= 67;
	      {1'd0, 7'd68}: s2wr3 <= 68;
	      {1'd0, 7'd69}: s2wr3 <= 69;
	      {1'd0, 7'd70}: s2wr3 <= 70;
	      {1'd0, 7'd71}: s2wr3 <= 71;
	      {1'd0, 7'd72}: s2wr3 <= 72;
	      {1'd0, 7'd73}: s2wr3 <= 73;
	      {1'd0, 7'd74}: s2wr3 <= 74;
	      {1'd0, 7'd75}: s2wr3 <= 75;
	      {1'd0, 7'd76}: s2wr3 <= 76;
	      {1'd0, 7'd77}: s2wr3 <= 77;
	      {1'd0, 7'd78}: s2wr3 <= 78;
	      {1'd0, 7'd79}: s2wr3 <= 79;
	      {1'd0, 7'd80}: s2wr3 <= 80;
	      {1'd0, 7'd81}: s2wr3 <= 81;
	      {1'd0, 7'd82}: s2wr3 <= 82;
	      {1'd0, 7'd83}: s2wr3 <= 83;
	      {1'd0, 7'd84}: s2wr3 <= 84;
	      {1'd0, 7'd85}: s2wr3 <= 85;
	      {1'd0, 7'd86}: s2wr3 <= 86;
	      {1'd0, 7'd87}: s2wr3 <= 87;
	      {1'd0, 7'd88}: s2wr3 <= 88;
	      {1'd0, 7'd89}: s2wr3 <= 89;
	      {1'd0, 7'd90}: s2wr3 <= 90;
	      {1'd0, 7'd91}: s2wr3 <= 91;
	      {1'd0, 7'd92}: s2wr3 <= 92;
	      {1'd0, 7'd93}: s2wr3 <= 93;
	      {1'd0, 7'd94}: s2wr3 <= 94;
	      {1'd0, 7'd95}: s2wr3 <= 95;
	      {1'd0, 7'd96}: s2wr3 <= 96;
	      {1'd0, 7'd97}: s2wr3 <= 97;
	      {1'd0, 7'd98}: s2wr3 <= 98;
	      {1'd0, 7'd99}: s2wr3 <= 99;
	      {1'd0, 7'd100}: s2wr3 <= 100;
	      {1'd0, 7'd101}: s2wr3 <= 101;
	      {1'd0, 7'd102}: s2wr3 <= 102;
	      {1'd0, 7'd103}: s2wr3 <= 103;
	      {1'd0, 7'd104}: s2wr3 <= 104;
	      {1'd0, 7'd105}: s2wr3 <= 105;
	      {1'd0, 7'd106}: s2wr3 <= 106;
	      {1'd0, 7'd107}: s2wr3 <= 107;
	      {1'd0, 7'd108}: s2wr3 <= 108;
	      {1'd0, 7'd109}: s2wr3 <= 109;
	      {1'd0, 7'd110}: s2wr3 <= 110;
	      {1'd0, 7'd111}: s2wr3 <= 111;
	      {1'd0, 7'd112}: s2wr3 <= 112;
	      {1'd0, 7'd113}: s2wr3 <= 113;
	      {1'd0, 7'd114}: s2wr3 <= 114;
	      {1'd0, 7'd115}: s2wr3 <= 115;
	      {1'd0, 7'd116}: s2wr3 <= 116;
	      {1'd0, 7'd117}: s2wr3 <= 117;
	      {1'd0, 7'd118}: s2wr3 <= 118;
	      {1'd0, 7'd119}: s2wr3 <= 119;
	      {1'd0, 7'd120}: s2wr3 <= 120;
	      {1'd0, 7'd121}: s2wr3 <= 121;
	      {1'd0, 7'd122}: s2wr3 <= 122;
	      {1'd0, 7'd123}: s2wr3 <= 123;
	      {1'd0, 7'd124}: s2wr3 <= 124;
	      {1'd0, 7'd125}: s2wr3 <= 125;
	      {1'd0, 7'd126}: s2wr3 <= 126;
	      {1'd0, 7'd127}: s2wr3 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 64;
	      {1'd0, 7'd1}: s2wr4 <= 65;
	      {1'd0, 7'd2}: s2wr4 <= 66;
	      {1'd0, 7'd3}: s2wr4 <= 67;
	      {1'd0, 7'd4}: s2wr4 <= 68;
	      {1'd0, 7'd5}: s2wr4 <= 69;
	      {1'd0, 7'd6}: s2wr4 <= 70;
	      {1'd0, 7'd7}: s2wr4 <= 71;
	      {1'd0, 7'd8}: s2wr4 <= 72;
	      {1'd0, 7'd9}: s2wr4 <= 73;
	      {1'd0, 7'd10}: s2wr4 <= 74;
	      {1'd0, 7'd11}: s2wr4 <= 75;
	      {1'd0, 7'd12}: s2wr4 <= 76;
	      {1'd0, 7'd13}: s2wr4 <= 77;
	      {1'd0, 7'd14}: s2wr4 <= 78;
	      {1'd0, 7'd15}: s2wr4 <= 79;
	      {1'd0, 7'd16}: s2wr4 <= 80;
	      {1'd0, 7'd17}: s2wr4 <= 81;
	      {1'd0, 7'd18}: s2wr4 <= 82;
	      {1'd0, 7'd19}: s2wr4 <= 83;
	      {1'd0, 7'd20}: s2wr4 <= 84;
	      {1'd0, 7'd21}: s2wr4 <= 85;
	      {1'd0, 7'd22}: s2wr4 <= 86;
	      {1'd0, 7'd23}: s2wr4 <= 87;
	      {1'd0, 7'd24}: s2wr4 <= 88;
	      {1'd0, 7'd25}: s2wr4 <= 89;
	      {1'd0, 7'd26}: s2wr4 <= 90;
	      {1'd0, 7'd27}: s2wr4 <= 91;
	      {1'd0, 7'd28}: s2wr4 <= 92;
	      {1'd0, 7'd29}: s2wr4 <= 93;
	      {1'd0, 7'd30}: s2wr4 <= 94;
	      {1'd0, 7'd31}: s2wr4 <= 95;
	      {1'd0, 7'd32}: s2wr4 <= 96;
	      {1'd0, 7'd33}: s2wr4 <= 97;
	      {1'd0, 7'd34}: s2wr4 <= 98;
	      {1'd0, 7'd35}: s2wr4 <= 99;
	      {1'd0, 7'd36}: s2wr4 <= 100;
	      {1'd0, 7'd37}: s2wr4 <= 101;
	      {1'd0, 7'd38}: s2wr4 <= 102;
	      {1'd0, 7'd39}: s2wr4 <= 103;
	      {1'd0, 7'd40}: s2wr4 <= 104;
	      {1'd0, 7'd41}: s2wr4 <= 105;
	      {1'd0, 7'd42}: s2wr4 <= 106;
	      {1'd0, 7'd43}: s2wr4 <= 107;
	      {1'd0, 7'd44}: s2wr4 <= 108;
	      {1'd0, 7'd45}: s2wr4 <= 109;
	      {1'd0, 7'd46}: s2wr4 <= 110;
	      {1'd0, 7'd47}: s2wr4 <= 111;
	      {1'd0, 7'd48}: s2wr4 <= 112;
	      {1'd0, 7'd49}: s2wr4 <= 113;
	      {1'd0, 7'd50}: s2wr4 <= 114;
	      {1'd0, 7'd51}: s2wr4 <= 115;
	      {1'd0, 7'd52}: s2wr4 <= 116;
	      {1'd0, 7'd53}: s2wr4 <= 117;
	      {1'd0, 7'd54}: s2wr4 <= 118;
	      {1'd0, 7'd55}: s2wr4 <= 119;
	      {1'd0, 7'd56}: s2wr4 <= 120;
	      {1'd0, 7'd57}: s2wr4 <= 121;
	      {1'd0, 7'd58}: s2wr4 <= 122;
	      {1'd0, 7'd59}: s2wr4 <= 123;
	      {1'd0, 7'd60}: s2wr4 <= 124;
	      {1'd0, 7'd61}: s2wr4 <= 125;
	      {1'd0, 7'd62}: s2wr4 <= 126;
	      {1'd0, 7'd63}: s2wr4 <= 127;
	      {1'd0, 7'd64}: s2wr4 <= 0;
	      {1'd0, 7'd65}: s2wr4 <= 1;
	      {1'd0, 7'd66}: s2wr4 <= 2;
	      {1'd0, 7'd67}: s2wr4 <= 3;
	      {1'd0, 7'd68}: s2wr4 <= 4;
	      {1'd0, 7'd69}: s2wr4 <= 5;
	      {1'd0, 7'd70}: s2wr4 <= 6;
	      {1'd0, 7'd71}: s2wr4 <= 7;
	      {1'd0, 7'd72}: s2wr4 <= 8;
	      {1'd0, 7'd73}: s2wr4 <= 9;
	      {1'd0, 7'd74}: s2wr4 <= 10;
	      {1'd0, 7'd75}: s2wr4 <= 11;
	      {1'd0, 7'd76}: s2wr4 <= 12;
	      {1'd0, 7'd77}: s2wr4 <= 13;
	      {1'd0, 7'd78}: s2wr4 <= 14;
	      {1'd0, 7'd79}: s2wr4 <= 15;
	      {1'd0, 7'd80}: s2wr4 <= 16;
	      {1'd0, 7'd81}: s2wr4 <= 17;
	      {1'd0, 7'd82}: s2wr4 <= 18;
	      {1'd0, 7'd83}: s2wr4 <= 19;
	      {1'd0, 7'd84}: s2wr4 <= 20;
	      {1'd0, 7'd85}: s2wr4 <= 21;
	      {1'd0, 7'd86}: s2wr4 <= 22;
	      {1'd0, 7'd87}: s2wr4 <= 23;
	      {1'd0, 7'd88}: s2wr4 <= 24;
	      {1'd0, 7'd89}: s2wr4 <= 25;
	      {1'd0, 7'd90}: s2wr4 <= 26;
	      {1'd0, 7'd91}: s2wr4 <= 27;
	      {1'd0, 7'd92}: s2wr4 <= 28;
	      {1'd0, 7'd93}: s2wr4 <= 29;
	      {1'd0, 7'd94}: s2wr4 <= 30;
	      {1'd0, 7'd95}: s2wr4 <= 31;
	      {1'd0, 7'd96}: s2wr4 <= 32;
	      {1'd0, 7'd97}: s2wr4 <= 33;
	      {1'd0, 7'd98}: s2wr4 <= 34;
	      {1'd0, 7'd99}: s2wr4 <= 35;
	      {1'd0, 7'd100}: s2wr4 <= 36;
	      {1'd0, 7'd101}: s2wr4 <= 37;
	      {1'd0, 7'd102}: s2wr4 <= 38;
	      {1'd0, 7'd103}: s2wr4 <= 39;
	      {1'd0, 7'd104}: s2wr4 <= 40;
	      {1'd0, 7'd105}: s2wr4 <= 41;
	      {1'd0, 7'd106}: s2wr4 <= 42;
	      {1'd0, 7'd107}: s2wr4 <= 43;
	      {1'd0, 7'd108}: s2wr4 <= 44;
	      {1'd0, 7'd109}: s2wr4 <= 45;
	      {1'd0, 7'd110}: s2wr4 <= 46;
	      {1'd0, 7'd111}: s2wr4 <= 47;
	      {1'd0, 7'd112}: s2wr4 <= 48;
	      {1'd0, 7'd113}: s2wr4 <= 49;
	      {1'd0, 7'd114}: s2wr4 <= 50;
	      {1'd0, 7'd115}: s2wr4 <= 51;
	      {1'd0, 7'd116}: s2wr4 <= 52;
	      {1'd0, 7'd117}: s2wr4 <= 53;
	      {1'd0, 7'd118}: s2wr4 <= 54;
	      {1'd0, 7'd119}: s2wr4 <= 55;
	      {1'd0, 7'd120}: s2wr4 <= 56;
	      {1'd0, 7'd121}: s2wr4 <= 57;
	      {1'd0, 7'd122}: s2wr4 <= 58;
	      {1'd0, 7'd123}: s2wr4 <= 59;
	      {1'd0, 7'd124}: s2wr4 <= 60;
	      {1'd0, 7'd125}: s2wr4 <= 61;
	      {1'd0, 7'd126}: s2wr4 <= 62;
	      {1'd0, 7'd127}: s2wr4 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 0;
	      {1'd0, 7'd1}: s2wr5 <= 1;
	      {1'd0, 7'd2}: s2wr5 <= 2;
	      {1'd0, 7'd3}: s2wr5 <= 3;
	      {1'd0, 7'd4}: s2wr5 <= 4;
	      {1'd0, 7'd5}: s2wr5 <= 5;
	      {1'd0, 7'd6}: s2wr5 <= 6;
	      {1'd0, 7'd7}: s2wr5 <= 7;
	      {1'd0, 7'd8}: s2wr5 <= 8;
	      {1'd0, 7'd9}: s2wr5 <= 9;
	      {1'd0, 7'd10}: s2wr5 <= 10;
	      {1'd0, 7'd11}: s2wr5 <= 11;
	      {1'd0, 7'd12}: s2wr5 <= 12;
	      {1'd0, 7'd13}: s2wr5 <= 13;
	      {1'd0, 7'd14}: s2wr5 <= 14;
	      {1'd0, 7'd15}: s2wr5 <= 15;
	      {1'd0, 7'd16}: s2wr5 <= 16;
	      {1'd0, 7'd17}: s2wr5 <= 17;
	      {1'd0, 7'd18}: s2wr5 <= 18;
	      {1'd0, 7'd19}: s2wr5 <= 19;
	      {1'd0, 7'd20}: s2wr5 <= 20;
	      {1'd0, 7'd21}: s2wr5 <= 21;
	      {1'd0, 7'd22}: s2wr5 <= 22;
	      {1'd0, 7'd23}: s2wr5 <= 23;
	      {1'd0, 7'd24}: s2wr5 <= 24;
	      {1'd0, 7'd25}: s2wr5 <= 25;
	      {1'd0, 7'd26}: s2wr5 <= 26;
	      {1'd0, 7'd27}: s2wr5 <= 27;
	      {1'd0, 7'd28}: s2wr5 <= 28;
	      {1'd0, 7'd29}: s2wr5 <= 29;
	      {1'd0, 7'd30}: s2wr5 <= 30;
	      {1'd0, 7'd31}: s2wr5 <= 31;
	      {1'd0, 7'd32}: s2wr5 <= 32;
	      {1'd0, 7'd33}: s2wr5 <= 33;
	      {1'd0, 7'd34}: s2wr5 <= 34;
	      {1'd0, 7'd35}: s2wr5 <= 35;
	      {1'd0, 7'd36}: s2wr5 <= 36;
	      {1'd0, 7'd37}: s2wr5 <= 37;
	      {1'd0, 7'd38}: s2wr5 <= 38;
	      {1'd0, 7'd39}: s2wr5 <= 39;
	      {1'd0, 7'd40}: s2wr5 <= 40;
	      {1'd0, 7'd41}: s2wr5 <= 41;
	      {1'd0, 7'd42}: s2wr5 <= 42;
	      {1'd0, 7'd43}: s2wr5 <= 43;
	      {1'd0, 7'd44}: s2wr5 <= 44;
	      {1'd0, 7'd45}: s2wr5 <= 45;
	      {1'd0, 7'd46}: s2wr5 <= 46;
	      {1'd0, 7'd47}: s2wr5 <= 47;
	      {1'd0, 7'd48}: s2wr5 <= 48;
	      {1'd0, 7'd49}: s2wr5 <= 49;
	      {1'd0, 7'd50}: s2wr5 <= 50;
	      {1'd0, 7'd51}: s2wr5 <= 51;
	      {1'd0, 7'd52}: s2wr5 <= 52;
	      {1'd0, 7'd53}: s2wr5 <= 53;
	      {1'd0, 7'd54}: s2wr5 <= 54;
	      {1'd0, 7'd55}: s2wr5 <= 55;
	      {1'd0, 7'd56}: s2wr5 <= 56;
	      {1'd0, 7'd57}: s2wr5 <= 57;
	      {1'd0, 7'd58}: s2wr5 <= 58;
	      {1'd0, 7'd59}: s2wr5 <= 59;
	      {1'd0, 7'd60}: s2wr5 <= 60;
	      {1'd0, 7'd61}: s2wr5 <= 61;
	      {1'd0, 7'd62}: s2wr5 <= 62;
	      {1'd0, 7'd63}: s2wr5 <= 63;
	      {1'd0, 7'd64}: s2wr5 <= 64;
	      {1'd0, 7'd65}: s2wr5 <= 65;
	      {1'd0, 7'd66}: s2wr5 <= 66;
	      {1'd0, 7'd67}: s2wr5 <= 67;
	      {1'd0, 7'd68}: s2wr5 <= 68;
	      {1'd0, 7'd69}: s2wr5 <= 69;
	      {1'd0, 7'd70}: s2wr5 <= 70;
	      {1'd0, 7'd71}: s2wr5 <= 71;
	      {1'd0, 7'd72}: s2wr5 <= 72;
	      {1'd0, 7'd73}: s2wr5 <= 73;
	      {1'd0, 7'd74}: s2wr5 <= 74;
	      {1'd0, 7'd75}: s2wr5 <= 75;
	      {1'd0, 7'd76}: s2wr5 <= 76;
	      {1'd0, 7'd77}: s2wr5 <= 77;
	      {1'd0, 7'd78}: s2wr5 <= 78;
	      {1'd0, 7'd79}: s2wr5 <= 79;
	      {1'd0, 7'd80}: s2wr5 <= 80;
	      {1'd0, 7'd81}: s2wr5 <= 81;
	      {1'd0, 7'd82}: s2wr5 <= 82;
	      {1'd0, 7'd83}: s2wr5 <= 83;
	      {1'd0, 7'd84}: s2wr5 <= 84;
	      {1'd0, 7'd85}: s2wr5 <= 85;
	      {1'd0, 7'd86}: s2wr5 <= 86;
	      {1'd0, 7'd87}: s2wr5 <= 87;
	      {1'd0, 7'd88}: s2wr5 <= 88;
	      {1'd0, 7'd89}: s2wr5 <= 89;
	      {1'd0, 7'd90}: s2wr5 <= 90;
	      {1'd0, 7'd91}: s2wr5 <= 91;
	      {1'd0, 7'd92}: s2wr5 <= 92;
	      {1'd0, 7'd93}: s2wr5 <= 93;
	      {1'd0, 7'd94}: s2wr5 <= 94;
	      {1'd0, 7'd95}: s2wr5 <= 95;
	      {1'd0, 7'd96}: s2wr5 <= 96;
	      {1'd0, 7'd97}: s2wr5 <= 97;
	      {1'd0, 7'd98}: s2wr5 <= 98;
	      {1'd0, 7'd99}: s2wr5 <= 99;
	      {1'd0, 7'd100}: s2wr5 <= 100;
	      {1'd0, 7'd101}: s2wr5 <= 101;
	      {1'd0, 7'd102}: s2wr5 <= 102;
	      {1'd0, 7'd103}: s2wr5 <= 103;
	      {1'd0, 7'd104}: s2wr5 <= 104;
	      {1'd0, 7'd105}: s2wr5 <= 105;
	      {1'd0, 7'd106}: s2wr5 <= 106;
	      {1'd0, 7'd107}: s2wr5 <= 107;
	      {1'd0, 7'd108}: s2wr5 <= 108;
	      {1'd0, 7'd109}: s2wr5 <= 109;
	      {1'd0, 7'd110}: s2wr5 <= 110;
	      {1'd0, 7'd111}: s2wr5 <= 111;
	      {1'd0, 7'd112}: s2wr5 <= 112;
	      {1'd0, 7'd113}: s2wr5 <= 113;
	      {1'd0, 7'd114}: s2wr5 <= 114;
	      {1'd0, 7'd115}: s2wr5 <= 115;
	      {1'd0, 7'd116}: s2wr5 <= 116;
	      {1'd0, 7'd117}: s2wr5 <= 117;
	      {1'd0, 7'd118}: s2wr5 <= 118;
	      {1'd0, 7'd119}: s2wr5 <= 119;
	      {1'd0, 7'd120}: s2wr5 <= 120;
	      {1'd0, 7'd121}: s2wr5 <= 121;
	      {1'd0, 7'd122}: s2wr5 <= 122;
	      {1'd0, 7'd123}: s2wr5 <= 123;
	      {1'd0, 7'd124}: s2wr5 <= 124;
	      {1'd0, 7'd125}: s2wr5 <= 125;
	      {1'd0, 7'd126}: s2wr5 <= 126;
	      {1'd0, 7'd127}: s2wr5 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 64;
	      {1'd0, 7'd1}: s2wr6 <= 65;
	      {1'd0, 7'd2}: s2wr6 <= 66;
	      {1'd0, 7'd3}: s2wr6 <= 67;
	      {1'd0, 7'd4}: s2wr6 <= 68;
	      {1'd0, 7'd5}: s2wr6 <= 69;
	      {1'd0, 7'd6}: s2wr6 <= 70;
	      {1'd0, 7'd7}: s2wr6 <= 71;
	      {1'd0, 7'd8}: s2wr6 <= 72;
	      {1'd0, 7'd9}: s2wr6 <= 73;
	      {1'd0, 7'd10}: s2wr6 <= 74;
	      {1'd0, 7'd11}: s2wr6 <= 75;
	      {1'd0, 7'd12}: s2wr6 <= 76;
	      {1'd0, 7'd13}: s2wr6 <= 77;
	      {1'd0, 7'd14}: s2wr6 <= 78;
	      {1'd0, 7'd15}: s2wr6 <= 79;
	      {1'd0, 7'd16}: s2wr6 <= 80;
	      {1'd0, 7'd17}: s2wr6 <= 81;
	      {1'd0, 7'd18}: s2wr6 <= 82;
	      {1'd0, 7'd19}: s2wr6 <= 83;
	      {1'd0, 7'd20}: s2wr6 <= 84;
	      {1'd0, 7'd21}: s2wr6 <= 85;
	      {1'd0, 7'd22}: s2wr6 <= 86;
	      {1'd0, 7'd23}: s2wr6 <= 87;
	      {1'd0, 7'd24}: s2wr6 <= 88;
	      {1'd0, 7'd25}: s2wr6 <= 89;
	      {1'd0, 7'd26}: s2wr6 <= 90;
	      {1'd0, 7'd27}: s2wr6 <= 91;
	      {1'd0, 7'd28}: s2wr6 <= 92;
	      {1'd0, 7'd29}: s2wr6 <= 93;
	      {1'd0, 7'd30}: s2wr6 <= 94;
	      {1'd0, 7'd31}: s2wr6 <= 95;
	      {1'd0, 7'd32}: s2wr6 <= 96;
	      {1'd0, 7'd33}: s2wr6 <= 97;
	      {1'd0, 7'd34}: s2wr6 <= 98;
	      {1'd0, 7'd35}: s2wr6 <= 99;
	      {1'd0, 7'd36}: s2wr6 <= 100;
	      {1'd0, 7'd37}: s2wr6 <= 101;
	      {1'd0, 7'd38}: s2wr6 <= 102;
	      {1'd0, 7'd39}: s2wr6 <= 103;
	      {1'd0, 7'd40}: s2wr6 <= 104;
	      {1'd0, 7'd41}: s2wr6 <= 105;
	      {1'd0, 7'd42}: s2wr6 <= 106;
	      {1'd0, 7'd43}: s2wr6 <= 107;
	      {1'd0, 7'd44}: s2wr6 <= 108;
	      {1'd0, 7'd45}: s2wr6 <= 109;
	      {1'd0, 7'd46}: s2wr6 <= 110;
	      {1'd0, 7'd47}: s2wr6 <= 111;
	      {1'd0, 7'd48}: s2wr6 <= 112;
	      {1'd0, 7'd49}: s2wr6 <= 113;
	      {1'd0, 7'd50}: s2wr6 <= 114;
	      {1'd0, 7'd51}: s2wr6 <= 115;
	      {1'd0, 7'd52}: s2wr6 <= 116;
	      {1'd0, 7'd53}: s2wr6 <= 117;
	      {1'd0, 7'd54}: s2wr6 <= 118;
	      {1'd0, 7'd55}: s2wr6 <= 119;
	      {1'd0, 7'd56}: s2wr6 <= 120;
	      {1'd0, 7'd57}: s2wr6 <= 121;
	      {1'd0, 7'd58}: s2wr6 <= 122;
	      {1'd0, 7'd59}: s2wr6 <= 123;
	      {1'd0, 7'd60}: s2wr6 <= 124;
	      {1'd0, 7'd61}: s2wr6 <= 125;
	      {1'd0, 7'd62}: s2wr6 <= 126;
	      {1'd0, 7'd63}: s2wr6 <= 127;
	      {1'd0, 7'd64}: s2wr6 <= 0;
	      {1'd0, 7'd65}: s2wr6 <= 1;
	      {1'd0, 7'd66}: s2wr6 <= 2;
	      {1'd0, 7'd67}: s2wr6 <= 3;
	      {1'd0, 7'd68}: s2wr6 <= 4;
	      {1'd0, 7'd69}: s2wr6 <= 5;
	      {1'd0, 7'd70}: s2wr6 <= 6;
	      {1'd0, 7'd71}: s2wr6 <= 7;
	      {1'd0, 7'd72}: s2wr6 <= 8;
	      {1'd0, 7'd73}: s2wr6 <= 9;
	      {1'd0, 7'd74}: s2wr6 <= 10;
	      {1'd0, 7'd75}: s2wr6 <= 11;
	      {1'd0, 7'd76}: s2wr6 <= 12;
	      {1'd0, 7'd77}: s2wr6 <= 13;
	      {1'd0, 7'd78}: s2wr6 <= 14;
	      {1'd0, 7'd79}: s2wr6 <= 15;
	      {1'd0, 7'd80}: s2wr6 <= 16;
	      {1'd0, 7'd81}: s2wr6 <= 17;
	      {1'd0, 7'd82}: s2wr6 <= 18;
	      {1'd0, 7'd83}: s2wr6 <= 19;
	      {1'd0, 7'd84}: s2wr6 <= 20;
	      {1'd0, 7'd85}: s2wr6 <= 21;
	      {1'd0, 7'd86}: s2wr6 <= 22;
	      {1'd0, 7'd87}: s2wr6 <= 23;
	      {1'd0, 7'd88}: s2wr6 <= 24;
	      {1'd0, 7'd89}: s2wr6 <= 25;
	      {1'd0, 7'd90}: s2wr6 <= 26;
	      {1'd0, 7'd91}: s2wr6 <= 27;
	      {1'd0, 7'd92}: s2wr6 <= 28;
	      {1'd0, 7'd93}: s2wr6 <= 29;
	      {1'd0, 7'd94}: s2wr6 <= 30;
	      {1'd0, 7'd95}: s2wr6 <= 31;
	      {1'd0, 7'd96}: s2wr6 <= 32;
	      {1'd0, 7'd97}: s2wr6 <= 33;
	      {1'd0, 7'd98}: s2wr6 <= 34;
	      {1'd0, 7'd99}: s2wr6 <= 35;
	      {1'd0, 7'd100}: s2wr6 <= 36;
	      {1'd0, 7'd101}: s2wr6 <= 37;
	      {1'd0, 7'd102}: s2wr6 <= 38;
	      {1'd0, 7'd103}: s2wr6 <= 39;
	      {1'd0, 7'd104}: s2wr6 <= 40;
	      {1'd0, 7'd105}: s2wr6 <= 41;
	      {1'd0, 7'd106}: s2wr6 <= 42;
	      {1'd0, 7'd107}: s2wr6 <= 43;
	      {1'd0, 7'd108}: s2wr6 <= 44;
	      {1'd0, 7'd109}: s2wr6 <= 45;
	      {1'd0, 7'd110}: s2wr6 <= 46;
	      {1'd0, 7'd111}: s2wr6 <= 47;
	      {1'd0, 7'd112}: s2wr6 <= 48;
	      {1'd0, 7'd113}: s2wr6 <= 49;
	      {1'd0, 7'd114}: s2wr6 <= 50;
	      {1'd0, 7'd115}: s2wr6 <= 51;
	      {1'd0, 7'd116}: s2wr6 <= 52;
	      {1'd0, 7'd117}: s2wr6 <= 53;
	      {1'd0, 7'd118}: s2wr6 <= 54;
	      {1'd0, 7'd119}: s2wr6 <= 55;
	      {1'd0, 7'd120}: s2wr6 <= 56;
	      {1'd0, 7'd121}: s2wr6 <= 57;
	      {1'd0, 7'd122}: s2wr6 <= 58;
	      {1'd0, 7'd123}: s2wr6 <= 59;
	      {1'd0, 7'd124}: s2wr6 <= 60;
	      {1'd0, 7'd125}: s2wr6 <= 61;
	      {1'd0, 7'd126}: s2wr6 <= 62;
	      {1'd0, 7'd127}: s2wr6 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm107_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 8;
	      {1'd0, 7'd9}: s2wr7 <= 9;
	      {1'd0, 7'd10}: s2wr7 <= 10;
	      {1'd0, 7'd11}: s2wr7 <= 11;
	      {1'd0, 7'd12}: s2wr7 <= 12;
	      {1'd0, 7'd13}: s2wr7 <= 13;
	      {1'd0, 7'd14}: s2wr7 <= 14;
	      {1'd0, 7'd15}: s2wr7 <= 15;
	      {1'd0, 7'd16}: s2wr7 <= 16;
	      {1'd0, 7'd17}: s2wr7 <= 17;
	      {1'd0, 7'd18}: s2wr7 <= 18;
	      {1'd0, 7'd19}: s2wr7 <= 19;
	      {1'd0, 7'd20}: s2wr7 <= 20;
	      {1'd0, 7'd21}: s2wr7 <= 21;
	      {1'd0, 7'd22}: s2wr7 <= 22;
	      {1'd0, 7'd23}: s2wr7 <= 23;
	      {1'd0, 7'd24}: s2wr7 <= 24;
	      {1'd0, 7'd25}: s2wr7 <= 25;
	      {1'd0, 7'd26}: s2wr7 <= 26;
	      {1'd0, 7'd27}: s2wr7 <= 27;
	      {1'd0, 7'd28}: s2wr7 <= 28;
	      {1'd0, 7'd29}: s2wr7 <= 29;
	      {1'd0, 7'd30}: s2wr7 <= 30;
	      {1'd0, 7'd31}: s2wr7 <= 31;
	      {1'd0, 7'd32}: s2wr7 <= 32;
	      {1'd0, 7'd33}: s2wr7 <= 33;
	      {1'd0, 7'd34}: s2wr7 <= 34;
	      {1'd0, 7'd35}: s2wr7 <= 35;
	      {1'd0, 7'd36}: s2wr7 <= 36;
	      {1'd0, 7'd37}: s2wr7 <= 37;
	      {1'd0, 7'd38}: s2wr7 <= 38;
	      {1'd0, 7'd39}: s2wr7 <= 39;
	      {1'd0, 7'd40}: s2wr7 <= 40;
	      {1'd0, 7'd41}: s2wr7 <= 41;
	      {1'd0, 7'd42}: s2wr7 <= 42;
	      {1'd0, 7'd43}: s2wr7 <= 43;
	      {1'd0, 7'd44}: s2wr7 <= 44;
	      {1'd0, 7'd45}: s2wr7 <= 45;
	      {1'd0, 7'd46}: s2wr7 <= 46;
	      {1'd0, 7'd47}: s2wr7 <= 47;
	      {1'd0, 7'd48}: s2wr7 <= 48;
	      {1'd0, 7'd49}: s2wr7 <= 49;
	      {1'd0, 7'd50}: s2wr7 <= 50;
	      {1'd0, 7'd51}: s2wr7 <= 51;
	      {1'd0, 7'd52}: s2wr7 <= 52;
	      {1'd0, 7'd53}: s2wr7 <= 53;
	      {1'd0, 7'd54}: s2wr7 <= 54;
	      {1'd0, 7'd55}: s2wr7 <= 55;
	      {1'd0, 7'd56}: s2wr7 <= 56;
	      {1'd0, 7'd57}: s2wr7 <= 57;
	      {1'd0, 7'd58}: s2wr7 <= 58;
	      {1'd0, 7'd59}: s2wr7 <= 59;
	      {1'd0, 7'd60}: s2wr7 <= 60;
	      {1'd0, 7'd61}: s2wr7 <= 61;
	      {1'd0, 7'd62}: s2wr7 <= 62;
	      {1'd0, 7'd63}: s2wr7 <= 63;
	      {1'd0, 7'd64}: s2wr7 <= 64;
	      {1'd0, 7'd65}: s2wr7 <= 65;
	      {1'd0, 7'd66}: s2wr7 <= 66;
	      {1'd0, 7'd67}: s2wr7 <= 67;
	      {1'd0, 7'd68}: s2wr7 <= 68;
	      {1'd0, 7'd69}: s2wr7 <= 69;
	      {1'd0, 7'd70}: s2wr7 <= 70;
	      {1'd0, 7'd71}: s2wr7 <= 71;
	      {1'd0, 7'd72}: s2wr7 <= 72;
	      {1'd0, 7'd73}: s2wr7 <= 73;
	      {1'd0, 7'd74}: s2wr7 <= 74;
	      {1'd0, 7'd75}: s2wr7 <= 75;
	      {1'd0, 7'd76}: s2wr7 <= 76;
	      {1'd0, 7'd77}: s2wr7 <= 77;
	      {1'd0, 7'd78}: s2wr7 <= 78;
	      {1'd0, 7'd79}: s2wr7 <= 79;
	      {1'd0, 7'd80}: s2wr7 <= 80;
	      {1'd0, 7'd81}: s2wr7 <= 81;
	      {1'd0, 7'd82}: s2wr7 <= 82;
	      {1'd0, 7'd83}: s2wr7 <= 83;
	      {1'd0, 7'd84}: s2wr7 <= 84;
	      {1'd0, 7'd85}: s2wr7 <= 85;
	      {1'd0, 7'd86}: s2wr7 <= 86;
	      {1'd0, 7'd87}: s2wr7 <= 87;
	      {1'd0, 7'd88}: s2wr7 <= 88;
	      {1'd0, 7'd89}: s2wr7 <= 89;
	      {1'd0, 7'd90}: s2wr7 <= 90;
	      {1'd0, 7'd91}: s2wr7 <= 91;
	      {1'd0, 7'd92}: s2wr7 <= 92;
	      {1'd0, 7'd93}: s2wr7 <= 93;
	      {1'd0, 7'd94}: s2wr7 <= 94;
	      {1'd0, 7'd95}: s2wr7 <= 95;
	      {1'd0, 7'd96}: s2wr7 <= 96;
	      {1'd0, 7'd97}: s2wr7 <= 97;
	      {1'd0, 7'd98}: s2wr7 <= 98;
	      {1'd0, 7'd99}: s2wr7 <= 99;
	      {1'd0, 7'd100}: s2wr7 <= 100;
	      {1'd0, 7'd101}: s2wr7 <= 101;
	      {1'd0, 7'd102}: s2wr7 <= 102;
	      {1'd0, 7'd103}: s2wr7 <= 103;
	      {1'd0, 7'd104}: s2wr7 <= 104;
	      {1'd0, 7'd105}: s2wr7 <= 105;
	      {1'd0, 7'd106}: s2wr7 <= 106;
	      {1'd0, 7'd107}: s2wr7 <= 107;
	      {1'd0, 7'd108}: s2wr7 <= 108;
	      {1'd0, 7'd109}: s2wr7 <= 109;
	      {1'd0, 7'd110}: s2wr7 <= 110;
	      {1'd0, 7'd111}: s2wr7 <= 111;
	      {1'd0, 7'd112}: s2wr7 <= 112;
	      {1'd0, 7'd113}: s2wr7 <= 113;
	      {1'd0, 7'd114}: s2wr7 <= 114;
	      {1'd0, 7'd115}: s2wr7 <= 115;
	      {1'd0, 7'd116}: s2wr7 <= 116;
	      {1'd0, 7'd117}: s2wr7 <= 117;
	      {1'd0, 7'd118}: s2wr7 <= 118;
	      {1'd0, 7'd119}: s2wr7 <= 119;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule


// Latency: 8
// Gap: 128
module DirSum_71214(clk, reset, next, next_out,
      X0, Y0,
      X1, Y1,
      X2, Y2,
      X3, Y3,
      X4, Y4,
      X5, Y5,
      X6, Y6,
      X7, Y7,
      X8, Y8,
      X9, Y9,
      X10, Y10,
      X11, Y11,
      X12, Y12,
      X13, Y13,
      X14, Y14,
      X15, Y15);

   output next_out;
   input clk, reset, next;

   reg [6:0] i1;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   always @(posedge clk) begin
      if (reset == 1) begin
         i1 <= 0;
      end
      else begin
         if (next == 1)
            i1 <= 0;
         else if (i1 == 127)
            i1 <= 0;
         else
            i1 <= i1 + 1;
      end
   end

   codeBlock68492 codeBlockIsnt76850(.clk(clk), .reset(reset), .next_in(next), .next_out(next_out),
.i1_in(i1),
       .X0_in(X0), .Y0(Y0),
       .X1_in(X1), .Y1(Y1),
       .X2_in(X2), .Y2(Y2),
       .X3_in(X3), .Y3(Y3),
       .X4_in(X4), .Y4(Y4),
       .X5_in(X5), .Y5(Y5),
       .X6_in(X6), .Y6(Y6),
       .X7_in(X7), .Y7(Y7),
       .X8_in(X8), .Y8(Y8),
       .X9_in(X9), .Y9(Y9),
       .X10_in(X10), .Y10(Y10),
       .X11_in(X11), .Y11(Y11),
       .X12_in(X12), .Y12(Y12),
       .X13_in(X13), .Y13(Y13),
       .X14_in(X14), .Y14(Y14),
       .X15_in(X15), .Y15(Y15));

endmodule

module D10_69392(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h0;
      1: out3 <= 16'hfe6e;
      2: out3 <= 16'hfcdc;
      3: out3 <= 16'hfb4b;
      4: out3 <= 16'hf9ba;
      5: out3 <= 16'hf82a;
      6: out3 <= 16'hf69c;
      7: out3 <= 16'hf50f;
      8: out3 <= 16'hf384;
      9: out3 <= 16'hf1fa;
      10: out3 <= 16'hf073;
      11: out3 <= 16'heeee;
      12: out3 <= 16'hed6c;
      13: out3 <= 16'hebed;
      14: out3 <= 16'hea70;
      15: out3 <= 16'he8f7;
      16: out3 <= 16'he782;
      17: out3 <= 16'he611;
      18: out3 <= 16'he4a3;
      19: out3 <= 16'he33a;
      20: out3 <= 16'he1d5;
      21: out3 <= 16'he074;
      22: out3 <= 16'hdf19;
      23: out3 <= 16'hddc3;
      24: out3 <= 16'hdc72;
      25: out3 <= 16'hdb26;
      26: out3 <= 16'hd9e0;
      27: out3 <= 16'hd8a0;
      28: out3 <= 16'hd766;
      29: out3 <= 16'hd632;
      30: out3 <= 16'hd505;
      31: out3 <= 16'hd3df;
      32: out3 <= 16'hd2bf;
      33: out3 <= 16'hd1a6;
      34: out3 <= 16'hd094;
      35: out3 <= 16'hcf8a;
      36: out3 <= 16'hce87;
      37: out3 <= 16'hcd8c;
      38: out3 <= 16'hcc98;
      39: out3 <= 16'hcbad;
      40: out3 <= 16'hcac9;
      41: out3 <= 16'hc9ee;
      42: out3 <= 16'hc91b;
      43: out3 <= 16'hc850;
      44: out3 <= 16'hc78f;
      45: out3 <= 16'hc6d5;
      46: out3 <= 16'hc625;
      47: out3 <= 16'hc57e;
      48: out3 <= 16'hc4df;
      49: out3 <= 16'hc44a;
      50: out3 <= 16'hc3be;
      51: out3 <= 16'hc33b;
      52: out3 <= 16'hc2c1;
      53: out3 <= 16'hc251;
      54: out3 <= 16'hc1eb;
      55: out3 <= 16'hc18e;
      56: out3 <= 16'hc13b;
      57: out3 <= 16'hc0f1;
      58: out3 <= 16'hc0b1;
      59: out3 <= 16'hc07b;
      60: out3 <= 16'hc04f;
      61: out3 <= 16'hc02c;
      62: out3 <= 16'hc014;
      63: out3 <= 16'hc005;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc005;
      66: out3 <= 16'hc014;
      67: out3 <= 16'hc02c;
      68: out3 <= 16'hc04f;
      69: out3 <= 16'hc07b;
      70: out3 <= 16'hc0b1;
      71: out3 <= 16'hc0f1;
      72: out3 <= 16'hc13b;
      73: out3 <= 16'hc18e;
      74: out3 <= 16'hc1eb;
      75: out3 <= 16'hc251;
      76: out3 <= 16'hc2c1;
      77: out3 <= 16'hc33b;
      78: out3 <= 16'hc3be;
      79: out3 <= 16'hc44a;
      80: out3 <= 16'hc4df;
      81: out3 <= 16'hc57e;
      82: out3 <= 16'hc625;
      83: out3 <= 16'hc6d5;
      84: out3 <= 16'hc78f;
      85: out3 <= 16'hc850;
      86: out3 <= 16'hc91b;
      87: out3 <= 16'hc9ee;
      88: out3 <= 16'hcac9;
      89: out3 <= 16'hcbad;
      90: out3 <= 16'hcc98;
      91: out3 <= 16'hcd8c;
      92: out3 <= 16'hce87;
      93: out3 <= 16'hcf8a;
      94: out3 <= 16'hd094;
      95: out3 <= 16'hd1a6;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd3df;
      98: out3 <= 16'hd505;
      99: out3 <= 16'hd632;
      100: out3 <= 16'hd766;
      101: out3 <= 16'hd8a0;
      102: out3 <= 16'hd9e0;
      103: out3 <= 16'hdb26;
      104: out3 <= 16'hdc72;
      105: out3 <= 16'hddc3;
      106: out3 <= 16'hdf19;
      107: out3 <= 16'he074;
      108: out3 <= 16'he1d5;
      109: out3 <= 16'he33a;
      110: out3 <= 16'he4a3;
      111: out3 <= 16'he611;
      112: out3 <= 16'he782;
      113: out3 <= 16'he8f7;
      114: out3 <= 16'hea70;
      115: out3 <= 16'hebed;
      116: out3 <= 16'hed6c;
      117: out3 <= 16'heeee;
      118: out3 <= 16'hf073;
      119: out3 <= 16'hf1fa;
      120: out3 <= 16'hf384;
      121: out3 <= 16'hf50f;
      122: out3 <= 16'hf69c;
      123: out3 <= 16'hf82a;
      124: out3 <= 16'hf9ba;
      125: out3 <= 16'hfb4b;
      126: out3 <= 16'hfcdc;
      127: out3 <= 16'hfe6e;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D2_69652(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ffb;
      2: out3 <= 16'h3fec;
      3: out3 <= 16'h3fd4;
      4: out3 <= 16'h3fb1;
      5: out3 <= 16'h3f85;
      6: out3 <= 16'h3f4f;
      7: out3 <= 16'h3f0f;
      8: out3 <= 16'h3ec5;
      9: out3 <= 16'h3e72;
      10: out3 <= 16'h3e15;
      11: out3 <= 16'h3daf;
      12: out3 <= 16'h3d3f;
      13: out3 <= 16'h3cc5;
      14: out3 <= 16'h3c42;
      15: out3 <= 16'h3bb6;
      16: out3 <= 16'h3b21;
      17: out3 <= 16'h3a82;
      18: out3 <= 16'h39db;
      19: out3 <= 16'h392b;
      20: out3 <= 16'h3871;
      21: out3 <= 16'h37b0;
      22: out3 <= 16'h36e5;
      23: out3 <= 16'h3612;
      24: out3 <= 16'h3537;
      25: out3 <= 16'h3453;
      26: out3 <= 16'h3368;
      27: out3 <= 16'h3274;
      28: out3 <= 16'h3179;
      29: out3 <= 16'h3076;
      30: out3 <= 16'h2f6c;
      31: out3 <= 16'h2e5a;
      32: out3 <= 16'h2d41;
      33: out3 <= 16'h2c21;
      34: out3 <= 16'h2afb;
      35: out3 <= 16'h29ce;
      36: out3 <= 16'h289a;
      37: out3 <= 16'h2760;
      38: out3 <= 16'h2620;
      39: out3 <= 16'h24da;
      40: out3 <= 16'h238e;
      41: out3 <= 16'h223d;
      42: out3 <= 16'h20e7;
      43: out3 <= 16'h1f8c;
      44: out3 <= 16'h1e2b;
      45: out3 <= 16'h1cc6;
      46: out3 <= 16'h1b5d;
      47: out3 <= 16'h19ef;
      48: out3 <= 16'h187e;
      49: out3 <= 16'h1709;
      50: out3 <= 16'h1590;
      51: out3 <= 16'h1413;
      52: out3 <= 16'h1294;
      53: out3 <= 16'h1112;
      54: out3 <= 16'hf8d;
      55: out3 <= 16'he06;
      56: out3 <= 16'hc7c;
      57: out3 <= 16'haf1;
      58: out3 <= 16'h964;
      59: out3 <= 16'h7d6;
      60: out3 <= 16'h646;
      61: out3 <= 16'h4b5;
      62: out3 <= 16'h324;
      63: out3 <= 16'h192;
      64: out3 <= 16'h0;
      65: out3 <= 16'hfe6e;
      66: out3 <= 16'hfcdc;
      67: out3 <= 16'hfb4b;
      68: out3 <= 16'hf9ba;
      69: out3 <= 16'hf82a;
      70: out3 <= 16'hf69c;
      71: out3 <= 16'hf50f;
      72: out3 <= 16'hf384;
      73: out3 <= 16'hf1fa;
      74: out3 <= 16'hf073;
      75: out3 <= 16'heeee;
      76: out3 <= 16'hed6c;
      77: out3 <= 16'hebed;
      78: out3 <= 16'hea70;
      79: out3 <= 16'he8f7;
      80: out3 <= 16'he782;
      81: out3 <= 16'he611;
      82: out3 <= 16'he4a3;
      83: out3 <= 16'he33a;
      84: out3 <= 16'he1d5;
      85: out3 <= 16'he074;
      86: out3 <= 16'hdf19;
      87: out3 <= 16'hddc3;
      88: out3 <= 16'hdc72;
      89: out3 <= 16'hdb26;
      90: out3 <= 16'hd9e0;
      91: out3 <= 16'hd8a0;
      92: out3 <= 16'hd766;
      93: out3 <= 16'hd632;
      94: out3 <= 16'hd505;
      95: out3 <= 16'hd3df;
      96: out3 <= 16'hd2bf;
      97: out3 <= 16'hd1a6;
      98: out3 <= 16'hd094;
      99: out3 <= 16'hcf8a;
      100: out3 <= 16'hce87;
      101: out3 <= 16'hcd8c;
      102: out3 <= 16'hcc98;
      103: out3 <= 16'hcbad;
      104: out3 <= 16'hcac9;
      105: out3 <= 16'hc9ee;
      106: out3 <= 16'hc91b;
      107: out3 <= 16'hc850;
      108: out3 <= 16'hc78f;
      109: out3 <= 16'hc6d5;
      110: out3 <= 16'hc625;
      111: out3 <= 16'hc57e;
      112: out3 <= 16'hc4df;
      113: out3 <= 16'hc44a;
      114: out3 <= 16'hc3be;
      115: out3 <= 16'hc33b;
      116: out3 <= 16'hc2c1;
      117: out3 <= 16'hc251;
      118: out3 <= 16'hc1eb;
      119: out3 <= 16'hc18e;
      120: out3 <= 16'hc13b;
      121: out3 <= 16'hc0f1;
      122: out3 <= 16'hc0b1;
      123: out3 <= 16'hc07b;
      124: out3 <= 16'hc04f;
      125: out3 <= 16'hc02c;
      126: out3 <= 16'hc014;
      127: out3 <= 16'hc005;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D8_69912(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3ffd;
      1: out3 <= 16'h3ff1;
      2: out3 <= 16'h3fdb;
      3: out3 <= 16'h3fbb;
      4: out3 <= 16'h3f91;
      5: out3 <= 16'h3f5d;
      6: out3 <= 16'h3f20;
      7: out3 <= 16'h3ed8;
      8: out3 <= 16'h3e88;
      9: out3 <= 16'h3e2d;
      10: out3 <= 16'h3dc9;
      11: out3 <= 16'h3d5b;
      12: out3 <= 16'h3ce4;
      13: out3 <= 16'h3c64;
      14: out3 <= 16'h3bda;
      15: out3 <= 16'h3b47;
      16: out3 <= 16'h3aab;
      17: out3 <= 16'h3a06;
      18: out3 <= 16'h3958;
      19: out3 <= 16'h38a1;
      20: out3 <= 16'h37e1;
      21: out3 <= 16'h3718;
      22: out3 <= 16'h3648;
      23: out3 <= 16'h356e;
      24: out3 <= 16'h348d;
      25: out3 <= 16'h33a3;
      26: out3 <= 16'h32b2;
      27: out3 <= 16'h31b9;
      28: out3 <= 16'h30b8;
      29: out3 <= 16'h2faf;
      30: out3 <= 16'h2e9f;
      31: out3 <= 16'h2d88;
      32: out3 <= 16'h2c6a;
      33: out3 <= 16'h2b45;
      34: out3 <= 16'h2a1a;
      35: out3 <= 16'h28e7;
      36: out3 <= 16'h27af;
      37: out3 <= 16'h2671;
      38: out3 <= 16'h252c;
      39: out3 <= 16'h23e2;
      40: out3 <= 16'h2292;
      41: out3 <= 16'h213d;
      42: out3 <= 16'h1fe3;
      43: out3 <= 16'h1e84;
      44: out3 <= 16'h1d20;
      45: out3 <= 16'h1bb8;
      46: out3 <= 16'h1a4b;
      47: out3 <= 16'h18db;
      48: out3 <= 16'h1766;
      49: out3 <= 16'h15ee;
      50: out3 <= 16'h1473;
      51: out3 <= 16'h12f4;
      52: out3 <= 16'h1173;
      53: out3 <= 16'hfee;
      54: out3 <= 16'he68;
      55: out3 <= 16'hcdf;
      56: out3 <= 16'hb54;
      57: out3 <= 16'h9c7;
      58: out3 <= 16'h839;
      59: out3 <= 16'h6aa;
      60: out3 <= 16'h51a;
      61: out3 <= 16'h388;
      62: out3 <= 16'h1f7;
      63: out3 <= 16'h65;
      64: out3 <= 16'hfed2;
      65: out3 <= 16'hfd40;
      66: out3 <= 16'hfbaf;
      67: out3 <= 16'hfa1e;
      68: out3 <= 16'hf88e;
      69: out3 <= 16'hf6ff;
      70: out3 <= 16'hf572;
      71: out3 <= 16'hf3e6;
      72: out3 <= 16'hf25c;
      73: out3 <= 16'hf0d5;
      74: out3 <= 16'hef4f;
      75: out3 <= 16'hedcc;
      76: out3 <= 16'hec4c;
      77: out3 <= 16'heacf;
      78: out3 <= 16'he955;
      79: out3 <= 16'he7df;
      80: out3 <= 16'he66d;
      81: out3 <= 16'he4fe;
      82: out3 <= 16'he394;
      83: out3 <= 16'he22d;
      84: out3 <= 16'he0cc;
      85: out3 <= 16'hdf6f;
      86: out3 <= 16'hde18;
      87: out3 <= 16'hdcc5;
      88: out3 <= 16'hdb78;
      89: out3 <= 16'hda31;
      90: out3 <= 16'hd8ef;
      91: out3 <= 16'hd7b4;
      92: out3 <= 16'hd67f;
      93: out3 <= 16'hd550;
      94: out3 <= 16'hd428;
      95: out3 <= 16'hd306;
      96: out3 <= 16'hd1eb;
      97: out3 <= 16'hd0d8;
      98: out3 <= 16'hcfcc;
      99: out3 <= 16'hcec7;
      100: out3 <= 16'hcdca;
      101: out3 <= 16'hccd4;
      102: out3 <= 16'hcbe7;
      103: out3 <= 16'hcb01;
      104: out3 <= 16'hca24;
      105: out3 <= 16'hc94f;
      106: out3 <= 16'hc882;
      107: out3 <= 16'hc7be;
      108: out3 <= 16'hc703;
      109: out3 <= 16'hc650;
      110: out3 <= 16'hc5a7;
      111: out3 <= 16'hc506;
      112: out3 <= 16'hc46e;
      113: out3 <= 16'hc3e0;
      114: out3 <= 16'hc35b;
      115: out3 <= 16'hc2df;
      116: out3 <= 16'hc26d;
      117: out3 <= 16'hc204;
      118: out3 <= 16'hc1a4;
      119: out3 <= 16'hc14f;
      120: out3 <= 16'hc103;
      121: out3 <= 16'hc0c0;
      122: out3 <= 16'hc088;
      123: out3 <= 16'hc059;
      124: out3 <= 16'hc034;
      125: out3 <= 16'hc019;
      126: out3 <= 16'hc008;
      127: out3 <= 16'hc000;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D16_70042(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hfed2;
      1: out3 <= 16'hfd40;
      2: out3 <= 16'hfbaf;
      3: out3 <= 16'hfa1e;
      4: out3 <= 16'hf88e;
      5: out3 <= 16'hf6ff;
      6: out3 <= 16'hf572;
      7: out3 <= 16'hf3e6;
      8: out3 <= 16'hf25c;
      9: out3 <= 16'hf0d5;
      10: out3 <= 16'hef4f;
      11: out3 <= 16'hedcc;
      12: out3 <= 16'hec4c;
      13: out3 <= 16'heacf;
      14: out3 <= 16'he955;
      15: out3 <= 16'he7df;
      16: out3 <= 16'he66d;
      17: out3 <= 16'he4fe;
      18: out3 <= 16'he394;
      19: out3 <= 16'he22d;
      20: out3 <= 16'he0cc;
      21: out3 <= 16'hdf6f;
      22: out3 <= 16'hde18;
      23: out3 <= 16'hdcc5;
      24: out3 <= 16'hdb78;
      25: out3 <= 16'hda31;
      26: out3 <= 16'hd8ef;
      27: out3 <= 16'hd7b4;
      28: out3 <= 16'hd67f;
      29: out3 <= 16'hd550;
      30: out3 <= 16'hd428;
      31: out3 <= 16'hd306;
      32: out3 <= 16'hd1eb;
      33: out3 <= 16'hd0d8;
      34: out3 <= 16'hcfcc;
      35: out3 <= 16'hcec7;
      36: out3 <= 16'hcdca;
      37: out3 <= 16'hccd4;
      38: out3 <= 16'hcbe7;
      39: out3 <= 16'hcb01;
      40: out3 <= 16'hca24;
      41: out3 <= 16'hc94f;
      42: out3 <= 16'hc882;
      43: out3 <= 16'hc7be;
      44: out3 <= 16'hc703;
      45: out3 <= 16'hc650;
      46: out3 <= 16'hc5a7;
      47: out3 <= 16'hc506;
      48: out3 <= 16'hc46e;
      49: out3 <= 16'hc3e0;
      50: out3 <= 16'hc35b;
      51: out3 <= 16'hc2df;
      52: out3 <= 16'hc26d;
      53: out3 <= 16'hc204;
      54: out3 <= 16'hc1a4;
      55: out3 <= 16'hc14f;
      56: out3 <= 16'hc103;
      57: out3 <= 16'hc0c0;
      58: out3 <= 16'hc088;
      59: out3 <= 16'hc059;
      60: out3 <= 16'hc034;
      61: out3 <= 16'hc019;
      62: out3 <= 16'hc008;
      63: out3 <= 16'hc000;
      64: out3 <= 16'hc003;
      65: out3 <= 16'hc00f;
      66: out3 <= 16'hc025;
      67: out3 <= 16'hc045;
      68: out3 <= 16'hc06f;
      69: out3 <= 16'hc0a3;
      70: out3 <= 16'hc0e0;
      71: out3 <= 16'hc128;
      72: out3 <= 16'hc178;
      73: out3 <= 16'hc1d3;
      74: out3 <= 16'hc237;
      75: out3 <= 16'hc2a5;
      76: out3 <= 16'hc31c;
      77: out3 <= 16'hc39c;
      78: out3 <= 16'hc426;
      79: out3 <= 16'hc4b9;
      80: out3 <= 16'hc555;
      81: out3 <= 16'hc5fa;
      82: out3 <= 16'hc6a8;
      83: out3 <= 16'hc75f;
      84: out3 <= 16'hc81f;
      85: out3 <= 16'hc8e8;
      86: out3 <= 16'hc9b8;
      87: out3 <= 16'hca92;
      88: out3 <= 16'hcb73;
      89: out3 <= 16'hcc5d;
      90: out3 <= 16'hcd4e;
      91: out3 <= 16'hce47;
      92: out3 <= 16'hcf48;
      93: out3 <= 16'hd051;
      94: out3 <= 16'hd161;
      95: out3 <= 16'hd278;
      96: out3 <= 16'hd396;
      97: out3 <= 16'hd4bb;
      98: out3 <= 16'hd5e6;
      99: out3 <= 16'hd719;
      100: out3 <= 16'hd851;
      101: out3 <= 16'hd98f;
      102: out3 <= 16'hdad4;
      103: out3 <= 16'hdc1e;
      104: out3 <= 16'hdd6e;
      105: out3 <= 16'hdec3;
      106: out3 <= 16'he01d;
      107: out3 <= 16'he17c;
      108: out3 <= 16'he2e0;
      109: out3 <= 16'he448;
      110: out3 <= 16'he5b5;
      111: out3 <= 16'he725;
      112: out3 <= 16'he89a;
      113: out3 <= 16'hea12;
      114: out3 <= 16'heb8d;
      115: out3 <= 16'hed0c;
      116: out3 <= 16'hee8d;
      117: out3 <= 16'hf012;
      118: out3 <= 16'hf198;
      119: out3 <= 16'hf321;
      120: out3 <= 16'hf4ac;
      121: out3 <= 16'hf639;
      122: out3 <= 16'hf7c7;
      123: out3 <= 16'hf956;
      124: out3 <= 16'hfae6;
      125: out3 <= 16'hfc78;
      126: out3 <= 16'hfe09;
      127: out3 <= 16'hff9b;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D12_70302(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff9b;
      1: out3 <= 16'hfe09;
      2: out3 <= 16'hfc78;
      3: out3 <= 16'hfae6;
      4: out3 <= 16'hf956;
      5: out3 <= 16'hf7c7;
      6: out3 <= 16'hf639;
      7: out3 <= 16'hf4ac;
      8: out3 <= 16'hf321;
      9: out3 <= 16'hf198;
      10: out3 <= 16'hf012;
      11: out3 <= 16'hee8d;
      12: out3 <= 16'hed0c;
      13: out3 <= 16'heb8d;
      14: out3 <= 16'hea12;
      15: out3 <= 16'he89a;
      16: out3 <= 16'he725;
      17: out3 <= 16'he5b5;
      18: out3 <= 16'he448;
      19: out3 <= 16'he2e0;
      20: out3 <= 16'he17c;
      21: out3 <= 16'he01d;
      22: out3 <= 16'hdec3;
      23: out3 <= 16'hdd6e;
      24: out3 <= 16'hdc1e;
      25: out3 <= 16'hdad4;
      26: out3 <= 16'hd98f;
      27: out3 <= 16'hd851;
      28: out3 <= 16'hd719;
      29: out3 <= 16'hd5e6;
      30: out3 <= 16'hd4bb;
      31: out3 <= 16'hd396;
      32: out3 <= 16'hd278;
      33: out3 <= 16'hd161;
      34: out3 <= 16'hd051;
      35: out3 <= 16'hcf48;
      36: out3 <= 16'hce47;
      37: out3 <= 16'hcd4e;
      38: out3 <= 16'hcc5d;
      39: out3 <= 16'hcb73;
      40: out3 <= 16'hca92;
      41: out3 <= 16'hc9b8;
      42: out3 <= 16'hc8e8;
      43: out3 <= 16'hc81f;
      44: out3 <= 16'hc75f;
      45: out3 <= 16'hc6a8;
      46: out3 <= 16'hc5fa;
      47: out3 <= 16'hc555;
      48: out3 <= 16'hc4b9;
      49: out3 <= 16'hc426;
      50: out3 <= 16'hc39c;
      51: out3 <= 16'hc31c;
      52: out3 <= 16'hc2a5;
      53: out3 <= 16'hc237;
      54: out3 <= 16'hc1d3;
      55: out3 <= 16'hc178;
      56: out3 <= 16'hc128;
      57: out3 <= 16'hc0e0;
      58: out3 <= 16'hc0a3;
      59: out3 <= 16'hc06f;
      60: out3 <= 16'hc045;
      61: out3 <= 16'hc025;
      62: out3 <= 16'hc00f;
      63: out3 <= 16'hc003;
      64: out3 <= 16'hc000;
      65: out3 <= 16'hc008;
      66: out3 <= 16'hc019;
      67: out3 <= 16'hc034;
      68: out3 <= 16'hc059;
      69: out3 <= 16'hc088;
      70: out3 <= 16'hc0c0;
      71: out3 <= 16'hc103;
      72: out3 <= 16'hc14f;
      73: out3 <= 16'hc1a4;
      74: out3 <= 16'hc204;
      75: out3 <= 16'hc26d;
      76: out3 <= 16'hc2df;
      77: out3 <= 16'hc35b;
      78: out3 <= 16'hc3e0;
      79: out3 <= 16'hc46e;
      80: out3 <= 16'hc506;
      81: out3 <= 16'hc5a7;
      82: out3 <= 16'hc650;
      83: out3 <= 16'hc703;
      84: out3 <= 16'hc7be;
      85: out3 <= 16'hc882;
      86: out3 <= 16'hc94f;
      87: out3 <= 16'hca24;
      88: out3 <= 16'hcb01;
      89: out3 <= 16'hcbe7;
      90: out3 <= 16'hccd4;
      91: out3 <= 16'hcdca;
      92: out3 <= 16'hcec7;
      93: out3 <= 16'hcfcc;
      94: out3 <= 16'hd0d8;
      95: out3 <= 16'hd1eb;
      96: out3 <= 16'hd306;
      97: out3 <= 16'hd428;
      98: out3 <= 16'hd550;
      99: out3 <= 16'hd67f;
      100: out3 <= 16'hd7b4;
      101: out3 <= 16'hd8ef;
      102: out3 <= 16'hda31;
      103: out3 <= 16'hdb78;
      104: out3 <= 16'hdcc5;
      105: out3 <= 16'hde18;
      106: out3 <= 16'hdf6f;
      107: out3 <= 16'he0cc;
      108: out3 <= 16'he22d;
      109: out3 <= 16'he394;
      110: out3 <= 16'he4fe;
      111: out3 <= 16'he66d;
      112: out3 <= 16'he7df;
      113: out3 <= 16'he955;
      114: out3 <= 16'heacf;
      115: out3 <= 16'hec4c;
      116: out3 <= 16'hedcc;
      117: out3 <= 16'hef4f;
      118: out3 <= 16'hf0d5;
      119: out3 <= 16'hf25c;
      120: out3 <= 16'hf3e6;
      121: out3 <= 16'hf572;
      122: out3 <= 16'hf6ff;
      123: out3 <= 16'hf88e;
      124: out3 <= 16'hfa1e;
      125: out3 <= 16'hfbaf;
      126: out3 <= 16'hfd40;
      127: out3 <= 16'hfed2;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D4_70692(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h4000;
      1: out3 <= 16'h3ff8;
      2: out3 <= 16'h3fe7;
      3: out3 <= 16'h3fcc;
      4: out3 <= 16'h3fa7;
      5: out3 <= 16'h3f78;
      6: out3 <= 16'h3f40;
      7: out3 <= 16'h3efd;
      8: out3 <= 16'h3eb1;
      9: out3 <= 16'h3e5c;
      10: out3 <= 16'h3dfc;
      11: out3 <= 16'h3d93;
      12: out3 <= 16'h3d21;
      13: out3 <= 16'h3ca5;
      14: out3 <= 16'h3c20;
      15: out3 <= 16'h3b92;
      16: out3 <= 16'h3afa;
      17: out3 <= 16'h3a59;
      18: out3 <= 16'h39b0;
      19: out3 <= 16'h38fd;
      20: out3 <= 16'h3842;
      21: out3 <= 16'h377e;
      22: out3 <= 16'h36b1;
      23: out3 <= 16'h35dc;
      24: out3 <= 16'h34ff;
      25: out3 <= 16'h3419;
      26: out3 <= 16'h332c;
      27: out3 <= 16'h3236;
      28: out3 <= 16'h3139;
      29: out3 <= 16'h3034;
      30: out3 <= 16'h2f28;
      31: out3 <= 16'h2e15;
      32: out3 <= 16'h2cfa;
      33: out3 <= 16'h2bd8;
      34: out3 <= 16'h2ab0;
      35: out3 <= 16'h2981;
      36: out3 <= 16'h284c;
      37: out3 <= 16'h2711;
      38: out3 <= 16'h25cf;
      39: out3 <= 16'h2488;
      40: out3 <= 16'h233b;
      41: out3 <= 16'h21e8;
      42: out3 <= 16'h2091;
      43: out3 <= 16'h1f34;
      44: out3 <= 16'h1dd3;
      45: out3 <= 16'h1c6c;
      46: out3 <= 16'h1b02;
      47: out3 <= 16'h1993;
      48: out3 <= 16'h1821;
      49: out3 <= 16'h16ab;
      50: out3 <= 16'h1531;
      51: out3 <= 16'h13b4;
      52: out3 <= 16'h1234;
      53: out3 <= 16'h10b1;
      54: out3 <= 16'hf2b;
      55: out3 <= 16'hda4;
      56: out3 <= 16'hc1a;
      57: out3 <= 16'ha8e;
      58: out3 <= 16'h901;
      59: out3 <= 16'h772;
      60: out3 <= 16'h5e2;
      61: out3 <= 16'h451;
      62: out3 <= 16'h2c0;
      63: out3 <= 16'h12e;
      64: out3 <= 16'hff9b;
      65: out3 <= 16'hfe09;
      66: out3 <= 16'hfc78;
      67: out3 <= 16'hfae6;
      68: out3 <= 16'hf956;
      69: out3 <= 16'hf7c7;
      70: out3 <= 16'hf639;
      71: out3 <= 16'hf4ac;
      72: out3 <= 16'hf321;
      73: out3 <= 16'hf198;
      74: out3 <= 16'hf012;
      75: out3 <= 16'hee8d;
      76: out3 <= 16'hed0c;
      77: out3 <= 16'heb8d;
      78: out3 <= 16'hea12;
      79: out3 <= 16'he89a;
      80: out3 <= 16'he725;
      81: out3 <= 16'he5b5;
      82: out3 <= 16'he448;
      83: out3 <= 16'he2e0;
      84: out3 <= 16'he17c;
      85: out3 <= 16'he01d;
      86: out3 <= 16'hdec3;
      87: out3 <= 16'hdd6e;
      88: out3 <= 16'hdc1e;
      89: out3 <= 16'hdad4;
      90: out3 <= 16'hd98f;
      91: out3 <= 16'hd851;
      92: out3 <= 16'hd719;
      93: out3 <= 16'hd5e6;
      94: out3 <= 16'hd4bb;
      95: out3 <= 16'hd396;
      96: out3 <= 16'hd278;
      97: out3 <= 16'hd161;
      98: out3 <= 16'hd051;
      99: out3 <= 16'hcf48;
      100: out3 <= 16'hce47;
      101: out3 <= 16'hcd4e;
      102: out3 <= 16'hcc5d;
      103: out3 <= 16'hcb73;
      104: out3 <= 16'hca92;
      105: out3 <= 16'hc9b8;
      106: out3 <= 16'hc8e8;
      107: out3 <= 16'hc81f;
      108: out3 <= 16'hc75f;
      109: out3 <= 16'hc6a8;
      110: out3 <= 16'hc5fa;
      111: out3 <= 16'hc555;
      112: out3 <= 16'hc4b9;
      113: out3 <= 16'hc426;
      114: out3 <= 16'hc39c;
      115: out3 <= 16'hc31c;
      116: out3 <= 16'hc2a5;
      117: out3 <= 16'hc237;
      118: out3 <= 16'hc1d3;
      119: out3 <= 16'hc178;
      120: out3 <= 16'hc128;
      121: out3 <= 16'hc0e0;
      122: out3 <= 16'hc0a3;
      123: out3 <= 16'hc06f;
      124: out3 <= 16'hc045;
      125: out3 <= 16'hc025;
      126: out3 <= 16'hc00f;
      127: out3 <= 16'hc003;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D6_70952(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'h3fff;
      1: out3 <= 16'h3ff5;
      2: out3 <= 16'h3fe1;
      3: out3 <= 16'h3fc4;
      4: out3 <= 16'h3f9c;
      5: out3 <= 16'h3f6b;
      6: out3 <= 16'h3f30;
      7: out3 <= 16'h3eeb;
      8: out3 <= 16'h3e9d;
      9: out3 <= 16'h3e45;
      10: out3 <= 16'h3de3;
      11: out3 <= 16'h3d78;
      12: out3 <= 16'h3d03;
      13: out3 <= 16'h3c85;
      14: out3 <= 16'h3bfd;
      15: out3 <= 16'h3b6d;
      16: out3 <= 16'h3ad3;
      17: out3 <= 16'h3a30;
      18: out3 <= 16'h3984;
      19: out3 <= 16'h38cf;
      20: out3 <= 16'h3812;
      21: out3 <= 16'h374b;
      22: out3 <= 16'h367d;
      23: out3 <= 16'h35a5;
      24: out3 <= 16'h34c6;
      25: out3 <= 16'h33df;
      26: out3 <= 16'h32ef;
      27: out3 <= 16'h31f8;
      28: out3 <= 16'h30f9;
      29: out3 <= 16'h2ff2;
      30: out3 <= 16'h2ee4;
      31: out3 <= 16'h2dcf;
      32: out3 <= 16'h2cb2;
      33: out3 <= 16'h2b8f;
      34: out3 <= 16'h2a65;
      35: out3 <= 16'h2935;
      36: out3 <= 16'h27fe;
      37: out3 <= 16'h26c1;
      38: out3 <= 16'h257e;
      39: out3 <= 16'h2435;
      40: out3 <= 16'h22e7;
      41: out3 <= 16'h2193;
      42: out3 <= 16'h203a;
      43: out3 <= 16'h1edc;
      44: out3 <= 16'h1d79;
      45: out3 <= 16'h1c12;
      46: out3 <= 16'h1aa7;
      47: out3 <= 16'h1937;
      48: out3 <= 16'h17c4;
      49: out3 <= 16'h164c;
      50: out3 <= 16'h14d2;
      51: out3 <= 16'h1354;
      52: out3 <= 16'h11d3;
      53: out3 <= 16'h1050;
      54: out3 <= 16'heca;
      55: out3 <= 16'hd41;
      56: out3 <= 16'hbb7;
      57: out3 <= 16'ha2b;
      58: out3 <= 16'h89d;
      59: out3 <= 16'h70e;
      60: out3 <= 16'h57e;
      61: out3 <= 16'h3ed;
      62: out3 <= 16'h25b;
      63: out3 <= 16'hc9;
      64: out3 <= 16'hff37;
      65: out3 <= 16'hfda5;
      66: out3 <= 16'hfc13;
      67: out3 <= 16'hfa82;
      68: out3 <= 16'hf8f2;
      69: out3 <= 16'hf763;
      70: out3 <= 16'hf5d5;
      71: out3 <= 16'hf449;
      72: out3 <= 16'hf2bf;
      73: out3 <= 16'hf136;
      74: out3 <= 16'hefb0;
      75: out3 <= 16'hee2d;
      76: out3 <= 16'hecac;
      77: out3 <= 16'heb2e;
      78: out3 <= 16'he9b4;
      79: out3 <= 16'he83c;
      80: out3 <= 16'he6c9;
      81: out3 <= 16'he559;
      82: out3 <= 16'he3ee;
      83: out3 <= 16'he287;
      84: out3 <= 16'he124;
      85: out3 <= 16'hdfc6;
      86: out3 <= 16'hde6d;
      87: out3 <= 16'hdd19;
      88: out3 <= 16'hdbcb;
      89: out3 <= 16'hda82;
      90: out3 <= 16'hd93f;
      91: out3 <= 16'hd802;
      92: out3 <= 16'hd6cb;
      93: out3 <= 16'hd59b;
      94: out3 <= 16'hd471;
      95: out3 <= 16'hd34e;
      96: out3 <= 16'hd231;
      97: out3 <= 16'hd11c;
      98: out3 <= 16'hd00e;
      99: out3 <= 16'hcf07;
      100: out3 <= 16'hce08;
      101: out3 <= 16'hcd11;
      102: out3 <= 16'hcc21;
      103: out3 <= 16'hcb3a;
      104: out3 <= 16'hca5b;
      105: out3 <= 16'hc983;
      106: out3 <= 16'hc8b5;
      107: out3 <= 16'hc7ee;
      108: out3 <= 16'hc731;
      109: out3 <= 16'hc67c;
      110: out3 <= 16'hc5d0;
      111: out3 <= 16'hc52d;
      112: out3 <= 16'hc493;
      113: out3 <= 16'hc403;
      114: out3 <= 16'hc37b;
      115: out3 <= 16'hc2fd;
      116: out3 <= 16'hc288;
      117: out3 <= 16'hc21d;
      118: out3 <= 16'hc1bb;
      119: out3 <= 16'hc163;
      120: out3 <= 16'hc115;
      121: out3 <= 16'hc0d0;
      122: out3 <= 16'hc095;
      123: out3 <= 16'hc064;
      124: out3 <= 16'hc03c;
      125: out3 <= 16'hc01f;
      126: out3 <= 16'hc00b;
      127: out3 <= 16'hc001;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



module D14_71082(addr, out, clk);
   input clk;
   output [15:0] out;
   reg [15:0] out, out2, out3;
   input [6:0] addr;

   always @(posedge clk) begin
      out2 <= out3;
      out <= out2;
   case(addr)
      0: out3 <= 16'hff37;
      1: out3 <= 16'hfda5;
      2: out3 <= 16'hfc13;
      3: out3 <= 16'hfa82;
      4: out3 <= 16'hf8f2;
      5: out3 <= 16'hf763;
      6: out3 <= 16'hf5d5;
      7: out3 <= 16'hf449;
      8: out3 <= 16'hf2bf;
      9: out3 <= 16'hf136;
      10: out3 <= 16'hefb0;
      11: out3 <= 16'hee2d;
      12: out3 <= 16'hecac;
      13: out3 <= 16'heb2e;
      14: out3 <= 16'he9b4;
      15: out3 <= 16'he83c;
      16: out3 <= 16'he6c9;
      17: out3 <= 16'he559;
      18: out3 <= 16'he3ee;
      19: out3 <= 16'he287;
      20: out3 <= 16'he124;
      21: out3 <= 16'hdfc6;
      22: out3 <= 16'hde6d;
      23: out3 <= 16'hdd19;
      24: out3 <= 16'hdbcb;
      25: out3 <= 16'hda82;
      26: out3 <= 16'hd93f;
      27: out3 <= 16'hd802;
      28: out3 <= 16'hd6cb;
      29: out3 <= 16'hd59b;
      30: out3 <= 16'hd471;
      31: out3 <= 16'hd34e;
      32: out3 <= 16'hd231;
      33: out3 <= 16'hd11c;
      34: out3 <= 16'hd00e;
      35: out3 <= 16'hcf07;
      36: out3 <= 16'hce08;
      37: out3 <= 16'hcd11;
      38: out3 <= 16'hcc21;
      39: out3 <= 16'hcb3a;
      40: out3 <= 16'hca5b;
      41: out3 <= 16'hc983;
      42: out3 <= 16'hc8b5;
      43: out3 <= 16'hc7ee;
      44: out3 <= 16'hc731;
      45: out3 <= 16'hc67c;
      46: out3 <= 16'hc5d0;
      47: out3 <= 16'hc52d;
      48: out3 <= 16'hc493;
      49: out3 <= 16'hc403;
      50: out3 <= 16'hc37b;
      51: out3 <= 16'hc2fd;
      52: out3 <= 16'hc288;
      53: out3 <= 16'hc21d;
      54: out3 <= 16'hc1bb;
      55: out3 <= 16'hc163;
      56: out3 <= 16'hc115;
      57: out3 <= 16'hc0d0;
      58: out3 <= 16'hc095;
      59: out3 <= 16'hc064;
      60: out3 <= 16'hc03c;
      61: out3 <= 16'hc01f;
      62: out3 <= 16'hc00b;
      63: out3 <= 16'hc001;
      64: out3 <= 16'hc001;
      65: out3 <= 16'hc00b;
      66: out3 <= 16'hc01f;
      67: out3 <= 16'hc03c;
      68: out3 <= 16'hc064;
      69: out3 <= 16'hc095;
      70: out3 <= 16'hc0d0;
      71: out3 <= 16'hc115;
      72: out3 <= 16'hc163;
      73: out3 <= 16'hc1bb;
      74: out3 <= 16'hc21d;
      75: out3 <= 16'hc288;
      76: out3 <= 16'hc2fd;
      77: out3 <= 16'hc37b;
      78: out3 <= 16'hc403;
      79: out3 <= 16'hc493;
      80: out3 <= 16'hc52d;
      81: out3 <= 16'hc5d0;
      82: out3 <= 16'hc67c;
      83: out3 <= 16'hc731;
      84: out3 <= 16'hc7ee;
      85: out3 <= 16'hc8b5;
      86: out3 <= 16'hc983;
      87: out3 <= 16'hca5b;
      88: out3 <= 16'hcb3a;
      89: out3 <= 16'hcc21;
      90: out3 <= 16'hcd11;
      91: out3 <= 16'hce08;
      92: out3 <= 16'hcf07;
      93: out3 <= 16'hd00e;
      94: out3 <= 16'hd11c;
      95: out3 <= 16'hd231;
      96: out3 <= 16'hd34e;
      97: out3 <= 16'hd471;
      98: out3 <= 16'hd59b;
      99: out3 <= 16'hd6cb;
      100: out3 <= 16'hd802;
      101: out3 <= 16'hd93f;
      102: out3 <= 16'hda82;
      103: out3 <= 16'hdbcb;
      104: out3 <= 16'hdd19;
      105: out3 <= 16'hde6d;
      106: out3 <= 16'hdfc6;
      107: out3 <= 16'he124;
      108: out3 <= 16'he287;
      109: out3 <= 16'he3ee;
      110: out3 <= 16'he559;
      111: out3 <= 16'he6c9;
      112: out3 <= 16'he83c;
      113: out3 <= 16'he9b4;
      114: out3 <= 16'heb2e;
      115: out3 <= 16'hecac;
      116: out3 <= 16'hee2d;
      117: out3 <= 16'hefb0;
      118: out3 <= 16'hf136;
      119: out3 <= 16'hf2bf;
      120: out3 <= 16'hf449;
      121: out3 <= 16'hf5d5;
      122: out3 <= 16'hf763;
      123: out3 <= 16'hf8f2;
      124: out3 <= 16'hfa82;
      125: out3 <= 16'hfc13;
      126: out3 <= 16'hfda5;
      127: out3 <= 16'hff37;
      default: out3 <= 0;
   endcase
   end
// synthesis attribute rom_style of out3 is "block"
endmodule



// Latency: 8
// Gap: 1
module codeBlock68492(clk, reset, next_in, next_out,
   i1_in,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;
   input [6:0] i1_in;
   reg [6:0] i1;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(7, 1) shiftFIFO_76853(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a209;
   wire signed [15:0] a162;
   wire signed [15:0] a212;
   wire signed [15:0] a166;
   wire signed [15:0] a213;
   wire signed [15:0] a214;
   wire signed [15:0] a217;
   wire signed [15:0] a174;
   wire signed [15:0] a220;
   wire signed [15:0] a178;
   wire signed [15:0] a221;
   wire signed [15:0] a222;
   wire signed [15:0] a225;
   wire signed [15:0] a186;
   wire signed [15:0] a228;
   wire signed [15:0] a190;
   wire signed [15:0] a229;
   wire signed [15:0] a230;
   wire signed [15:0] a233;
   wire signed [15:0] a198;
   wire signed [15:0] a236;
   wire signed [15:0] a202;
   wire signed [15:0] a237;
   wire signed [15:0] a238;
   reg signed [15:0] tm1514;
   reg signed [15:0] tm1518;
   reg signed [15:0] tm1530;
   reg signed [15:0] tm1534;
   reg signed [15:0] tm1546;
   reg signed [15:0] tm1550;
   reg signed [15:0] tm1562;
   reg signed [15:0] tm1566;
   reg signed [15:0] tm1578;
   reg signed [15:0] tm1585;
   reg signed [15:0] tm1592;
   reg signed [15:0] tm1599;
   reg signed [15:0] tm1606;
   reg signed [15:0] tm1613;
   reg signed [15:0] tm1620;
   reg signed [15:0] tm1627;
   reg signed [15:0] tm1515;
   reg signed [15:0] tm1519;
   reg signed [15:0] tm1531;
   reg signed [15:0] tm1535;
   reg signed [15:0] tm1547;
   reg signed [15:0] tm1551;
   reg signed [15:0] tm1563;
   reg signed [15:0] tm1567;
   reg signed [15:0] tm1579;
   reg signed [15:0] tm1586;
   reg signed [15:0] tm1593;
   reg signed [15:0] tm1600;
   reg signed [15:0] tm1607;
   reg signed [15:0] tm1614;
   reg signed [15:0] tm1621;
   reg signed [15:0] tm1628;
   wire signed [15:0] tm110;
   wire signed [15:0] a167;
   wire signed [15:0] tm111;
   wire signed [15:0] a169;
   wire signed [15:0] tm114;
   wire signed [15:0] a179;
   wire signed [15:0] tm115;
   wire signed [15:0] a181;
   wire signed [15:0] tm118;
   wire signed [15:0] a191;
   wire signed [15:0] tm119;
   wire signed [15:0] a193;
   wire signed [15:0] tm122;
   wire signed [15:0] a203;
   wire signed [15:0] tm123;
   wire signed [15:0] a205;
   reg signed [15:0] tm1516;
   reg signed [15:0] tm1520;
   reg signed [15:0] tm1532;
   reg signed [15:0] tm1536;
   reg signed [15:0] tm1548;
   reg signed [15:0] tm1552;
   reg signed [15:0] tm1564;
   reg signed [15:0] tm1568;
   reg signed [15:0] tm1580;
   reg signed [15:0] tm1587;
   reg signed [15:0] tm1594;
   reg signed [15:0] tm1601;
   reg signed [15:0] tm1608;
   reg signed [15:0] tm1615;
   reg signed [15:0] tm1622;
   reg signed [15:0] tm1629;
   reg signed [15:0] tm321;
   reg signed [15:0] tm322;
   reg signed [15:0] tm329;
   reg signed [15:0] tm330;
   reg signed [15:0] tm337;
   reg signed [15:0] tm338;
   reg signed [15:0] tm345;
   reg signed [15:0] tm346;
   reg signed [15:0] tm1517;
   reg signed [15:0] tm1521;
   reg signed [15:0] tm1533;
   reg signed [15:0] tm1537;
   reg signed [15:0] tm1549;
   reg signed [15:0] tm1553;
   reg signed [15:0] tm1565;
   reg signed [15:0] tm1569;
   reg signed [15:0] tm1581;
   reg signed [15:0] tm1588;
   reg signed [15:0] tm1595;
   reg signed [15:0] tm1602;
   reg signed [15:0] tm1609;
   reg signed [15:0] tm1616;
   reg signed [15:0] tm1623;
   reg signed [15:0] tm1630;
   reg signed [15:0] tm1582;
   reg signed [15:0] tm1589;
   reg signed [15:0] tm1596;
   reg signed [15:0] tm1603;
   reg signed [15:0] tm1610;
   reg signed [15:0] tm1617;
   reg signed [15:0] tm1624;
   reg signed [15:0] tm1631;
   wire signed [15:0] a168;
   wire signed [15:0] a170;
   wire signed [15:0] a171;
   wire signed [15:0] a172;
   wire signed [15:0] a180;
   wire signed [15:0] a182;
   wire signed [15:0] a183;
   wire signed [15:0] a184;
   wire signed [15:0] a192;
   wire signed [15:0] a194;
   wire signed [15:0] a195;
   wire signed [15:0] a196;
   wire signed [15:0] a204;
   wire signed [15:0] a206;
   wire signed [15:0] a207;
   wire signed [15:0] a208;
   reg signed [15:0] tm1583;
   reg signed [15:0] tm1590;
   reg signed [15:0] tm1597;
   reg signed [15:0] tm1604;
   reg signed [15:0] tm1611;
   reg signed [15:0] tm1618;
   reg signed [15:0] tm1625;
   reg signed [15:0] tm1632;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;
   reg signed [15:0] tm1584;
   reg signed [15:0] tm1591;
   reg signed [15:0] tm1598;
   reg signed [15:0] tm1605;
   reg signed [15:0] tm1612;
   reg signed [15:0] tm1619;
   reg signed [15:0] tm1626;
   reg signed [15:0] tm1633;


   assign a209 = X0;
   assign a162 = a209;
   assign a212 = X1;
   assign a166 = a212;
   assign a213 = X2;
   assign a214 = X3;
   assign a217 = X4;
   assign a174 = a217;
   assign a220 = X5;
   assign a178 = a220;
   assign a221 = X6;
   assign a222 = X7;
   assign a225 = X8;
   assign a186 = a225;
   assign a228 = X9;
   assign a190 = a228;
   assign a229 = X10;
   assign a230 = X11;
   assign a233 = X12;
   assign a198 = a233;
   assign a236 = X13;
   assign a202 = a236;
   assign a237 = X14;
   assign a238 = X15;
   assign a167 = tm110;
   assign a169 = tm111;
   assign a179 = tm114;
   assign a181 = tm115;
   assign a191 = tm118;
   assign a193 = tm119;
   assign a203 = tm122;
   assign a205 = tm123;
   assign Y0 = tm1584;
   assign Y1 = tm1591;
   assign Y4 = tm1598;
   assign Y5 = tm1605;
   assign Y8 = tm1612;
   assign Y9 = tm1619;
   assign Y12 = tm1626;
   assign Y13 = tm1633;

   D10_69392 instD10inst0_69392(.addr(i1[6:0]), .out(tm111), .clk(clk));

   D2_69652 instD2inst0_69652(.addr(i1[6:0]), .out(tm110), .clk(clk));

   D8_69912 instD8inst0_69912(.addr(i1[6:0]), .out(tm122), .clk(clk));

   D16_70042 instD16inst0_70042(.addr(i1[6:0]), .out(tm123), .clk(clk));

   D12_70302 instD12inst0_70302(.addr(i1[6:0]), .out(tm115), .clk(clk));

   D4_70692 instD4inst0_70692(.addr(i1[6:0]), .out(tm114), .clk(clk));

   D6_70952 instD6inst0_70952(.addr(i1[6:0]), .out(tm118), .clk(clk));

   D14_71082 instD14inst0_71082(.addr(i1[6:0]), .out(tm119), .clk(clk));

    multfix #(16, 2) m68591(.a(tm321), .b(tm1517), .clk(clk), .q_sc(a168), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68613(.a(tm322), .b(tm1521), .clk(clk), .q_sc(a170), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68631(.a(tm322), .b(tm1517), .clk(clk), .q_sc(a171), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68642(.a(tm321), .b(tm1521), .clk(clk), .q_sc(a172), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68751(.a(tm329), .b(tm1533), .clk(clk), .q_sc(a180), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68773(.a(tm330), .b(tm1537), .clk(clk), .q_sc(a182), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68791(.a(tm330), .b(tm1533), .clk(clk), .q_sc(a183), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68802(.a(tm329), .b(tm1537), .clk(clk), .q_sc(a184), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68911(.a(tm337), .b(tm1549), .clk(clk), .q_sc(a192), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68933(.a(tm338), .b(tm1553), .clk(clk), .q_sc(a194), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68951(.a(tm338), .b(tm1549), .clk(clk), .q_sc(a195), .q_unsc(), .rst(reset));
    multfix #(16, 2) m68962(.a(tm337), .b(tm1553), .clk(clk), .q_sc(a196), .q_unsc(), .rst(reset));
    multfix #(16, 2) m69071(.a(tm345), .b(tm1565), .clk(clk), .q_sc(a204), .q_unsc(), .rst(reset));
    multfix #(16, 2) m69093(.a(tm346), .b(tm1569), .clk(clk), .q_sc(a206), .q_unsc(), .rst(reset));
    multfix #(16, 2) m69111(.a(tm346), .b(tm1565), .clk(clk), .q_sc(a207), .q_unsc(), .rst(reset));
    multfix #(16, 2) m69122(.a(tm345), .b(tm1569), .clk(clk), .q_sc(a208), .q_unsc(), .rst(reset));
    subfxp #(16, 1) sub68620(.a(a168), .b(a170), .clk(clk), .q(Y2));    // 6
    addfxp #(16, 1) add68649(.a(a171), .b(a172), .clk(clk), .q(Y3));    // 6
    subfxp #(16, 1) sub68780(.a(a180), .b(a182), .clk(clk), .q(Y6));    // 6
    addfxp #(16, 1) add68809(.a(a183), .b(a184), .clk(clk), .q(Y7));    // 6
    subfxp #(16, 1) sub68940(.a(a192), .b(a194), .clk(clk), .q(Y10));    // 6
    addfxp #(16, 1) add68969(.a(a195), .b(a196), .clk(clk), .q(Y11));    // 6
    subfxp #(16, 1) sub69100(.a(a204), .b(a206), .clk(clk), .q(Y14));    // 6
    addfxp #(16, 1) add69129(.a(a207), .b(a208), .clk(clk), .q(Y15));    // 6


   always @(posedge clk) begin
      if (reset == 1) begin
         tm321 <= 0;
         tm1517 <= 0;
         tm322 <= 0;
         tm1521 <= 0;
         tm322 <= 0;
         tm1517 <= 0;
         tm321 <= 0;
         tm1521 <= 0;
         tm329 <= 0;
         tm1533 <= 0;
         tm330 <= 0;
         tm1537 <= 0;
         tm330 <= 0;
         tm1533 <= 0;
         tm329 <= 0;
         tm1537 <= 0;
         tm337 <= 0;
         tm1549 <= 0;
         tm338 <= 0;
         tm1553 <= 0;
         tm338 <= 0;
         tm1549 <= 0;
         tm337 <= 0;
         tm1553 <= 0;
         tm345 <= 0;
         tm1565 <= 0;
         tm346 <= 0;
         tm1569 <= 0;
         tm346 <= 0;
         tm1565 <= 0;
         tm345 <= 0;
         tm1569 <= 0;
      end
      else begin
         i1 <= i1_in;
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
         tm1514 <= a213;
         tm1518 <= a214;
         tm1530 <= a221;
         tm1534 <= a222;
         tm1546 <= a229;
         tm1550 <= a230;
         tm1562 <= a237;
         tm1566 <= a238;
         tm1578 <= a162;
         tm1585 <= a166;
         tm1592 <= a174;
         tm1599 <= a178;
         tm1606 <= a186;
         tm1613 <= a190;
         tm1620 <= a198;
         tm1627 <= a202;
         tm1515 <= tm1514;
         tm1519 <= tm1518;
         tm1531 <= tm1530;
         tm1535 <= tm1534;
         tm1547 <= tm1546;
         tm1551 <= tm1550;
         tm1563 <= tm1562;
         tm1567 <= tm1566;
         tm1579 <= tm1578;
         tm1586 <= tm1585;
         tm1593 <= tm1592;
         tm1600 <= tm1599;
         tm1607 <= tm1606;
         tm1614 <= tm1613;
         tm1621 <= tm1620;
         tm1628 <= tm1627;
         tm1516 <= tm1515;
         tm1520 <= tm1519;
         tm1532 <= tm1531;
         tm1536 <= tm1535;
         tm1548 <= tm1547;
         tm1552 <= tm1551;
         tm1564 <= tm1563;
         tm1568 <= tm1567;
         tm1580 <= tm1579;
         tm1587 <= tm1586;
         tm1594 <= tm1593;
         tm1601 <= tm1600;
         tm1608 <= tm1607;
         tm1615 <= tm1614;
         tm1622 <= tm1621;
         tm1629 <= tm1628;
         tm321 <= a167;
         tm322 <= a169;
         tm329 <= a179;
         tm330 <= a181;
         tm337 <= a191;
         tm338 <= a193;
         tm345 <= a203;
         tm346 <= a205;
         tm1517 <= tm1516;
         tm1521 <= tm1520;
         tm1533 <= tm1532;
         tm1537 <= tm1536;
         tm1549 <= tm1548;
         tm1553 <= tm1552;
         tm1565 <= tm1564;
         tm1569 <= tm1568;
         tm1581 <= tm1580;
         tm1588 <= tm1587;
         tm1595 <= tm1594;
         tm1602 <= tm1601;
         tm1609 <= tm1608;
         tm1616 <= tm1615;
         tm1623 <= tm1622;
         tm1630 <= tm1629;
         tm1582 <= tm1581;
         tm1589 <= tm1588;
         tm1596 <= tm1595;
         tm1603 <= tm1602;
         tm1610 <= tm1609;
         tm1617 <= tm1616;
         tm1624 <= tm1623;
         tm1631 <= tm1630;
         tm1583 <= tm1582;
         tm1590 <= tm1589;
         tm1597 <= tm1596;
         tm1604 <= tm1603;
         tm1611 <= tm1610;
         tm1618 <= tm1617;
         tm1625 <= tm1624;
         tm1632 <= tm1631;
         tm1584 <= tm1583;
         tm1591 <= tm1590;
         tm1598 <= tm1597;
         tm1605 <= tm1604;
         tm1612 <= tm1611;
         tm1619 <= tm1618;
         tm1626 <= tm1625;
         tm1633 <= tm1632;
      end
   end
endmodule

// Latency: 2
// Gap: 1
module codeBlock71217(clk, reset, next_in, next_out,
   X0_in, Y0,
   X1_in, Y1,
   X2_in, Y2,
   X3_in, Y3,
   X4_in, Y4,
   X5_in, Y5,
   X6_in, Y6,
   X7_in, Y7,
   X8_in, Y8,
   X9_in, Y9,
   X10_in, Y10,
   X11_in, Y11,
   X12_in, Y12,
   X13_in, Y13,
   X14_in, Y14,
   X15_in, Y15);

   output next_out;
   input clk, reset, next_in;

   reg next;

   input [15:0] X0_in,
      X1_in,
      X2_in,
      X3_in,
      X4_in,
      X5_in,
      X6_in,
      X7_in,
      X8_in,
      X9_in,
      X10_in,
      X11_in,
      X12_in,
      X13_in,
      X14_in,
      X15_in;

   reg   [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   shiftRegFIFO #(1, 1) shiftFIFO_76856(.X(next), .Y(next_out), .clk(clk));


   wire signed [15:0] a33;
   wire signed [15:0] a34;
   wire signed [15:0] a35;
   wire signed [15:0] a36;
   wire signed [15:0] a41;
   wire signed [15:0] a42;
   wire signed [15:0] a43;
   wire signed [15:0] a44;
   wire signed [15:0] a49;
   wire signed [15:0] a50;
   wire signed [15:0] a51;
   wire signed [15:0] a52;
   wire signed [15:0] a57;
   wire signed [15:0] a58;
   wire signed [15:0] a59;
   wire signed [15:0] a60;
   wire signed [15:0] t89;
   wire signed [15:0] t90;
   wire signed [15:0] t91;
   wire signed [15:0] t92;
   wire signed [15:0] Y0;
   wire signed [15:0] Y1;
   wire signed [15:0] Y2;
   wire signed [15:0] Y3;
   wire signed [15:0] t93;
   wire signed [15:0] t94;
   wire signed [15:0] t95;
   wire signed [15:0] t96;
   wire signed [15:0] Y4;
   wire signed [15:0] Y5;
   wire signed [15:0] Y6;
   wire signed [15:0] Y7;
   wire signed [15:0] t97;
   wire signed [15:0] t98;
   wire signed [15:0] t99;
   wire signed [15:0] t100;
   wire signed [15:0] Y8;
   wire signed [15:0] Y9;
   wire signed [15:0] Y10;
   wire signed [15:0] Y11;
   wire signed [15:0] t101;
   wire signed [15:0] t102;
   wire signed [15:0] t103;
   wire signed [15:0] t104;
   wire signed [15:0] Y12;
   wire signed [15:0] Y13;
   wire signed [15:0] Y14;
   wire signed [15:0] Y15;


   assign a33 = X0;
   assign a34 = X2;
   assign a35 = X1;
   assign a36 = X3;
   assign a41 = X4;
   assign a42 = X6;
   assign a43 = X5;
   assign a44 = X7;
   assign a49 = X8;
   assign a50 = X10;
   assign a51 = X9;
   assign a52 = X11;
   assign a57 = X12;
   assign a58 = X14;
   assign a59 = X13;
   assign a60 = X15;
   assign Y0 = t89;
   assign Y1 = t90;
   assign Y2 = t91;
   assign Y3 = t92;
   assign Y4 = t93;
   assign Y5 = t94;
   assign Y6 = t95;
   assign Y7 = t96;
   assign Y8 = t97;
   assign Y9 = t98;
   assign Y10 = t99;
   assign Y11 = t100;
   assign Y12 = t101;
   assign Y13 = t102;
   assign Y14 = t103;
   assign Y15 = t104;

    addfxp #(16, 1) add71229(.a(a33), .b(a34), .clk(clk), .q(t89));    // 0
    addfxp #(16, 1) add71244(.a(a35), .b(a36), .clk(clk), .q(t90));    // 0
    subfxp #(16, 1) sub71259(.a(a33), .b(a34), .clk(clk), .q(t91));    // 0
    subfxp #(16, 1) sub71274(.a(a35), .b(a36), .clk(clk), .q(t92));    // 0
    addfxp #(16, 1) add71305(.a(a41), .b(a42), .clk(clk), .q(t93));    // 0
    addfxp #(16, 1) add71320(.a(a43), .b(a44), .clk(clk), .q(t94));    // 0
    subfxp #(16, 1) sub71335(.a(a41), .b(a42), .clk(clk), .q(t95));    // 0
    subfxp #(16, 1) sub71350(.a(a43), .b(a44), .clk(clk), .q(t96));    // 0
    addfxp #(16, 1) add71381(.a(a49), .b(a50), .clk(clk), .q(t97));    // 0
    addfxp #(16, 1) add71396(.a(a51), .b(a52), .clk(clk), .q(t98));    // 0
    subfxp #(16, 1) sub71411(.a(a49), .b(a50), .clk(clk), .q(t99));    // 0
    subfxp #(16, 1) sub71426(.a(a51), .b(a52), .clk(clk), .q(t100));    // 0
    addfxp #(16, 1) add71457(.a(a57), .b(a58), .clk(clk), .q(t101));    // 0
    addfxp #(16, 1) add71472(.a(a59), .b(a60), .clk(clk), .q(t102));    // 0
    subfxp #(16, 1) sub71487(.a(a57), .b(a58), .clk(clk), .q(t103));    // 0
    subfxp #(16, 1) sub71502(.a(a59), .b(a60), .clk(clk), .q(t104));    // 0


   always @(posedge clk) begin
      if (reset == 1) begin
      end
      else begin
         X0 <= X0_in;
         X1 <= X1_in;
         X2 <= X2_in;
         X3 <= X3_in;
         X4 <= X4_in;
         X5 <= X5_in;
         X6 <= X6_in;
         X7 <= X7_in;
         X8 <= X8_in;
         X9 <= X9_in;
         X10 <= X10_in;
         X11 <= X11_in;
         X12 <= X12_in;
         X13 <= X13_in;
         X14 <= X14_in;
         X15 <= X15_in;
         next <= next_in;
      end
   end
endmodule

// Latency: 262
// Gap: 128
module rc71527(clk, reset, next, next_out,
   X0, Y0,
   X1, Y1,
   X2, Y2,
   X3, Y3,
   X4, Y4,
   X5, Y5,
   X6, Y6,
   X7, Y7,
   X8, Y8,
   X9, Y9,
   X10, Y10,
   X11, Y11,
   X12, Y12,
   X13, Y13,
   X14, Y14,
   X15, Y15);

   output next_out;
   input clk, reset, next;

   input [15:0] X0,
      X1,
      X2,
      X3,
      X4,
      X5,
      X6,
      X7,
      X8,
      X9,
      X10,
      X11,
      X12,
      X13,
      X14,
      X15;

   output [15:0] Y0,
      Y1,
      Y2,
      Y3,
      Y4,
      Y5,
      Y6,
      Y7,
      Y8,
      Y9,
      Y10,
      Y11,
      Y12,
      Y13,
      Y14,
      Y15;

   wire [31:0] t0;
   wire [31:0] s0;
   assign t0 = {X0, X1};
   wire [31:0] t1;
   wire [31:0] s1;
   assign t1 = {X2, X3};
   wire [31:0] t2;
   wire [31:0] s2;
   assign t2 = {X4, X5};
   wire [31:0] t3;
   wire [31:0] s3;
   assign t3 = {X6, X7};
   wire [31:0] t4;
   wire [31:0] s4;
   assign t4 = {X8, X9};
   wire [31:0] t5;
   wire [31:0] s5;
   assign t5 = {X10, X11};
   wire [31:0] t6;
   wire [31:0] s6;
   assign t6 = {X12, X13};
   wire [31:0] t7;
   wire [31:0] s7;
   assign t7 = {X14, X15};
   assign Y0 = s0[31:16];
   assign Y1 = s0[15:0];
   assign Y2 = s1[31:16];
   assign Y3 = s1[15:0];
   assign Y4 = s2[31:16];
   assign Y5 = s2[15:0];
   assign Y6 = s3[31:16];
   assign Y7 = s3[15:0];
   assign Y8 = s4[31:16];
   assign Y9 = s4[15:0];
   assign Y10 = s5[31:16];
   assign Y11 = s5[15:0];
   assign Y12 = s6[31:16];
   assign Y13 = s6[15:0];
   assign Y14 = s7[31:16];
   assign Y15 = s7[15:0];

   perm71525 instPerm76857(.x0(t0), .y0(s0),
    .x1(t1), .y1(s1),
    .x2(t2), .y2(s2),
    .x3(t3), .y3(s3),
    .x4(t4), .y4(s4),
    .x5(t5), .y5(s5),
    .x6(t6), .y6(s6),
    .x7(t7), .y7(s7),
   .clk(clk), .next(next), .next_out(next_out), .reset(reset)
);



endmodule

module swNet71525(itr, clk, ct
,       x0, y0
,       x1, y1
,       x2, y2
,       x3, y3
,       x4, y4
,       x5, y5
,       x6, y6
,       x7, y7
);

    parameter width = 32;

    input [6:0] ct;
    input clk;
    input [0:0] itr;
    input [width-1:0] x0;
    output reg [width-1:0] y0;
    input [width-1:0] x1;
    output reg [width-1:0] y1;
    input [width-1:0] x2;
    output reg [width-1:0] y2;
    input [width-1:0] x3;
    output reg [width-1:0] y3;
    input [width-1:0] x4;
    output reg [width-1:0] y4;
    input [width-1:0] x5;
    output reg [width-1:0] y5;
    input [width-1:0] x6;
    output reg [width-1:0] y6;
    input [width-1:0] x7;
    output reg [width-1:0] y7;
    wire [width-1:0] t0_0, t0_1, t0_2, t0_3, t0_4, t0_5, t0_6, t0_7;
    wire [width-1:0] t1_0, t1_1, t1_2, t1_3, t1_4, t1_5, t1_6, t1_7;
    wire [width-1:0] t2_0, t2_1, t2_2, t2_3, t2_4, t2_5, t2_6, t2_7;
    reg [width-1:0] t3_0, t3_1, t3_2, t3_3, t3_4, t3_5, t3_6, t3_7;
    wire [width-1:0] t4_0, t4_1, t4_2, t4_3, t4_4, t4_5, t4_6, t4_7;
    wire [width-1:0] t5_0, t5_1, t5_2, t5_3, t5_4, t5_5, t5_6, t5_7;
    wire [width-1:0] t6_0, t6_1, t6_2, t6_3, t6_4, t6_5, t6_6, t6_7;
    reg [width-1:0] t7_0, t7_1, t7_2, t7_3, t7_4, t7_5, t7_6, t7_7;
    wire [width-1:0] t8_0, t8_1, t8_2, t8_3, t8_4, t8_5, t8_6, t8_7;
    reg [width-1:0] t9_0, t9_1, t9_2, t9_3, t9_4, t9_5, t9_6, t9_7;

    reg [3:0] control;

    always @(posedge clk) begin
      case(ct)
        7'd0: control <= 4'b1100;
        7'd1: control <= 4'b1100;
        7'd2: control <= 4'b1100;
        7'd3: control <= 4'b1100;
        7'd4: control <= 4'b1100;
        7'd5: control <= 4'b1100;
        7'd6: control <= 4'b1100;
        7'd7: control <= 4'b1100;
        7'd8: control <= 4'b1100;
        7'd9: control <= 4'b1100;
        7'd10: control <= 4'b1100;
        7'd11: control <= 4'b1100;
        7'd12: control <= 4'b1100;
        7'd13: control <= 4'b1100;
        7'd14: control <= 4'b1100;
        7'd15: control <= 4'b1100;
        7'd16: control <= 4'b1100;
        7'd17: control <= 4'b1100;
        7'd18: control <= 4'b1100;
        7'd19: control <= 4'b1100;
        7'd20: control <= 4'b1100;
        7'd21: control <= 4'b1100;
        7'd22: control <= 4'b1100;
        7'd23: control <= 4'b1100;
        7'd24: control <= 4'b1100;
        7'd25: control <= 4'b1100;
        7'd26: control <= 4'b1100;
        7'd27: control <= 4'b1100;
        7'd28: control <= 4'b1100;
        7'd29: control <= 4'b1100;
        7'd30: control <= 4'b1100;
        7'd31: control <= 4'b1100;
        7'd32: control <= 4'b1100;
        7'd33: control <= 4'b1100;
        7'd34: control <= 4'b1100;
        7'd35: control <= 4'b1100;
        7'd36: control <= 4'b1100;
        7'd37: control <= 4'b1100;
        7'd38: control <= 4'b1100;
        7'd39: control <= 4'b1100;
        7'd40: control <= 4'b1100;
        7'd41: control <= 4'b1100;
        7'd42: control <= 4'b1100;
        7'd43: control <= 4'b1100;
        7'd44: control <= 4'b1100;
        7'd45: control <= 4'b1100;
        7'd46: control <= 4'b1100;
        7'd47: control <= 4'b1100;
        7'd48: control <= 4'b1100;
        7'd49: control <= 4'b1100;
        7'd50: control <= 4'b1100;
        7'd51: control <= 4'b1100;
        7'd52: control <= 4'b1100;
        7'd53: control <= 4'b1100;
        7'd54: control <= 4'b1100;
        7'd55: control <= 4'b1100;
        7'd56: control <= 4'b1100;
        7'd57: control <= 4'b1100;
        7'd58: control <= 4'b1100;
        7'd59: control <= 4'b1100;
        7'd60: control <= 4'b1100;
        7'd61: control <= 4'b1100;
        7'd62: control <= 4'b1100;
        7'd63: control <= 4'b1100;
        7'd64: control <= 4'b0011;
        7'd65: control <= 4'b0011;
        7'd66: control <= 4'b0011;
        7'd67: control <= 4'b0011;
        7'd68: control <= 4'b0011;
        7'd69: control <= 4'b0011;
        7'd70: control <= 4'b0011;
        7'd71: control <= 4'b0011;
        7'd72: control <= 4'b0011;
        7'd73: control <= 4'b0011;
        7'd74: control <= 4'b0011;
        7'd75: control <= 4'b0011;
        7'd76: control <= 4'b0011;
        7'd77: control <= 4'b0011;
        7'd78: control <= 4'b0011;
        7'd79: control <= 4'b0011;
        7'd80: control <= 4'b0011;
        7'd81: control <= 4'b0011;
        7'd82: control <= 4'b0011;
        7'd83: control <= 4'b0011;
        7'd84: control <= 4'b0011;
        7'd85: control <= 4'b0011;
        7'd86: control <= 4'b0011;
        7'd87: control <= 4'b0011;
        7'd88: control <= 4'b0011;
        7'd89: control <= 4'b0011;
        7'd90: control <= 4'b0011;
        7'd91: control <= 4'b0011;
        7'd92: control <= 4'b0011;
        7'd93: control <= 4'b0011;
        7'd94: control <= 4'b0011;
        7'd95: control <= 4'b0011;
        7'd96: control <= 4'b0011;
        7'd97: control <= 4'b0011;
        7'd98: control <= 4'b0011;
        7'd99: control <= 4'b0011;
        7'd100: control <= 4'b0011;
        7'd101: control <= 4'b0011;
        7'd102: control <= 4'b0011;
        7'd103: control <= 4'b0011;
        7'd104: control <= 4'b0011;
        7'd105: control <= 4'b0011;
        7'd106: control <= 4'b0011;
        7'd107: control <= 4'b0011;
        7'd108: control <= 4'b0011;
        7'd109: control <= 4'b0011;
        7'd110: control <= 4'b0011;
        7'd111: control <= 4'b0011;
        7'd112: control <= 4'b0011;
        7'd113: control <= 4'b0011;
        7'd114: control <= 4'b0011;
        7'd115: control <= 4'b0011;
        7'd116: control <= 4'b0011;
        7'd117: control <= 4'b0011;
        7'd118: control <= 4'b0011;
        7'd119: control <= 4'b0011;
        7'd120: control <= 4'b0011;
        7'd121: control <= 4'b0011;
        7'd122: control <= 4'b0011;
        7'd123: control <= 4'b0011;
        7'd124: control <= 4'b0011;
        7'd125: control <= 4'b0011;
        7'd126: control <= 4'b0011;
        7'd127: control <= 4'b0011;
      endcase
   end

// synthesis attribute rom_style of control is "distributed"
   reg [3:0] control0;
   reg [3:0] control1;
   reg [3:0] control2;
    always @(posedge clk) begin
       control0 <= control;
        control1 <= control0;
        control2 <= control1;
    end
    assign t0_0 = x0;
    assign t0_1 = x4;
    assign t0_2 = x1;
    assign t0_3 = x5;
    assign t0_4 = x2;
    assign t0_5 = x6;
    assign t0_6 = x3;
    assign t0_7 = x7;
     assign t1_0 = t0_0;
     assign t1_1 = t0_1;
     assign t1_2 = t0_3;
     assign t1_3 = t0_2;
     assign t1_4 = t0_4;
     assign t1_5 = t0_5;
     assign t1_6 = t0_7;
     assign t1_7 = t0_6;
    assign t2_0 = t1_0;
    assign t2_1 = t1_4;
    assign t2_2 = t1_1;
    assign t2_3 = t1_5;
    assign t2_4 = t1_2;
    assign t2_5 = t1_6;
    assign t2_6 = t1_3;
    assign t2_7 = t1_7;
   always @(posedge clk) begin
         t3_0 <= t2_0;
         t3_1 <= t2_1;
         t3_2 <= t2_2;
         t3_3 <= t2_3;
         t3_4 <= t2_5;
         t3_5 <= t2_4;
         t3_6 <= t2_7;
         t3_7 <= t2_6;
   end
    assign t4_0 = t3_0;
    assign t4_1 = t3_4;
    assign t4_2 = t3_1;
    assign t4_3 = t3_5;
    assign t4_4 = t3_2;
    assign t4_5 = t3_6;
    assign t4_6 = t3_3;
    assign t4_7 = t3_7;
     assign t5_0 = t4_0;
     assign t5_1 = t4_1;
     assign t5_2 = t4_3;
     assign t5_3 = t4_2;
     assign t5_4 = t4_4;
     assign t5_5 = t4_5;
     assign t5_6 = t4_7;
     assign t5_7 = t4_6;
    assign t6_0 = t5_0;
    assign t6_1 = t5_2;
    assign t6_2 = t5_4;
    assign t6_3 = t5_6;
    assign t6_4 = t5_1;
    assign t6_5 = t5_3;
    assign t6_6 = t5_5;
    assign t6_7 = t5_7;
   always @(posedge clk) begin
         t7_0 <= t6_0;
         t7_1 <= t6_1;
         t7_2 <= t6_3;
         t7_3 <= t6_2;
         t7_4 <= t6_5;
         t7_5 <= t6_4;
         t7_6 <= t6_6;
         t7_7 <= t6_7;
   end
    assign t8_0 = t7_0;
    assign t8_1 = t7_2;
    assign t8_2 = t7_4;
    assign t8_3 = t7_6;
    assign t8_4 = t7_1;
    assign t8_5 = t7_3;
    assign t8_6 = t7_5;
    assign t8_7 = t7_7;
   always @(posedge clk) begin
         t9_0 <= (control2[3] == 0) ? t8_0 : t8_1;
         t9_1 <= (control2[3] == 0) ? t8_1 : t8_0;
         t9_2 <= (control2[2] == 0) ? t8_2 : t8_3;
         t9_3 <= (control2[2] == 0) ? t8_3 : t8_2;
         t9_4 <= (control2[1] == 0) ? t8_4 : t8_5;
         t9_5 <= (control2[1] == 0) ? t8_5 : t8_4;
         t9_6 <= (control2[0] == 0) ? t8_6 : t8_7;
         t9_7 <= (control2[0] == 0) ? t8_7 : t8_6;
   end
    always @(posedge clk) begin
        y0 <= t9_0;
        y1 <= t9_2;
        y2 <= t9_4;
        y3 <= t9_6;
        y4 <= t9_1;
        y5 <= t9_3;
        y6 <= t9_5;
        y7 <= t9_7;
    end
endmodule

// Latency: 262
// Gap: 128
module perm71525(clk, next, reset, next_out,
   x0, y0,
   x1, y1,
   x2, y2,
   x3, y3,
   x4, y4,
   x5, y5,
   x6, y6,
   x7, y7);
   parameter width = 32;

   parameter depth = 128;

   parameter addrbits = 7;

   parameter muxbits = 3;

   input [width-1:0]  x0;
   output [width-1:0]  y0;
   wire [width-1:0]  t0;
   wire [width-1:0]  s0;
   input [width-1:0]  x1;
   output [width-1:0]  y1;
   wire [width-1:0]  t1;
   wire [width-1:0]  s1;
   input [width-1:0]  x2;
   output [width-1:0]  y2;
   wire [width-1:0]  t2;
   wire [width-1:0]  s2;
   input [width-1:0]  x3;
   output [width-1:0]  y3;
   wire [width-1:0]  t3;
   wire [width-1:0]  s3;
   input [width-1:0]  x4;
   output [width-1:0]  y4;
   wire [width-1:0]  t4;
   wire [width-1:0]  s4;
   input [width-1:0]  x5;
   output [width-1:0]  y5;
   wire [width-1:0]  t5;
   wire [width-1:0]  s5;
   input [width-1:0]  x6;
   output [width-1:0]  y6;
   wire [width-1:0]  t6;
   wire [width-1:0]  s6;
   input [width-1:0]  x7;
   output [width-1:0]  y7;
   wire [width-1:0]  t7;
   wire [width-1:0]  s7;
   input next, reset, clk;
   output next_out;
   reg [addrbits-1:0] s1rdloc, s2rdloc;

    reg [addrbits-1:0] s1wr0;
   reg [addrbits-1:0] s1rd0, s2wr0, s2rd0;
   reg [addrbits-1:0] s1rd1, s2wr1, s2rd1;
   reg [addrbits-1:0] s1rd2, s2wr2, s2rd2;
   reg [addrbits-1:0] s1rd3, s2wr3, s2rd3;
   reg [addrbits-1:0] s1rd4, s2wr4, s2rd4;
   reg [addrbits-1:0] s1rd5, s2wr5, s2rd5;
   reg [addrbits-1:0] s1rd6, s2wr6, s2rd6;
   reg [addrbits-1:0] s1rd7, s2wr7, s2rd7;
   reg s1wr_en, state1, state2, state3;
   wire 	      next2, next3, next4;
   reg 		      inFlip0, outFlip0_z, outFlip1;
   wire 	      inFlip1, outFlip0;

   wire [0:0] tm124;
   assign tm124 = 0;

shiftRegFIFO #(5, 1) shiftFIFO_76862(.X(outFlip0), .Y(inFlip1), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76863(.X(outFlip0_z), .Y(outFlip0), .clk(clk));
//   shiftRegFIFO #(2, 1) inFlip1Reg(outFlip0, inFlip1, clk);
//   shiftRegFIFO #(1, 1) outFlip0Reg(outFlip0_z, outFlip0, clk);
   
   memMod_dist #(depth*2, width, addrbits+1) s1mem0(x0, t0, {inFlip0, s1wr0}, {outFlip0, s1rd0}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem1(x1, t1, {inFlip0, s1wr0}, {outFlip0, s1rd1}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem2(x2, t2, {inFlip0, s1wr0}, {outFlip0, s1rd2}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem3(x3, t3, {inFlip0, s1wr0}, {outFlip0, s1rd3}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem4(x4, t4, {inFlip0, s1wr0}, {outFlip0, s1rd4}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem5(x5, t5, {inFlip0, s1wr0}, {outFlip0, s1rd5}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem6(x6, t6, {inFlip0, s1wr0}, {outFlip0, s1rd6}, s1wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s1mem7(x7, t7, {inFlip0, s1wr0}, {outFlip0, s1rd7}, s1wr_en, clk);

nextReg #(127, 7) nextReg_76874(.X(next), .Y(next2), .reset(reset), .clk(clk));
shiftRegFIFO #(6, 1) shiftFIFO_76875(.X(next2), .Y(next3), .clk(clk));
nextReg #(128, 7) nextReg_76878(.X(next3), .Y(next4), .reset(reset), .clk(clk));
shiftRegFIFO #(1, 1) shiftFIFO_76879(.X(next4), .Y(next_out), .clk(clk));
shiftRegFIFO #(127, 1) shiftFIFO_76882(.X(tm124), .Y(tm124_d), .clk(clk));
shiftRegFIFO #(5, 1) shiftFIFO_76885(.X(tm124_d), .Y(tm124_dd), .clk(clk));
   
   wire [addrbits-1:0] 	      muxCycle, writeCycle;
assign muxCycle = s1rdloc;
shiftRegFIFO #(5, 7) shiftFIFO_76890(.X(muxCycle), .Y(writeCycle), .clk(clk));
        
   wire 		      readInt, s2wr_en;   
   assign 		      readInt = (state2 == 1);

   shiftRegFIFO #(6, 1) writeIntReg(readInt, s2wr_en, clk);

   memMod_dist #(depth*2, width, addrbits+1) s2mem0(s0, y0, {inFlip1, s2wr0}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem1(s1, y1, {inFlip1, s2wr1}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem2(s2, y2, {inFlip1, s2wr2}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem3(s3, y3, {inFlip1, s2wr3}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem4(s4, y4, {inFlip1, s2wr4}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem5(s5, y5, {inFlip1, s2wr5}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem6(s6, y6, {inFlip1, s2wr6}, {outFlip1, s2rdloc}, s2wr_en, clk);
   memMod_dist #(depth*2, width, addrbits+1) s2mem7(s7, y7, {inFlip1, s2wr7}, {outFlip1, s2rdloc}, s2wr_en, clk);
   always @(posedge clk) begin
      if (reset == 1) begin
	 state1 <= 0;
	 inFlip0 <= 0;	 
	 s1wr0 <= 0;
      end
      else if (next == 1) begin
	 s1wr0 <= 0;
	 state1 <= 1;
	 s1wr_en <= 1;
	 inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
      end
      else begin
	 case(state1)
	   0: begin
	      s1wr0 <= 0;
	      state1 <= 0;
	      s1wr_en <= 0;
	      inFlip0 <= inFlip0;	      
	   end
	   1: begin
	      s1wr0 <= (s1wr0 == depth-1) ? 0 : s1wr0 + 1;
	      state1 <= 1;
         s1wr_en <= 1;
	      inFlip0 <= (s1wr0 == depth-1) ? ~inFlip0 : inFlip0;
	   end
	 endcase
      end      
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	       state2 <= 0;
	       outFlip0_z <= 0;	 
      end
      else if (next2 == 1) begin
	       s1rdloc <= 0;
	       state2 <= 1;
	       outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
      end
      else begin
	 case(state2)
	   0: begin
	      s1rdloc <= 0;
	      state2 <= 0;
	      outFlip0_z <= outFlip0_z;	 
	   end
	   1: begin
	      s1rdloc <= (s1rdloc == depth-1) ? 0 : s1rdloc + 1;
         state2 <= 1;
	      outFlip0_z <= (s1rdloc == depth-1) ? ~outFlip0_z : outFlip0_z;
	   end	     
	 endcase
      end
   end
   
   always @(posedge clk) begin
      if (reset == 1) begin
	 state3 <= 0;
	 outFlip1 <= 0;	 
      end
      else if (next4 == 1) begin
	 s2rdloc <= 0;
	 state3 <= 1;
	 outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;	      
      end
      else begin
	 case(state3)
	   0: begin
	      s2rdloc <= 0;
	      state3 <= 0;
	      outFlip1 <= outFlip1;
	   end
	   1: begin
	      s2rdloc <= (s2rdloc == depth-1) ? 0 : s2rdloc + 1;
         state3 <= 1;
	      outFlip1 <= (s2rdloc == depth-1) ? ~outFlip1 : outFlip1;
	   end	     
	 endcase
      end
   end
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd0 <= 1;
	     {1'd0,  7'd1}: s1rd0 <= 3;
	     {1'd0,  7'd2}: s1rd0 <= 5;
	     {1'd0,  7'd3}: s1rd0 <= 7;
	     {1'd0,  7'd4}: s1rd0 <= 9;
	     {1'd0,  7'd5}: s1rd0 <= 11;
	     {1'd0,  7'd6}: s1rd0 <= 13;
	     {1'd0,  7'd7}: s1rd0 <= 15;
	     {1'd0,  7'd8}: s1rd0 <= 17;
	     {1'd0,  7'd9}: s1rd0 <= 19;
	     {1'd0,  7'd10}: s1rd0 <= 21;
	     {1'd0,  7'd11}: s1rd0 <= 23;
	     {1'd0,  7'd12}: s1rd0 <= 25;
	     {1'd0,  7'd13}: s1rd0 <= 27;
	     {1'd0,  7'd14}: s1rd0 <= 29;
	     {1'd0,  7'd15}: s1rd0 <= 31;
	     {1'd0,  7'd16}: s1rd0 <= 33;
	     {1'd0,  7'd17}: s1rd0 <= 35;
	     {1'd0,  7'd18}: s1rd0 <= 37;
	     {1'd0,  7'd19}: s1rd0 <= 39;
	     {1'd0,  7'd20}: s1rd0 <= 41;
	     {1'd0,  7'd21}: s1rd0 <= 43;
	     {1'd0,  7'd22}: s1rd0 <= 45;
	     {1'd0,  7'd23}: s1rd0 <= 47;
	     {1'd0,  7'd24}: s1rd0 <= 49;
	     {1'd0,  7'd25}: s1rd0 <= 51;
	     {1'd0,  7'd26}: s1rd0 <= 53;
	     {1'd0,  7'd27}: s1rd0 <= 55;
	     {1'd0,  7'd28}: s1rd0 <= 57;
	     {1'd0,  7'd29}: s1rd0 <= 59;
	     {1'd0,  7'd30}: s1rd0 <= 61;
	     {1'd0,  7'd31}: s1rd0 <= 63;
	     {1'd0,  7'd32}: s1rd0 <= 65;
	     {1'd0,  7'd33}: s1rd0 <= 67;
	     {1'd0,  7'd34}: s1rd0 <= 69;
	     {1'd0,  7'd35}: s1rd0 <= 71;
	     {1'd0,  7'd36}: s1rd0 <= 73;
	     {1'd0,  7'd37}: s1rd0 <= 75;
	     {1'd0,  7'd38}: s1rd0 <= 77;
	     {1'd0,  7'd39}: s1rd0 <= 79;
	     {1'd0,  7'd40}: s1rd0 <= 81;
	     {1'd0,  7'd41}: s1rd0 <= 83;
	     {1'd0,  7'd42}: s1rd0 <= 85;
	     {1'd0,  7'd43}: s1rd0 <= 87;
	     {1'd0,  7'd44}: s1rd0 <= 89;
	     {1'd0,  7'd45}: s1rd0 <= 91;
	     {1'd0,  7'd46}: s1rd0 <= 93;
	     {1'd0,  7'd47}: s1rd0 <= 95;
	     {1'd0,  7'd48}: s1rd0 <= 97;
	     {1'd0,  7'd49}: s1rd0 <= 99;
	     {1'd0,  7'd50}: s1rd0 <= 101;
	     {1'd0,  7'd51}: s1rd0 <= 103;
	     {1'd0,  7'd52}: s1rd0 <= 105;
	     {1'd0,  7'd53}: s1rd0 <= 107;
	     {1'd0,  7'd54}: s1rd0 <= 109;
	     {1'd0,  7'd55}: s1rd0 <= 111;
	     {1'd0,  7'd56}: s1rd0 <= 113;
	     {1'd0,  7'd57}: s1rd0 <= 115;
	     {1'd0,  7'd58}: s1rd0 <= 117;
	     {1'd0,  7'd59}: s1rd0 <= 119;
	     {1'd0,  7'd60}: s1rd0 <= 121;
	     {1'd0,  7'd61}: s1rd0 <= 123;
	     {1'd0,  7'd62}: s1rd0 <= 125;
	     {1'd0,  7'd63}: s1rd0 <= 127;
	     {1'd0,  7'd64}: s1rd0 <= 0;
	     {1'd0,  7'd65}: s1rd0 <= 2;
	     {1'd0,  7'd66}: s1rd0 <= 4;
	     {1'd0,  7'd67}: s1rd0 <= 6;
	     {1'd0,  7'd68}: s1rd0 <= 8;
	     {1'd0,  7'd69}: s1rd0 <= 10;
	     {1'd0,  7'd70}: s1rd0 <= 12;
	     {1'd0,  7'd71}: s1rd0 <= 14;
	     {1'd0,  7'd72}: s1rd0 <= 16;
	     {1'd0,  7'd73}: s1rd0 <= 18;
	     {1'd0,  7'd74}: s1rd0 <= 20;
	     {1'd0,  7'd75}: s1rd0 <= 22;
	     {1'd0,  7'd76}: s1rd0 <= 24;
	     {1'd0,  7'd77}: s1rd0 <= 26;
	     {1'd0,  7'd78}: s1rd0 <= 28;
	     {1'd0,  7'd79}: s1rd0 <= 30;
	     {1'd0,  7'd80}: s1rd0 <= 32;
	     {1'd0,  7'd81}: s1rd0 <= 34;
	     {1'd0,  7'd82}: s1rd0 <= 36;
	     {1'd0,  7'd83}: s1rd0 <= 38;
	     {1'd0,  7'd84}: s1rd0 <= 40;
	     {1'd0,  7'd85}: s1rd0 <= 42;
	     {1'd0,  7'd86}: s1rd0 <= 44;
	     {1'd0,  7'd87}: s1rd0 <= 46;
	     {1'd0,  7'd88}: s1rd0 <= 48;
	     {1'd0,  7'd89}: s1rd0 <= 50;
	     {1'd0,  7'd90}: s1rd0 <= 52;
	     {1'd0,  7'd91}: s1rd0 <= 54;
	     {1'd0,  7'd92}: s1rd0 <= 56;
	     {1'd0,  7'd93}: s1rd0 <= 58;
	     {1'd0,  7'd94}: s1rd0 <= 60;
	     {1'd0,  7'd95}: s1rd0 <= 62;
	     {1'd0,  7'd96}: s1rd0 <= 64;
	     {1'd0,  7'd97}: s1rd0 <= 66;
	     {1'd0,  7'd98}: s1rd0 <= 68;
	     {1'd0,  7'd99}: s1rd0 <= 70;
	     {1'd0,  7'd100}: s1rd0 <= 72;
	     {1'd0,  7'd101}: s1rd0 <= 74;
	     {1'd0,  7'd102}: s1rd0 <= 76;
	     {1'd0,  7'd103}: s1rd0 <= 78;
	     {1'd0,  7'd104}: s1rd0 <= 80;
	     {1'd0,  7'd105}: s1rd0 <= 82;
	     {1'd0,  7'd106}: s1rd0 <= 84;
	     {1'd0,  7'd107}: s1rd0 <= 86;
	     {1'd0,  7'd108}: s1rd0 <= 88;
	     {1'd0,  7'd109}: s1rd0 <= 90;
	     {1'd0,  7'd110}: s1rd0 <= 92;
	     {1'd0,  7'd111}: s1rd0 <= 94;
	     {1'd0,  7'd112}: s1rd0 <= 96;
	     {1'd0,  7'd113}: s1rd0 <= 98;
	     {1'd0,  7'd114}: s1rd0 <= 100;
	     {1'd0,  7'd115}: s1rd0 <= 102;
	     {1'd0,  7'd116}: s1rd0 <= 104;
	     {1'd0,  7'd117}: s1rd0 <= 106;
	     {1'd0,  7'd118}: s1rd0 <= 108;
	     {1'd0,  7'd119}: s1rd0 <= 110;
	     {1'd0,  7'd120}: s1rd0 <= 112;
	     {1'd0,  7'd121}: s1rd0 <= 114;
	     {1'd0,  7'd122}: s1rd0 <= 116;
	     {1'd0,  7'd123}: s1rd0 <= 118;
	     {1'd0,  7'd124}: s1rd0 <= 120;
	     {1'd0,  7'd125}: s1rd0 <= 122;
	     {1'd0,  7'd126}: s1rd0 <= 124;
	     {1'd0,  7'd127}: s1rd0 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd0 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd1 <= 0;
	     {1'd0,  7'd1}: s1rd1 <= 2;
	     {1'd0,  7'd2}: s1rd1 <= 4;
	     {1'd0,  7'd3}: s1rd1 <= 6;
	     {1'd0,  7'd4}: s1rd1 <= 8;
	     {1'd0,  7'd5}: s1rd1 <= 10;
	     {1'd0,  7'd6}: s1rd1 <= 12;
	     {1'd0,  7'd7}: s1rd1 <= 14;
	     {1'd0,  7'd8}: s1rd1 <= 16;
	     {1'd0,  7'd9}: s1rd1 <= 18;
	     {1'd0,  7'd10}: s1rd1 <= 20;
	     {1'd0,  7'd11}: s1rd1 <= 22;
	     {1'd0,  7'd12}: s1rd1 <= 24;
	     {1'd0,  7'd13}: s1rd1 <= 26;
	     {1'd0,  7'd14}: s1rd1 <= 28;
	     {1'd0,  7'd15}: s1rd1 <= 30;
	     {1'd0,  7'd16}: s1rd1 <= 32;
	     {1'd0,  7'd17}: s1rd1 <= 34;
	     {1'd0,  7'd18}: s1rd1 <= 36;
	     {1'd0,  7'd19}: s1rd1 <= 38;
	     {1'd0,  7'd20}: s1rd1 <= 40;
	     {1'd0,  7'd21}: s1rd1 <= 42;
	     {1'd0,  7'd22}: s1rd1 <= 44;
	     {1'd0,  7'd23}: s1rd1 <= 46;
	     {1'd0,  7'd24}: s1rd1 <= 48;
	     {1'd0,  7'd25}: s1rd1 <= 50;
	     {1'd0,  7'd26}: s1rd1 <= 52;
	     {1'd0,  7'd27}: s1rd1 <= 54;
	     {1'd0,  7'd28}: s1rd1 <= 56;
	     {1'd0,  7'd29}: s1rd1 <= 58;
	     {1'd0,  7'd30}: s1rd1 <= 60;
	     {1'd0,  7'd31}: s1rd1 <= 62;
	     {1'd0,  7'd32}: s1rd1 <= 64;
	     {1'd0,  7'd33}: s1rd1 <= 66;
	     {1'd0,  7'd34}: s1rd1 <= 68;
	     {1'd0,  7'd35}: s1rd1 <= 70;
	     {1'd0,  7'd36}: s1rd1 <= 72;
	     {1'd0,  7'd37}: s1rd1 <= 74;
	     {1'd0,  7'd38}: s1rd1 <= 76;
	     {1'd0,  7'd39}: s1rd1 <= 78;
	     {1'd0,  7'd40}: s1rd1 <= 80;
	     {1'd0,  7'd41}: s1rd1 <= 82;
	     {1'd0,  7'd42}: s1rd1 <= 84;
	     {1'd0,  7'd43}: s1rd1 <= 86;
	     {1'd0,  7'd44}: s1rd1 <= 88;
	     {1'd0,  7'd45}: s1rd1 <= 90;
	     {1'd0,  7'd46}: s1rd1 <= 92;
	     {1'd0,  7'd47}: s1rd1 <= 94;
	     {1'd0,  7'd48}: s1rd1 <= 96;
	     {1'd0,  7'd49}: s1rd1 <= 98;
	     {1'd0,  7'd50}: s1rd1 <= 100;
	     {1'd0,  7'd51}: s1rd1 <= 102;
	     {1'd0,  7'd52}: s1rd1 <= 104;
	     {1'd0,  7'd53}: s1rd1 <= 106;
	     {1'd0,  7'd54}: s1rd1 <= 108;
	     {1'd0,  7'd55}: s1rd1 <= 110;
	     {1'd0,  7'd56}: s1rd1 <= 112;
	     {1'd0,  7'd57}: s1rd1 <= 114;
	     {1'd0,  7'd58}: s1rd1 <= 116;
	     {1'd0,  7'd59}: s1rd1 <= 118;
	     {1'd0,  7'd60}: s1rd1 <= 120;
	     {1'd0,  7'd61}: s1rd1 <= 122;
	     {1'd0,  7'd62}: s1rd1 <= 124;
	     {1'd0,  7'd63}: s1rd1 <= 126;
	     {1'd0,  7'd64}: s1rd1 <= 1;
	     {1'd0,  7'd65}: s1rd1 <= 3;
	     {1'd0,  7'd66}: s1rd1 <= 5;
	     {1'd0,  7'd67}: s1rd1 <= 7;
	     {1'd0,  7'd68}: s1rd1 <= 9;
	     {1'd0,  7'd69}: s1rd1 <= 11;
	     {1'd0,  7'd70}: s1rd1 <= 13;
	     {1'd0,  7'd71}: s1rd1 <= 15;
	     {1'd0,  7'd72}: s1rd1 <= 17;
	     {1'd0,  7'd73}: s1rd1 <= 19;
	     {1'd0,  7'd74}: s1rd1 <= 21;
	     {1'd0,  7'd75}: s1rd1 <= 23;
	     {1'd0,  7'd76}: s1rd1 <= 25;
	     {1'd0,  7'd77}: s1rd1 <= 27;
	     {1'd0,  7'd78}: s1rd1 <= 29;
	     {1'd0,  7'd79}: s1rd1 <= 31;
	     {1'd0,  7'd80}: s1rd1 <= 33;
	     {1'd0,  7'd81}: s1rd1 <= 35;
	     {1'd0,  7'd82}: s1rd1 <= 37;
	     {1'd0,  7'd83}: s1rd1 <= 39;
	     {1'd0,  7'd84}: s1rd1 <= 41;
	     {1'd0,  7'd85}: s1rd1 <= 43;
	     {1'd0,  7'd86}: s1rd1 <= 45;
	     {1'd0,  7'd87}: s1rd1 <= 47;
	     {1'd0,  7'd88}: s1rd1 <= 49;
	     {1'd0,  7'd89}: s1rd1 <= 51;
	     {1'd0,  7'd90}: s1rd1 <= 53;
	     {1'd0,  7'd91}: s1rd1 <= 55;
	     {1'd0,  7'd92}: s1rd1 <= 57;
	     {1'd0,  7'd93}: s1rd1 <= 59;
	     {1'd0,  7'd94}: s1rd1 <= 61;
	     {1'd0,  7'd95}: s1rd1 <= 63;
	     {1'd0,  7'd96}: s1rd1 <= 65;
	     {1'd0,  7'd97}: s1rd1 <= 67;
	     {1'd0,  7'd98}: s1rd1 <= 69;
	     {1'd0,  7'd99}: s1rd1 <= 71;
	     {1'd0,  7'd100}: s1rd1 <= 73;
	     {1'd0,  7'd101}: s1rd1 <= 75;
	     {1'd0,  7'd102}: s1rd1 <= 77;
	     {1'd0,  7'd103}: s1rd1 <= 79;
	     {1'd0,  7'd104}: s1rd1 <= 81;
	     {1'd0,  7'd105}: s1rd1 <= 83;
	     {1'd0,  7'd106}: s1rd1 <= 85;
	     {1'd0,  7'd107}: s1rd1 <= 87;
	     {1'd0,  7'd108}: s1rd1 <= 89;
	     {1'd0,  7'd109}: s1rd1 <= 91;
	     {1'd0,  7'd110}: s1rd1 <= 93;
	     {1'd0,  7'd111}: s1rd1 <= 95;
	     {1'd0,  7'd112}: s1rd1 <= 97;
	     {1'd0,  7'd113}: s1rd1 <= 99;
	     {1'd0,  7'd114}: s1rd1 <= 101;
	     {1'd0,  7'd115}: s1rd1 <= 103;
	     {1'd0,  7'd116}: s1rd1 <= 105;
	     {1'd0,  7'd117}: s1rd1 <= 107;
	     {1'd0,  7'd118}: s1rd1 <= 109;
	     {1'd0,  7'd119}: s1rd1 <= 111;
	     {1'd0,  7'd120}: s1rd1 <= 113;
	     {1'd0,  7'd121}: s1rd1 <= 115;
	     {1'd0,  7'd122}: s1rd1 <= 117;
	     {1'd0,  7'd123}: s1rd1 <= 119;
	     {1'd0,  7'd124}: s1rd1 <= 121;
	     {1'd0,  7'd125}: s1rd1 <= 123;
	     {1'd0,  7'd126}: s1rd1 <= 125;
	     {1'd0,  7'd127}: s1rd1 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd1 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd2 <= 1;
	     {1'd0,  7'd1}: s1rd2 <= 3;
	     {1'd0,  7'd2}: s1rd2 <= 5;
	     {1'd0,  7'd3}: s1rd2 <= 7;
	     {1'd0,  7'd4}: s1rd2 <= 9;
	     {1'd0,  7'd5}: s1rd2 <= 11;
	     {1'd0,  7'd6}: s1rd2 <= 13;
	     {1'd0,  7'd7}: s1rd2 <= 15;
	     {1'd0,  7'd8}: s1rd2 <= 17;
	     {1'd0,  7'd9}: s1rd2 <= 19;
	     {1'd0,  7'd10}: s1rd2 <= 21;
	     {1'd0,  7'd11}: s1rd2 <= 23;
	     {1'd0,  7'd12}: s1rd2 <= 25;
	     {1'd0,  7'd13}: s1rd2 <= 27;
	     {1'd0,  7'd14}: s1rd2 <= 29;
	     {1'd0,  7'd15}: s1rd2 <= 31;
	     {1'd0,  7'd16}: s1rd2 <= 33;
	     {1'd0,  7'd17}: s1rd2 <= 35;
	     {1'd0,  7'd18}: s1rd2 <= 37;
	     {1'd0,  7'd19}: s1rd2 <= 39;
	     {1'd0,  7'd20}: s1rd2 <= 41;
	     {1'd0,  7'd21}: s1rd2 <= 43;
	     {1'd0,  7'd22}: s1rd2 <= 45;
	     {1'd0,  7'd23}: s1rd2 <= 47;
	     {1'd0,  7'd24}: s1rd2 <= 49;
	     {1'd0,  7'd25}: s1rd2 <= 51;
	     {1'd0,  7'd26}: s1rd2 <= 53;
	     {1'd0,  7'd27}: s1rd2 <= 55;
	     {1'd0,  7'd28}: s1rd2 <= 57;
	     {1'd0,  7'd29}: s1rd2 <= 59;
	     {1'd0,  7'd30}: s1rd2 <= 61;
	     {1'd0,  7'd31}: s1rd2 <= 63;
	     {1'd0,  7'd32}: s1rd2 <= 65;
	     {1'd0,  7'd33}: s1rd2 <= 67;
	     {1'd0,  7'd34}: s1rd2 <= 69;
	     {1'd0,  7'd35}: s1rd2 <= 71;
	     {1'd0,  7'd36}: s1rd2 <= 73;
	     {1'd0,  7'd37}: s1rd2 <= 75;
	     {1'd0,  7'd38}: s1rd2 <= 77;
	     {1'd0,  7'd39}: s1rd2 <= 79;
	     {1'd0,  7'd40}: s1rd2 <= 81;
	     {1'd0,  7'd41}: s1rd2 <= 83;
	     {1'd0,  7'd42}: s1rd2 <= 85;
	     {1'd0,  7'd43}: s1rd2 <= 87;
	     {1'd0,  7'd44}: s1rd2 <= 89;
	     {1'd0,  7'd45}: s1rd2 <= 91;
	     {1'd0,  7'd46}: s1rd2 <= 93;
	     {1'd0,  7'd47}: s1rd2 <= 95;
	     {1'd0,  7'd48}: s1rd2 <= 97;
	     {1'd0,  7'd49}: s1rd2 <= 99;
	     {1'd0,  7'd50}: s1rd2 <= 101;
	     {1'd0,  7'd51}: s1rd2 <= 103;
	     {1'd0,  7'd52}: s1rd2 <= 105;
	     {1'd0,  7'd53}: s1rd2 <= 107;
	     {1'd0,  7'd54}: s1rd2 <= 109;
	     {1'd0,  7'd55}: s1rd2 <= 111;
	     {1'd0,  7'd56}: s1rd2 <= 113;
	     {1'd0,  7'd57}: s1rd2 <= 115;
	     {1'd0,  7'd58}: s1rd2 <= 117;
	     {1'd0,  7'd59}: s1rd2 <= 119;
	     {1'd0,  7'd60}: s1rd2 <= 121;
	     {1'd0,  7'd61}: s1rd2 <= 123;
	     {1'd0,  7'd62}: s1rd2 <= 125;
	     {1'd0,  7'd63}: s1rd2 <= 127;
	     {1'd0,  7'd64}: s1rd2 <= 0;
	     {1'd0,  7'd65}: s1rd2 <= 2;
	     {1'd0,  7'd66}: s1rd2 <= 4;
	     {1'd0,  7'd67}: s1rd2 <= 6;
	     {1'd0,  7'd68}: s1rd2 <= 8;
	     {1'd0,  7'd69}: s1rd2 <= 10;
	     {1'd0,  7'd70}: s1rd2 <= 12;
	     {1'd0,  7'd71}: s1rd2 <= 14;
	     {1'd0,  7'd72}: s1rd2 <= 16;
	     {1'd0,  7'd73}: s1rd2 <= 18;
	     {1'd0,  7'd74}: s1rd2 <= 20;
	     {1'd0,  7'd75}: s1rd2 <= 22;
	     {1'd0,  7'd76}: s1rd2 <= 24;
	     {1'd0,  7'd77}: s1rd2 <= 26;
	     {1'd0,  7'd78}: s1rd2 <= 28;
	     {1'd0,  7'd79}: s1rd2 <= 30;
	     {1'd0,  7'd80}: s1rd2 <= 32;
	     {1'd0,  7'd81}: s1rd2 <= 34;
	     {1'd0,  7'd82}: s1rd2 <= 36;
	     {1'd0,  7'd83}: s1rd2 <= 38;
	     {1'd0,  7'd84}: s1rd2 <= 40;
	     {1'd0,  7'd85}: s1rd2 <= 42;
	     {1'd0,  7'd86}: s1rd2 <= 44;
	     {1'd0,  7'd87}: s1rd2 <= 46;
	     {1'd0,  7'd88}: s1rd2 <= 48;
	     {1'd0,  7'd89}: s1rd2 <= 50;
	     {1'd0,  7'd90}: s1rd2 <= 52;
	     {1'd0,  7'd91}: s1rd2 <= 54;
	     {1'd0,  7'd92}: s1rd2 <= 56;
	     {1'd0,  7'd93}: s1rd2 <= 58;
	     {1'd0,  7'd94}: s1rd2 <= 60;
	     {1'd0,  7'd95}: s1rd2 <= 62;
	     {1'd0,  7'd96}: s1rd2 <= 64;
	     {1'd0,  7'd97}: s1rd2 <= 66;
	     {1'd0,  7'd98}: s1rd2 <= 68;
	     {1'd0,  7'd99}: s1rd2 <= 70;
	     {1'd0,  7'd100}: s1rd2 <= 72;
	     {1'd0,  7'd101}: s1rd2 <= 74;
	     {1'd0,  7'd102}: s1rd2 <= 76;
	     {1'd0,  7'd103}: s1rd2 <= 78;
	     {1'd0,  7'd104}: s1rd2 <= 80;
	     {1'd0,  7'd105}: s1rd2 <= 82;
	     {1'd0,  7'd106}: s1rd2 <= 84;
	     {1'd0,  7'd107}: s1rd2 <= 86;
	     {1'd0,  7'd108}: s1rd2 <= 88;
	     {1'd0,  7'd109}: s1rd2 <= 90;
	     {1'd0,  7'd110}: s1rd2 <= 92;
	     {1'd0,  7'd111}: s1rd2 <= 94;
	     {1'd0,  7'd112}: s1rd2 <= 96;
	     {1'd0,  7'd113}: s1rd2 <= 98;
	     {1'd0,  7'd114}: s1rd2 <= 100;
	     {1'd0,  7'd115}: s1rd2 <= 102;
	     {1'd0,  7'd116}: s1rd2 <= 104;
	     {1'd0,  7'd117}: s1rd2 <= 106;
	     {1'd0,  7'd118}: s1rd2 <= 108;
	     {1'd0,  7'd119}: s1rd2 <= 110;
	     {1'd0,  7'd120}: s1rd2 <= 112;
	     {1'd0,  7'd121}: s1rd2 <= 114;
	     {1'd0,  7'd122}: s1rd2 <= 116;
	     {1'd0,  7'd123}: s1rd2 <= 118;
	     {1'd0,  7'd124}: s1rd2 <= 120;
	     {1'd0,  7'd125}: s1rd2 <= 122;
	     {1'd0,  7'd126}: s1rd2 <= 124;
	     {1'd0,  7'd127}: s1rd2 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd2 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd3 <= 0;
	     {1'd0,  7'd1}: s1rd3 <= 2;
	     {1'd0,  7'd2}: s1rd3 <= 4;
	     {1'd0,  7'd3}: s1rd3 <= 6;
	     {1'd0,  7'd4}: s1rd3 <= 8;
	     {1'd0,  7'd5}: s1rd3 <= 10;
	     {1'd0,  7'd6}: s1rd3 <= 12;
	     {1'd0,  7'd7}: s1rd3 <= 14;
	     {1'd0,  7'd8}: s1rd3 <= 16;
	     {1'd0,  7'd9}: s1rd3 <= 18;
	     {1'd0,  7'd10}: s1rd3 <= 20;
	     {1'd0,  7'd11}: s1rd3 <= 22;
	     {1'd0,  7'd12}: s1rd3 <= 24;
	     {1'd0,  7'd13}: s1rd3 <= 26;
	     {1'd0,  7'd14}: s1rd3 <= 28;
	     {1'd0,  7'd15}: s1rd3 <= 30;
	     {1'd0,  7'd16}: s1rd3 <= 32;
	     {1'd0,  7'd17}: s1rd3 <= 34;
	     {1'd0,  7'd18}: s1rd3 <= 36;
	     {1'd0,  7'd19}: s1rd3 <= 38;
	     {1'd0,  7'd20}: s1rd3 <= 40;
	     {1'd0,  7'd21}: s1rd3 <= 42;
	     {1'd0,  7'd22}: s1rd3 <= 44;
	     {1'd0,  7'd23}: s1rd3 <= 46;
	     {1'd0,  7'd24}: s1rd3 <= 48;
	     {1'd0,  7'd25}: s1rd3 <= 50;
	     {1'd0,  7'd26}: s1rd3 <= 52;
	     {1'd0,  7'd27}: s1rd3 <= 54;
	     {1'd0,  7'd28}: s1rd3 <= 56;
	     {1'd0,  7'd29}: s1rd3 <= 58;
	     {1'd0,  7'd30}: s1rd3 <= 60;
	     {1'd0,  7'd31}: s1rd3 <= 62;
	     {1'd0,  7'd32}: s1rd3 <= 64;
	     {1'd0,  7'd33}: s1rd3 <= 66;
	     {1'd0,  7'd34}: s1rd3 <= 68;
	     {1'd0,  7'd35}: s1rd3 <= 70;
	     {1'd0,  7'd36}: s1rd3 <= 72;
	     {1'd0,  7'd37}: s1rd3 <= 74;
	     {1'd0,  7'd38}: s1rd3 <= 76;
	     {1'd0,  7'd39}: s1rd3 <= 78;
	     {1'd0,  7'd40}: s1rd3 <= 80;
	     {1'd0,  7'd41}: s1rd3 <= 82;
	     {1'd0,  7'd42}: s1rd3 <= 84;
	     {1'd0,  7'd43}: s1rd3 <= 86;
	     {1'd0,  7'd44}: s1rd3 <= 88;
	     {1'd0,  7'd45}: s1rd3 <= 90;
	     {1'd0,  7'd46}: s1rd3 <= 92;
	     {1'd0,  7'd47}: s1rd3 <= 94;
	     {1'd0,  7'd48}: s1rd3 <= 96;
	     {1'd0,  7'd49}: s1rd3 <= 98;
	     {1'd0,  7'd50}: s1rd3 <= 100;
	     {1'd0,  7'd51}: s1rd3 <= 102;
	     {1'd0,  7'd52}: s1rd3 <= 104;
	     {1'd0,  7'd53}: s1rd3 <= 106;
	     {1'd0,  7'd54}: s1rd3 <= 108;
	     {1'd0,  7'd55}: s1rd3 <= 110;
	     {1'd0,  7'd56}: s1rd3 <= 112;
	     {1'd0,  7'd57}: s1rd3 <= 114;
	     {1'd0,  7'd58}: s1rd3 <= 116;
	     {1'd0,  7'd59}: s1rd3 <= 118;
	     {1'd0,  7'd60}: s1rd3 <= 120;
	     {1'd0,  7'd61}: s1rd3 <= 122;
	     {1'd0,  7'd62}: s1rd3 <= 124;
	     {1'd0,  7'd63}: s1rd3 <= 126;
	     {1'd0,  7'd64}: s1rd3 <= 1;
	     {1'd0,  7'd65}: s1rd3 <= 3;
	     {1'd0,  7'd66}: s1rd3 <= 5;
	     {1'd0,  7'd67}: s1rd3 <= 7;
	     {1'd0,  7'd68}: s1rd3 <= 9;
	     {1'd0,  7'd69}: s1rd3 <= 11;
	     {1'd0,  7'd70}: s1rd3 <= 13;
	     {1'd0,  7'd71}: s1rd3 <= 15;
	     {1'd0,  7'd72}: s1rd3 <= 17;
	     {1'd0,  7'd73}: s1rd3 <= 19;
	     {1'd0,  7'd74}: s1rd3 <= 21;
	     {1'd0,  7'd75}: s1rd3 <= 23;
	     {1'd0,  7'd76}: s1rd3 <= 25;
	     {1'd0,  7'd77}: s1rd3 <= 27;
	     {1'd0,  7'd78}: s1rd3 <= 29;
	     {1'd0,  7'd79}: s1rd3 <= 31;
	     {1'd0,  7'd80}: s1rd3 <= 33;
	     {1'd0,  7'd81}: s1rd3 <= 35;
	     {1'd0,  7'd82}: s1rd3 <= 37;
	     {1'd0,  7'd83}: s1rd3 <= 39;
	     {1'd0,  7'd84}: s1rd3 <= 41;
	     {1'd0,  7'd85}: s1rd3 <= 43;
	     {1'd0,  7'd86}: s1rd3 <= 45;
	     {1'd0,  7'd87}: s1rd3 <= 47;
	     {1'd0,  7'd88}: s1rd3 <= 49;
	     {1'd0,  7'd89}: s1rd3 <= 51;
	     {1'd0,  7'd90}: s1rd3 <= 53;
	     {1'd0,  7'd91}: s1rd3 <= 55;
	     {1'd0,  7'd92}: s1rd3 <= 57;
	     {1'd0,  7'd93}: s1rd3 <= 59;
	     {1'd0,  7'd94}: s1rd3 <= 61;
	     {1'd0,  7'd95}: s1rd3 <= 63;
	     {1'd0,  7'd96}: s1rd3 <= 65;
	     {1'd0,  7'd97}: s1rd3 <= 67;
	     {1'd0,  7'd98}: s1rd3 <= 69;
	     {1'd0,  7'd99}: s1rd3 <= 71;
	     {1'd0,  7'd100}: s1rd3 <= 73;
	     {1'd0,  7'd101}: s1rd3 <= 75;
	     {1'd0,  7'd102}: s1rd3 <= 77;
	     {1'd0,  7'd103}: s1rd3 <= 79;
	     {1'd0,  7'd104}: s1rd3 <= 81;
	     {1'd0,  7'd105}: s1rd3 <= 83;
	     {1'd0,  7'd106}: s1rd3 <= 85;
	     {1'd0,  7'd107}: s1rd3 <= 87;
	     {1'd0,  7'd108}: s1rd3 <= 89;
	     {1'd0,  7'd109}: s1rd3 <= 91;
	     {1'd0,  7'd110}: s1rd3 <= 93;
	     {1'd0,  7'd111}: s1rd3 <= 95;
	     {1'd0,  7'd112}: s1rd3 <= 97;
	     {1'd0,  7'd113}: s1rd3 <= 99;
	     {1'd0,  7'd114}: s1rd3 <= 101;
	     {1'd0,  7'd115}: s1rd3 <= 103;
	     {1'd0,  7'd116}: s1rd3 <= 105;
	     {1'd0,  7'd117}: s1rd3 <= 107;
	     {1'd0,  7'd118}: s1rd3 <= 109;
	     {1'd0,  7'd119}: s1rd3 <= 111;
	     {1'd0,  7'd120}: s1rd3 <= 113;
	     {1'd0,  7'd121}: s1rd3 <= 115;
	     {1'd0,  7'd122}: s1rd3 <= 117;
	     {1'd0,  7'd123}: s1rd3 <= 119;
	     {1'd0,  7'd124}: s1rd3 <= 121;
	     {1'd0,  7'd125}: s1rd3 <= 123;
	     {1'd0,  7'd126}: s1rd3 <= 125;
	     {1'd0,  7'd127}: s1rd3 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd3 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd4 <= 1;
	     {1'd0,  7'd1}: s1rd4 <= 3;
	     {1'd0,  7'd2}: s1rd4 <= 5;
	     {1'd0,  7'd3}: s1rd4 <= 7;
	     {1'd0,  7'd4}: s1rd4 <= 9;
	     {1'd0,  7'd5}: s1rd4 <= 11;
	     {1'd0,  7'd6}: s1rd4 <= 13;
	     {1'd0,  7'd7}: s1rd4 <= 15;
	     {1'd0,  7'd8}: s1rd4 <= 17;
	     {1'd0,  7'd9}: s1rd4 <= 19;
	     {1'd0,  7'd10}: s1rd4 <= 21;
	     {1'd0,  7'd11}: s1rd4 <= 23;
	     {1'd0,  7'd12}: s1rd4 <= 25;
	     {1'd0,  7'd13}: s1rd4 <= 27;
	     {1'd0,  7'd14}: s1rd4 <= 29;
	     {1'd0,  7'd15}: s1rd4 <= 31;
	     {1'd0,  7'd16}: s1rd4 <= 33;
	     {1'd0,  7'd17}: s1rd4 <= 35;
	     {1'd0,  7'd18}: s1rd4 <= 37;
	     {1'd0,  7'd19}: s1rd4 <= 39;
	     {1'd0,  7'd20}: s1rd4 <= 41;
	     {1'd0,  7'd21}: s1rd4 <= 43;
	     {1'd0,  7'd22}: s1rd4 <= 45;
	     {1'd0,  7'd23}: s1rd4 <= 47;
	     {1'd0,  7'd24}: s1rd4 <= 49;
	     {1'd0,  7'd25}: s1rd4 <= 51;
	     {1'd0,  7'd26}: s1rd4 <= 53;
	     {1'd0,  7'd27}: s1rd4 <= 55;
	     {1'd0,  7'd28}: s1rd4 <= 57;
	     {1'd0,  7'd29}: s1rd4 <= 59;
	     {1'd0,  7'd30}: s1rd4 <= 61;
	     {1'd0,  7'd31}: s1rd4 <= 63;
	     {1'd0,  7'd32}: s1rd4 <= 65;
	     {1'd0,  7'd33}: s1rd4 <= 67;
	     {1'd0,  7'd34}: s1rd4 <= 69;
	     {1'd0,  7'd35}: s1rd4 <= 71;
	     {1'd0,  7'd36}: s1rd4 <= 73;
	     {1'd0,  7'd37}: s1rd4 <= 75;
	     {1'd0,  7'd38}: s1rd4 <= 77;
	     {1'd0,  7'd39}: s1rd4 <= 79;
	     {1'd0,  7'd40}: s1rd4 <= 81;
	     {1'd0,  7'd41}: s1rd4 <= 83;
	     {1'd0,  7'd42}: s1rd4 <= 85;
	     {1'd0,  7'd43}: s1rd4 <= 87;
	     {1'd0,  7'd44}: s1rd4 <= 89;
	     {1'd0,  7'd45}: s1rd4 <= 91;
	     {1'd0,  7'd46}: s1rd4 <= 93;
	     {1'd0,  7'd47}: s1rd4 <= 95;
	     {1'd0,  7'd48}: s1rd4 <= 97;
	     {1'd0,  7'd49}: s1rd4 <= 99;
	     {1'd0,  7'd50}: s1rd4 <= 101;
	     {1'd0,  7'd51}: s1rd4 <= 103;
	     {1'd0,  7'd52}: s1rd4 <= 105;
	     {1'd0,  7'd53}: s1rd4 <= 107;
	     {1'd0,  7'd54}: s1rd4 <= 109;
	     {1'd0,  7'd55}: s1rd4 <= 111;
	     {1'd0,  7'd56}: s1rd4 <= 113;
	     {1'd0,  7'd57}: s1rd4 <= 115;
	     {1'd0,  7'd58}: s1rd4 <= 117;
	     {1'd0,  7'd59}: s1rd4 <= 119;
	     {1'd0,  7'd60}: s1rd4 <= 121;
	     {1'd0,  7'd61}: s1rd4 <= 123;
	     {1'd0,  7'd62}: s1rd4 <= 125;
	     {1'd0,  7'd63}: s1rd4 <= 127;
	     {1'd0,  7'd64}: s1rd4 <= 0;
	     {1'd0,  7'd65}: s1rd4 <= 2;
	     {1'd0,  7'd66}: s1rd4 <= 4;
	     {1'd0,  7'd67}: s1rd4 <= 6;
	     {1'd0,  7'd68}: s1rd4 <= 8;
	     {1'd0,  7'd69}: s1rd4 <= 10;
	     {1'd0,  7'd70}: s1rd4 <= 12;
	     {1'd0,  7'd71}: s1rd4 <= 14;
	     {1'd0,  7'd72}: s1rd4 <= 16;
	     {1'd0,  7'd73}: s1rd4 <= 18;
	     {1'd0,  7'd74}: s1rd4 <= 20;
	     {1'd0,  7'd75}: s1rd4 <= 22;
	     {1'd0,  7'd76}: s1rd4 <= 24;
	     {1'd0,  7'd77}: s1rd4 <= 26;
	     {1'd0,  7'd78}: s1rd4 <= 28;
	     {1'd0,  7'd79}: s1rd4 <= 30;
	     {1'd0,  7'd80}: s1rd4 <= 32;
	     {1'd0,  7'd81}: s1rd4 <= 34;
	     {1'd0,  7'd82}: s1rd4 <= 36;
	     {1'd0,  7'd83}: s1rd4 <= 38;
	     {1'd0,  7'd84}: s1rd4 <= 40;
	     {1'd0,  7'd85}: s1rd4 <= 42;
	     {1'd0,  7'd86}: s1rd4 <= 44;
	     {1'd0,  7'd87}: s1rd4 <= 46;
	     {1'd0,  7'd88}: s1rd4 <= 48;
	     {1'd0,  7'd89}: s1rd4 <= 50;
	     {1'd0,  7'd90}: s1rd4 <= 52;
	     {1'd0,  7'd91}: s1rd4 <= 54;
	     {1'd0,  7'd92}: s1rd4 <= 56;
	     {1'd0,  7'd93}: s1rd4 <= 58;
	     {1'd0,  7'd94}: s1rd4 <= 60;
	     {1'd0,  7'd95}: s1rd4 <= 62;
	     {1'd0,  7'd96}: s1rd4 <= 64;
	     {1'd0,  7'd97}: s1rd4 <= 66;
	     {1'd0,  7'd98}: s1rd4 <= 68;
	     {1'd0,  7'd99}: s1rd4 <= 70;
	     {1'd0,  7'd100}: s1rd4 <= 72;
	     {1'd0,  7'd101}: s1rd4 <= 74;
	     {1'd0,  7'd102}: s1rd4 <= 76;
	     {1'd0,  7'd103}: s1rd4 <= 78;
	     {1'd0,  7'd104}: s1rd4 <= 80;
	     {1'd0,  7'd105}: s1rd4 <= 82;
	     {1'd0,  7'd106}: s1rd4 <= 84;
	     {1'd0,  7'd107}: s1rd4 <= 86;
	     {1'd0,  7'd108}: s1rd4 <= 88;
	     {1'd0,  7'd109}: s1rd4 <= 90;
	     {1'd0,  7'd110}: s1rd4 <= 92;
	     {1'd0,  7'd111}: s1rd4 <= 94;
	     {1'd0,  7'd112}: s1rd4 <= 96;
	     {1'd0,  7'd113}: s1rd4 <= 98;
	     {1'd0,  7'd114}: s1rd4 <= 100;
	     {1'd0,  7'd115}: s1rd4 <= 102;
	     {1'd0,  7'd116}: s1rd4 <= 104;
	     {1'd0,  7'd117}: s1rd4 <= 106;
	     {1'd0,  7'd118}: s1rd4 <= 108;
	     {1'd0,  7'd119}: s1rd4 <= 110;
	     {1'd0,  7'd120}: s1rd4 <= 112;
	     {1'd0,  7'd121}: s1rd4 <= 114;
	     {1'd0,  7'd122}: s1rd4 <= 116;
	     {1'd0,  7'd123}: s1rd4 <= 118;
	     {1'd0,  7'd124}: s1rd4 <= 120;
	     {1'd0,  7'd125}: s1rd4 <= 122;
	     {1'd0,  7'd126}: s1rd4 <= 124;
	     {1'd0,  7'd127}: s1rd4 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd4 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd5 <= 0;
	     {1'd0,  7'd1}: s1rd5 <= 2;
	     {1'd0,  7'd2}: s1rd5 <= 4;
	     {1'd0,  7'd3}: s1rd5 <= 6;
	     {1'd0,  7'd4}: s1rd5 <= 8;
	     {1'd0,  7'd5}: s1rd5 <= 10;
	     {1'd0,  7'd6}: s1rd5 <= 12;
	     {1'd0,  7'd7}: s1rd5 <= 14;
	     {1'd0,  7'd8}: s1rd5 <= 16;
	     {1'd0,  7'd9}: s1rd5 <= 18;
	     {1'd0,  7'd10}: s1rd5 <= 20;
	     {1'd0,  7'd11}: s1rd5 <= 22;
	     {1'd0,  7'd12}: s1rd5 <= 24;
	     {1'd0,  7'd13}: s1rd5 <= 26;
	     {1'd0,  7'd14}: s1rd5 <= 28;
	     {1'd0,  7'd15}: s1rd5 <= 30;
	     {1'd0,  7'd16}: s1rd5 <= 32;
	     {1'd0,  7'd17}: s1rd5 <= 34;
	     {1'd0,  7'd18}: s1rd5 <= 36;
	     {1'd0,  7'd19}: s1rd5 <= 38;
	     {1'd0,  7'd20}: s1rd5 <= 40;
	     {1'd0,  7'd21}: s1rd5 <= 42;
	     {1'd0,  7'd22}: s1rd5 <= 44;
	     {1'd0,  7'd23}: s1rd5 <= 46;
	     {1'd0,  7'd24}: s1rd5 <= 48;
	     {1'd0,  7'd25}: s1rd5 <= 50;
	     {1'd0,  7'd26}: s1rd5 <= 52;
	     {1'd0,  7'd27}: s1rd5 <= 54;
	     {1'd0,  7'd28}: s1rd5 <= 56;
	     {1'd0,  7'd29}: s1rd5 <= 58;
	     {1'd0,  7'd30}: s1rd5 <= 60;
	     {1'd0,  7'd31}: s1rd5 <= 62;
	     {1'd0,  7'd32}: s1rd5 <= 64;
	     {1'd0,  7'd33}: s1rd5 <= 66;
	     {1'd0,  7'd34}: s1rd5 <= 68;
	     {1'd0,  7'd35}: s1rd5 <= 70;
	     {1'd0,  7'd36}: s1rd5 <= 72;
	     {1'd0,  7'd37}: s1rd5 <= 74;
	     {1'd0,  7'd38}: s1rd5 <= 76;
	     {1'd0,  7'd39}: s1rd5 <= 78;
	     {1'd0,  7'd40}: s1rd5 <= 80;
	     {1'd0,  7'd41}: s1rd5 <= 82;
	     {1'd0,  7'd42}: s1rd5 <= 84;
	     {1'd0,  7'd43}: s1rd5 <= 86;
	     {1'd0,  7'd44}: s1rd5 <= 88;
	     {1'd0,  7'd45}: s1rd5 <= 90;
	     {1'd0,  7'd46}: s1rd5 <= 92;
	     {1'd0,  7'd47}: s1rd5 <= 94;
	     {1'd0,  7'd48}: s1rd5 <= 96;
	     {1'd0,  7'd49}: s1rd5 <= 98;
	     {1'd0,  7'd50}: s1rd5 <= 100;
	     {1'd0,  7'd51}: s1rd5 <= 102;
	     {1'd0,  7'd52}: s1rd5 <= 104;
	     {1'd0,  7'd53}: s1rd5 <= 106;
	     {1'd0,  7'd54}: s1rd5 <= 108;
	     {1'd0,  7'd55}: s1rd5 <= 110;
	     {1'd0,  7'd56}: s1rd5 <= 112;
	     {1'd0,  7'd57}: s1rd5 <= 114;
	     {1'd0,  7'd58}: s1rd5 <= 116;
	     {1'd0,  7'd59}: s1rd5 <= 118;
	     {1'd0,  7'd60}: s1rd5 <= 120;
	     {1'd0,  7'd61}: s1rd5 <= 122;
	     {1'd0,  7'd62}: s1rd5 <= 124;
	     {1'd0,  7'd63}: s1rd5 <= 126;
	     {1'd0,  7'd64}: s1rd5 <= 1;
	     {1'd0,  7'd65}: s1rd5 <= 3;
	     {1'd0,  7'd66}: s1rd5 <= 5;
	     {1'd0,  7'd67}: s1rd5 <= 7;
	     {1'd0,  7'd68}: s1rd5 <= 9;
	     {1'd0,  7'd69}: s1rd5 <= 11;
	     {1'd0,  7'd70}: s1rd5 <= 13;
	     {1'd0,  7'd71}: s1rd5 <= 15;
	     {1'd0,  7'd72}: s1rd5 <= 17;
	     {1'd0,  7'd73}: s1rd5 <= 19;
	     {1'd0,  7'd74}: s1rd5 <= 21;
	     {1'd0,  7'd75}: s1rd5 <= 23;
	     {1'd0,  7'd76}: s1rd5 <= 25;
	     {1'd0,  7'd77}: s1rd5 <= 27;
	     {1'd0,  7'd78}: s1rd5 <= 29;
	     {1'd0,  7'd79}: s1rd5 <= 31;
	     {1'd0,  7'd80}: s1rd5 <= 33;
	     {1'd0,  7'd81}: s1rd5 <= 35;
	     {1'd0,  7'd82}: s1rd5 <= 37;
	     {1'd0,  7'd83}: s1rd5 <= 39;
	     {1'd0,  7'd84}: s1rd5 <= 41;
	     {1'd0,  7'd85}: s1rd5 <= 43;
	     {1'd0,  7'd86}: s1rd5 <= 45;
	     {1'd0,  7'd87}: s1rd5 <= 47;
	     {1'd0,  7'd88}: s1rd5 <= 49;
	     {1'd0,  7'd89}: s1rd5 <= 51;
	     {1'd0,  7'd90}: s1rd5 <= 53;
	     {1'd0,  7'd91}: s1rd5 <= 55;
	     {1'd0,  7'd92}: s1rd5 <= 57;
	     {1'd0,  7'd93}: s1rd5 <= 59;
	     {1'd0,  7'd94}: s1rd5 <= 61;
	     {1'd0,  7'd95}: s1rd5 <= 63;
	     {1'd0,  7'd96}: s1rd5 <= 65;
	     {1'd0,  7'd97}: s1rd5 <= 67;
	     {1'd0,  7'd98}: s1rd5 <= 69;
	     {1'd0,  7'd99}: s1rd5 <= 71;
	     {1'd0,  7'd100}: s1rd5 <= 73;
	     {1'd0,  7'd101}: s1rd5 <= 75;
	     {1'd0,  7'd102}: s1rd5 <= 77;
	     {1'd0,  7'd103}: s1rd5 <= 79;
	     {1'd0,  7'd104}: s1rd5 <= 81;
	     {1'd0,  7'd105}: s1rd5 <= 83;
	     {1'd0,  7'd106}: s1rd5 <= 85;
	     {1'd0,  7'd107}: s1rd5 <= 87;
	     {1'd0,  7'd108}: s1rd5 <= 89;
	     {1'd0,  7'd109}: s1rd5 <= 91;
	     {1'd0,  7'd110}: s1rd5 <= 93;
	     {1'd0,  7'd111}: s1rd5 <= 95;
	     {1'd0,  7'd112}: s1rd5 <= 97;
	     {1'd0,  7'd113}: s1rd5 <= 99;
	     {1'd0,  7'd114}: s1rd5 <= 101;
	     {1'd0,  7'd115}: s1rd5 <= 103;
	     {1'd0,  7'd116}: s1rd5 <= 105;
	     {1'd0,  7'd117}: s1rd5 <= 107;
	     {1'd0,  7'd118}: s1rd5 <= 109;
	     {1'd0,  7'd119}: s1rd5 <= 111;
	     {1'd0,  7'd120}: s1rd5 <= 113;
	     {1'd0,  7'd121}: s1rd5 <= 115;
	     {1'd0,  7'd122}: s1rd5 <= 117;
	     {1'd0,  7'd123}: s1rd5 <= 119;
	     {1'd0,  7'd124}: s1rd5 <= 121;
	     {1'd0,  7'd125}: s1rd5 <= 123;
	     {1'd0,  7'd126}: s1rd5 <= 125;
	     {1'd0,  7'd127}: s1rd5 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd5 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd6 <= 1;
	     {1'd0,  7'd1}: s1rd6 <= 3;
	     {1'd0,  7'd2}: s1rd6 <= 5;
	     {1'd0,  7'd3}: s1rd6 <= 7;
	     {1'd0,  7'd4}: s1rd6 <= 9;
	     {1'd0,  7'd5}: s1rd6 <= 11;
	     {1'd0,  7'd6}: s1rd6 <= 13;
	     {1'd0,  7'd7}: s1rd6 <= 15;
	     {1'd0,  7'd8}: s1rd6 <= 17;
	     {1'd0,  7'd9}: s1rd6 <= 19;
	     {1'd0,  7'd10}: s1rd6 <= 21;
	     {1'd0,  7'd11}: s1rd6 <= 23;
	     {1'd0,  7'd12}: s1rd6 <= 25;
	     {1'd0,  7'd13}: s1rd6 <= 27;
	     {1'd0,  7'd14}: s1rd6 <= 29;
	     {1'd0,  7'd15}: s1rd6 <= 31;
	     {1'd0,  7'd16}: s1rd6 <= 33;
	     {1'd0,  7'd17}: s1rd6 <= 35;
	     {1'd0,  7'd18}: s1rd6 <= 37;
	     {1'd0,  7'd19}: s1rd6 <= 39;
	     {1'd0,  7'd20}: s1rd6 <= 41;
	     {1'd0,  7'd21}: s1rd6 <= 43;
	     {1'd0,  7'd22}: s1rd6 <= 45;
	     {1'd0,  7'd23}: s1rd6 <= 47;
	     {1'd0,  7'd24}: s1rd6 <= 49;
	     {1'd0,  7'd25}: s1rd6 <= 51;
	     {1'd0,  7'd26}: s1rd6 <= 53;
	     {1'd0,  7'd27}: s1rd6 <= 55;
	     {1'd0,  7'd28}: s1rd6 <= 57;
	     {1'd0,  7'd29}: s1rd6 <= 59;
	     {1'd0,  7'd30}: s1rd6 <= 61;
	     {1'd0,  7'd31}: s1rd6 <= 63;
	     {1'd0,  7'd32}: s1rd6 <= 65;
	     {1'd0,  7'd33}: s1rd6 <= 67;
	     {1'd0,  7'd34}: s1rd6 <= 69;
	     {1'd0,  7'd35}: s1rd6 <= 71;
	     {1'd0,  7'd36}: s1rd6 <= 73;
	     {1'd0,  7'd37}: s1rd6 <= 75;
	     {1'd0,  7'd38}: s1rd6 <= 77;
	     {1'd0,  7'd39}: s1rd6 <= 79;
	     {1'd0,  7'd40}: s1rd6 <= 81;
	     {1'd0,  7'd41}: s1rd6 <= 83;
	     {1'd0,  7'd42}: s1rd6 <= 85;
	     {1'd0,  7'd43}: s1rd6 <= 87;
	     {1'd0,  7'd44}: s1rd6 <= 89;
	     {1'd0,  7'd45}: s1rd6 <= 91;
	     {1'd0,  7'd46}: s1rd6 <= 93;
	     {1'd0,  7'd47}: s1rd6 <= 95;
	     {1'd0,  7'd48}: s1rd6 <= 97;
	     {1'd0,  7'd49}: s1rd6 <= 99;
	     {1'd0,  7'd50}: s1rd6 <= 101;
	     {1'd0,  7'd51}: s1rd6 <= 103;
	     {1'd0,  7'd52}: s1rd6 <= 105;
	     {1'd0,  7'd53}: s1rd6 <= 107;
	     {1'd0,  7'd54}: s1rd6 <= 109;
	     {1'd0,  7'd55}: s1rd6 <= 111;
	     {1'd0,  7'd56}: s1rd6 <= 113;
	     {1'd0,  7'd57}: s1rd6 <= 115;
	     {1'd0,  7'd58}: s1rd6 <= 117;
	     {1'd0,  7'd59}: s1rd6 <= 119;
	     {1'd0,  7'd60}: s1rd6 <= 121;
	     {1'd0,  7'd61}: s1rd6 <= 123;
	     {1'd0,  7'd62}: s1rd6 <= 125;
	     {1'd0,  7'd63}: s1rd6 <= 127;
	     {1'd0,  7'd64}: s1rd6 <= 0;
	     {1'd0,  7'd65}: s1rd6 <= 2;
	     {1'd0,  7'd66}: s1rd6 <= 4;
	     {1'd0,  7'd67}: s1rd6 <= 6;
	     {1'd0,  7'd68}: s1rd6 <= 8;
	     {1'd0,  7'd69}: s1rd6 <= 10;
	     {1'd0,  7'd70}: s1rd6 <= 12;
	     {1'd0,  7'd71}: s1rd6 <= 14;
	     {1'd0,  7'd72}: s1rd6 <= 16;
	     {1'd0,  7'd73}: s1rd6 <= 18;
	     {1'd0,  7'd74}: s1rd6 <= 20;
	     {1'd0,  7'd75}: s1rd6 <= 22;
	     {1'd0,  7'd76}: s1rd6 <= 24;
	     {1'd0,  7'd77}: s1rd6 <= 26;
	     {1'd0,  7'd78}: s1rd6 <= 28;
	     {1'd0,  7'd79}: s1rd6 <= 30;
	     {1'd0,  7'd80}: s1rd6 <= 32;
	     {1'd0,  7'd81}: s1rd6 <= 34;
	     {1'd0,  7'd82}: s1rd6 <= 36;
	     {1'd0,  7'd83}: s1rd6 <= 38;
	     {1'd0,  7'd84}: s1rd6 <= 40;
	     {1'd0,  7'd85}: s1rd6 <= 42;
	     {1'd0,  7'd86}: s1rd6 <= 44;
	     {1'd0,  7'd87}: s1rd6 <= 46;
	     {1'd0,  7'd88}: s1rd6 <= 48;
	     {1'd0,  7'd89}: s1rd6 <= 50;
	     {1'd0,  7'd90}: s1rd6 <= 52;
	     {1'd0,  7'd91}: s1rd6 <= 54;
	     {1'd0,  7'd92}: s1rd6 <= 56;
	     {1'd0,  7'd93}: s1rd6 <= 58;
	     {1'd0,  7'd94}: s1rd6 <= 60;
	     {1'd0,  7'd95}: s1rd6 <= 62;
	     {1'd0,  7'd96}: s1rd6 <= 64;
	     {1'd0,  7'd97}: s1rd6 <= 66;
	     {1'd0,  7'd98}: s1rd6 <= 68;
	     {1'd0,  7'd99}: s1rd6 <= 70;
	     {1'd0,  7'd100}: s1rd6 <= 72;
	     {1'd0,  7'd101}: s1rd6 <= 74;
	     {1'd0,  7'd102}: s1rd6 <= 76;
	     {1'd0,  7'd103}: s1rd6 <= 78;
	     {1'd0,  7'd104}: s1rd6 <= 80;
	     {1'd0,  7'd105}: s1rd6 <= 82;
	     {1'd0,  7'd106}: s1rd6 <= 84;
	     {1'd0,  7'd107}: s1rd6 <= 86;
	     {1'd0,  7'd108}: s1rd6 <= 88;
	     {1'd0,  7'd109}: s1rd6 <= 90;
	     {1'd0,  7'd110}: s1rd6 <= 92;
	     {1'd0,  7'd111}: s1rd6 <= 94;
	     {1'd0,  7'd112}: s1rd6 <= 96;
	     {1'd0,  7'd113}: s1rd6 <= 98;
	     {1'd0,  7'd114}: s1rd6 <= 100;
	     {1'd0,  7'd115}: s1rd6 <= 102;
	     {1'd0,  7'd116}: s1rd6 <= 104;
	     {1'd0,  7'd117}: s1rd6 <= 106;
	     {1'd0,  7'd118}: s1rd6 <= 108;
	     {1'd0,  7'd119}: s1rd6 <= 110;
	     {1'd0,  7'd120}: s1rd6 <= 112;
	     {1'd0,  7'd121}: s1rd6 <= 114;
	     {1'd0,  7'd122}: s1rd6 <= 116;
	     {1'd0,  7'd123}: s1rd6 <= 118;
	     {1'd0,  7'd124}: s1rd6 <= 120;
	     {1'd0,  7'd125}: s1rd6 <= 122;
	     {1'd0,  7'd126}: s1rd6 <= 124;
	     {1'd0,  7'd127}: s1rd6 <= 126;
      endcase      
   end

// synthesis attribute rom_style of s1rd6 is "block"
   always @(posedge clk) begin
      case({tm124_d, s1rdloc})
	     {1'd0,  7'd0}: s1rd7 <= 0;
	     {1'd0,  7'd1}: s1rd7 <= 2;
	     {1'd0,  7'd2}: s1rd7 <= 4;
	     {1'd0,  7'd3}: s1rd7 <= 6;
	     {1'd0,  7'd4}: s1rd7 <= 8;
	     {1'd0,  7'd5}: s1rd7 <= 10;
	     {1'd0,  7'd6}: s1rd7 <= 12;
	     {1'd0,  7'd7}: s1rd7 <= 14;
	     {1'd0,  7'd8}: s1rd7 <= 16;
	     {1'd0,  7'd9}: s1rd7 <= 18;
	     {1'd0,  7'd10}: s1rd7 <= 20;
	     {1'd0,  7'd11}: s1rd7 <= 22;
	     {1'd0,  7'd12}: s1rd7 <= 24;
	     {1'd0,  7'd13}: s1rd7 <= 26;
	     {1'd0,  7'd14}: s1rd7 <= 28;
	     {1'd0,  7'd15}: s1rd7 <= 30;
	     {1'd0,  7'd16}: s1rd7 <= 32;
	     {1'd0,  7'd17}: s1rd7 <= 34;
	     {1'd0,  7'd18}: s1rd7 <= 36;
	     {1'd0,  7'd19}: s1rd7 <= 38;
	     {1'd0,  7'd20}: s1rd7 <= 40;
	     {1'd0,  7'd21}: s1rd7 <= 42;
	     {1'd0,  7'd22}: s1rd7 <= 44;
	     {1'd0,  7'd23}: s1rd7 <= 46;
	     {1'd0,  7'd24}: s1rd7 <= 48;
	     {1'd0,  7'd25}: s1rd7 <= 50;
	     {1'd0,  7'd26}: s1rd7 <= 52;
	     {1'd0,  7'd27}: s1rd7 <= 54;
	     {1'd0,  7'd28}: s1rd7 <= 56;
	     {1'd0,  7'd29}: s1rd7 <= 58;
	     {1'd0,  7'd30}: s1rd7 <= 60;
	     {1'd0,  7'd31}: s1rd7 <= 62;
	     {1'd0,  7'd32}: s1rd7 <= 64;
	     {1'd0,  7'd33}: s1rd7 <= 66;
	     {1'd0,  7'd34}: s1rd7 <= 68;
	     {1'd0,  7'd35}: s1rd7 <= 70;
	     {1'd0,  7'd36}: s1rd7 <= 72;
	     {1'd0,  7'd37}: s1rd7 <= 74;
	     {1'd0,  7'd38}: s1rd7 <= 76;
	     {1'd0,  7'd39}: s1rd7 <= 78;
	     {1'd0,  7'd40}: s1rd7 <= 80;
	     {1'd0,  7'd41}: s1rd7 <= 82;
	     {1'd0,  7'd42}: s1rd7 <= 84;
	     {1'd0,  7'd43}: s1rd7 <= 86;
	     {1'd0,  7'd44}: s1rd7 <= 88;
	     {1'd0,  7'd45}: s1rd7 <= 90;
	     {1'd0,  7'd46}: s1rd7 <= 92;
	     {1'd0,  7'd47}: s1rd7 <= 94;
	     {1'd0,  7'd48}: s1rd7 <= 96;
	     {1'd0,  7'd49}: s1rd7 <= 98;
	     {1'd0,  7'd50}: s1rd7 <= 100;
	     {1'd0,  7'd51}: s1rd7 <= 102;
	     {1'd0,  7'd52}: s1rd7 <= 104;
	     {1'd0,  7'd53}: s1rd7 <= 106;
	     {1'd0,  7'd54}: s1rd7 <= 108;
	     {1'd0,  7'd55}: s1rd7 <= 110;
	     {1'd0,  7'd56}: s1rd7 <= 112;
	     {1'd0,  7'd57}: s1rd7 <= 114;
	     {1'd0,  7'd58}: s1rd7 <= 116;
	     {1'd0,  7'd59}: s1rd7 <= 118;
	     {1'd0,  7'd60}: s1rd7 <= 120;
	     {1'd0,  7'd61}: s1rd7 <= 122;
	     {1'd0,  7'd62}: s1rd7 <= 124;
	     {1'd0,  7'd63}: s1rd7 <= 126;
	     {1'd0,  7'd64}: s1rd7 <= 1;
	     {1'd0,  7'd65}: s1rd7 <= 3;
	     {1'd0,  7'd66}: s1rd7 <= 5;
	     {1'd0,  7'd67}: s1rd7 <= 7;
	     {1'd0,  7'd68}: s1rd7 <= 9;
	     {1'd0,  7'd69}: s1rd7 <= 11;
	     {1'd0,  7'd70}: s1rd7 <= 13;
	     {1'd0,  7'd71}: s1rd7 <= 15;
	     {1'd0,  7'd72}: s1rd7 <= 17;
	     {1'd0,  7'd73}: s1rd7 <= 19;
	     {1'd0,  7'd74}: s1rd7 <= 21;
	     {1'd0,  7'd75}: s1rd7 <= 23;
	     {1'd0,  7'd76}: s1rd7 <= 25;
	     {1'd0,  7'd77}: s1rd7 <= 27;
	     {1'd0,  7'd78}: s1rd7 <= 29;
	     {1'd0,  7'd79}: s1rd7 <= 31;
	     {1'd0,  7'd80}: s1rd7 <= 33;
	     {1'd0,  7'd81}: s1rd7 <= 35;
	     {1'd0,  7'd82}: s1rd7 <= 37;
	     {1'd0,  7'd83}: s1rd7 <= 39;
	     {1'd0,  7'd84}: s1rd7 <= 41;
	     {1'd0,  7'd85}: s1rd7 <= 43;
	     {1'd0,  7'd86}: s1rd7 <= 45;
	     {1'd0,  7'd87}: s1rd7 <= 47;
	     {1'd0,  7'd88}: s1rd7 <= 49;
	     {1'd0,  7'd89}: s1rd7 <= 51;
	     {1'd0,  7'd90}: s1rd7 <= 53;
	     {1'd0,  7'd91}: s1rd7 <= 55;
	     {1'd0,  7'd92}: s1rd7 <= 57;
	     {1'd0,  7'd93}: s1rd7 <= 59;
	     {1'd0,  7'd94}: s1rd7 <= 61;
	     {1'd0,  7'd95}: s1rd7 <= 63;
	     {1'd0,  7'd96}: s1rd7 <= 65;
	     {1'd0,  7'd97}: s1rd7 <= 67;
	     {1'd0,  7'd98}: s1rd7 <= 69;
	     {1'd0,  7'd99}: s1rd7 <= 71;
	     {1'd0,  7'd100}: s1rd7 <= 73;
	     {1'd0,  7'd101}: s1rd7 <= 75;
	     {1'd0,  7'd102}: s1rd7 <= 77;
	     {1'd0,  7'd103}: s1rd7 <= 79;
	     {1'd0,  7'd104}: s1rd7 <= 81;
	     {1'd0,  7'd105}: s1rd7 <= 83;
	     {1'd0,  7'd106}: s1rd7 <= 85;
	     {1'd0,  7'd107}: s1rd7 <= 87;
	     {1'd0,  7'd108}: s1rd7 <= 89;
	     {1'd0,  7'd109}: s1rd7 <= 91;
	     {1'd0,  7'd110}: s1rd7 <= 93;
	     {1'd0,  7'd111}: s1rd7 <= 95;
	     {1'd0,  7'd112}: s1rd7 <= 97;
	     {1'd0,  7'd113}: s1rd7 <= 99;
	     {1'd0,  7'd114}: s1rd7 <= 101;
	     {1'd0,  7'd115}: s1rd7 <= 103;
	     {1'd0,  7'd116}: s1rd7 <= 105;
	     {1'd0,  7'd117}: s1rd7 <= 107;
	     {1'd0,  7'd118}: s1rd7 <= 109;
	     {1'd0,  7'd119}: s1rd7 <= 111;
	     {1'd0,  7'd120}: s1rd7 <= 113;
	     {1'd0,  7'd121}: s1rd7 <= 115;
	     {1'd0,  7'd122}: s1rd7 <= 117;
	     {1'd0,  7'd123}: s1rd7 <= 119;
	     {1'd0,  7'd124}: s1rd7 <= 121;
	     {1'd0,  7'd125}: s1rd7 <= 123;
	     {1'd0,  7'd126}: s1rd7 <= 125;
	     {1'd0,  7'd127}: s1rd7 <= 127;
      endcase      
   end

// synthesis attribute rom_style of s1rd7 is "block"
    swNet71525 sw(tm124_d, clk, muxCycle, t0, s0, t1, s1, t2, s2, t3, s3, t4, s4, t5, s5, t6, s6, t7, s7);

   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr0 <= 64;
	      {1'd0, 7'd1}: s2wr0 <= 65;
	      {1'd0, 7'd2}: s2wr0 <= 66;
	      {1'd0, 7'd3}: s2wr0 <= 67;
	      {1'd0, 7'd4}: s2wr0 <= 68;
	      {1'd0, 7'd5}: s2wr0 <= 69;
	      {1'd0, 7'd6}: s2wr0 <= 70;
	      {1'd0, 7'd7}: s2wr0 <= 71;
	      {1'd0, 7'd8}: s2wr0 <= 72;
	      {1'd0, 7'd9}: s2wr0 <= 73;
	      {1'd0, 7'd10}: s2wr0 <= 74;
	      {1'd0, 7'd11}: s2wr0 <= 75;
	      {1'd0, 7'd12}: s2wr0 <= 76;
	      {1'd0, 7'd13}: s2wr0 <= 77;
	      {1'd0, 7'd14}: s2wr0 <= 78;
	      {1'd0, 7'd15}: s2wr0 <= 79;
	      {1'd0, 7'd16}: s2wr0 <= 80;
	      {1'd0, 7'd17}: s2wr0 <= 81;
	      {1'd0, 7'd18}: s2wr0 <= 82;
	      {1'd0, 7'd19}: s2wr0 <= 83;
	      {1'd0, 7'd20}: s2wr0 <= 84;
	      {1'd0, 7'd21}: s2wr0 <= 85;
	      {1'd0, 7'd22}: s2wr0 <= 86;
	      {1'd0, 7'd23}: s2wr0 <= 87;
	      {1'd0, 7'd24}: s2wr0 <= 88;
	      {1'd0, 7'd25}: s2wr0 <= 89;
	      {1'd0, 7'd26}: s2wr0 <= 90;
	      {1'd0, 7'd27}: s2wr0 <= 91;
	      {1'd0, 7'd28}: s2wr0 <= 92;
	      {1'd0, 7'd29}: s2wr0 <= 93;
	      {1'd0, 7'd30}: s2wr0 <= 94;
	      {1'd0, 7'd31}: s2wr0 <= 95;
	      {1'd0, 7'd32}: s2wr0 <= 96;
	      {1'd0, 7'd33}: s2wr0 <= 97;
	      {1'd0, 7'd34}: s2wr0 <= 98;
	      {1'd0, 7'd35}: s2wr0 <= 99;
	      {1'd0, 7'd36}: s2wr0 <= 100;
	      {1'd0, 7'd37}: s2wr0 <= 101;
	      {1'd0, 7'd38}: s2wr0 <= 102;
	      {1'd0, 7'd39}: s2wr0 <= 103;
	      {1'd0, 7'd40}: s2wr0 <= 104;
	      {1'd0, 7'd41}: s2wr0 <= 105;
	      {1'd0, 7'd42}: s2wr0 <= 106;
	      {1'd0, 7'd43}: s2wr0 <= 107;
	      {1'd0, 7'd44}: s2wr0 <= 108;
	      {1'd0, 7'd45}: s2wr0 <= 109;
	      {1'd0, 7'd46}: s2wr0 <= 110;
	      {1'd0, 7'd47}: s2wr0 <= 111;
	      {1'd0, 7'd48}: s2wr0 <= 112;
	      {1'd0, 7'd49}: s2wr0 <= 113;
	      {1'd0, 7'd50}: s2wr0 <= 114;
	      {1'd0, 7'd51}: s2wr0 <= 115;
	      {1'd0, 7'd52}: s2wr0 <= 116;
	      {1'd0, 7'd53}: s2wr0 <= 117;
	      {1'd0, 7'd54}: s2wr0 <= 118;
	      {1'd0, 7'd55}: s2wr0 <= 119;
	      {1'd0, 7'd56}: s2wr0 <= 120;
	      {1'd0, 7'd57}: s2wr0 <= 121;
	      {1'd0, 7'd58}: s2wr0 <= 122;
	      {1'd0, 7'd59}: s2wr0 <= 123;
	      {1'd0, 7'd60}: s2wr0 <= 124;
	      {1'd0, 7'd61}: s2wr0 <= 125;
	      {1'd0, 7'd62}: s2wr0 <= 126;
	      {1'd0, 7'd63}: s2wr0 <= 127;
	      {1'd0, 7'd64}: s2wr0 <= 0;
	      {1'd0, 7'd65}: s2wr0 <= 1;
	      {1'd0, 7'd66}: s2wr0 <= 2;
	      {1'd0, 7'd67}: s2wr0 <= 3;
	      {1'd0, 7'd68}: s2wr0 <= 4;
	      {1'd0, 7'd69}: s2wr0 <= 5;
	      {1'd0, 7'd70}: s2wr0 <= 6;
	      {1'd0, 7'd71}: s2wr0 <= 7;
	      {1'd0, 7'd72}: s2wr0 <= 8;
	      {1'd0, 7'd73}: s2wr0 <= 9;
	      {1'd0, 7'd74}: s2wr0 <= 10;
	      {1'd0, 7'd75}: s2wr0 <= 11;
	      {1'd0, 7'd76}: s2wr0 <= 12;
	      {1'd0, 7'd77}: s2wr0 <= 13;
	      {1'd0, 7'd78}: s2wr0 <= 14;
	      {1'd0, 7'd79}: s2wr0 <= 15;
	      {1'd0, 7'd80}: s2wr0 <= 16;
	      {1'd0, 7'd81}: s2wr0 <= 17;
	      {1'd0, 7'd82}: s2wr0 <= 18;
	      {1'd0, 7'd83}: s2wr0 <= 19;
	      {1'd0, 7'd84}: s2wr0 <= 20;
	      {1'd0, 7'd85}: s2wr0 <= 21;
	      {1'd0, 7'd86}: s2wr0 <= 22;
	      {1'd0, 7'd87}: s2wr0 <= 23;
	      {1'd0, 7'd88}: s2wr0 <= 24;
	      {1'd0, 7'd89}: s2wr0 <= 25;
	      {1'd0, 7'd90}: s2wr0 <= 26;
	      {1'd0, 7'd91}: s2wr0 <= 27;
	      {1'd0, 7'd92}: s2wr0 <= 28;
	      {1'd0, 7'd93}: s2wr0 <= 29;
	      {1'd0, 7'd94}: s2wr0 <= 30;
	      {1'd0, 7'd95}: s2wr0 <= 31;
	      {1'd0, 7'd96}: s2wr0 <= 32;
	      {1'd0, 7'd97}: s2wr0 <= 33;
	      {1'd0, 7'd98}: s2wr0 <= 34;
	      {1'd0, 7'd99}: s2wr0 <= 35;
	      {1'd0, 7'd100}: s2wr0 <= 36;
	      {1'd0, 7'd101}: s2wr0 <= 37;
	      {1'd0, 7'd102}: s2wr0 <= 38;
	      {1'd0, 7'd103}: s2wr0 <= 39;
	      {1'd0, 7'd104}: s2wr0 <= 40;
	      {1'd0, 7'd105}: s2wr0 <= 41;
	      {1'd0, 7'd106}: s2wr0 <= 42;
	      {1'd0, 7'd107}: s2wr0 <= 43;
	      {1'd0, 7'd108}: s2wr0 <= 44;
	      {1'd0, 7'd109}: s2wr0 <= 45;
	      {1'd0, 7'd110}: s2wr0 <= 46;
	      {1'd0, 7'd111}: s2wr0 <= 47;
	      {1'd0, 7'd112}: s2wr0 <= 48;
	      {1'd0, 7'd113}: s2wr0 <= 49;
	      {1'd0, 7'd114}: s2wr0 <= 50;
	      {1'd0, 7'd115}: s2wr0 <= 51;
	      {1'd0, 7'd116}: s2wr0 <= 52;
	      {1'd0, 7'd117}: s2wr0 <= 53;
	      {1'd0, 7'd118}: s2wr0 <= 54;
	      {1'd0, 7'd119}: s2wr0 <= 55;
	      {1'd0, 7'd120}: s2wr0 <= 56;
	      {1'd0, 7'd121}: s2wr0 <= 57;
	      {1'd0, 7'd122}: s2wr0 <= 58;
	      {1'd0, 7'd123}: s2wr0 <= 59;
	      {1'd0, 7'd124}: s2wr0 <= 60;
	      {1'd0, 7'd125}: s2wr0 <= 61;
	      {1'd0, 7'd126}: s2wr0 <= 62;
	      {1'd0, 7'd127}: s2wr0 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr0 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr1 <= 64;
	      {1'd0, 7'd1}: s2wr1 <= 65;
	      {1'd0, 7'd2}: s2wr1 <= 66;
	      {1'd0, 7'd3}: s2wr1 <= 67;
	      {1'd0, 7'd4}: s2wr1 <= 68;
	      {1'd0, 7'd5}: s2wr1 <= 69;
	      {1'd0, 7'd6}: s2wr1 <= 70;
	      {1'd0, 7'd7}: s2wr1 <= 71;
	      {1'd0, 7'd8}: s2wr1 <= 72;
	      {1'd0, 7'd9}: s2wr1 <= 73;
	      {1'd0, 7'd10}: s2wr1 <= 74;
	      {1'd0, 7'd11}: s2wr1 <= 75;
	      {1'd0, 7'd12}: s2wr1 <= 76;
	      {1'd0, 7'd13}: s2wr1 <= 77;
	      {1'd0, 7'd14}: s2wr1 <= 78;
	      {1'd0, 7'd15}: s2wr1 <= 79;
	      {1'd0, 7'd16}: s2wr1 <= 80;
	      {1'd0, 7'd17}: s2wr1 <= 81;
	      {1'd0, 7'd18}: s2wr1 <= 82;
	      {1'd0, 7'd19}: s2wr1 <= 83;
	      {1'd0, 7'd20}: s2wr1 <= 84;
	      {1'd0, 7'd21}: s2wr1 <= 85;
	      {1'd0, 7'd22}: s2wr1 <= 86;
	      {1'd0, 7'd23}: s2wr1 <= 87;
	      {1'd0, 7'd24}: s2wr1 <= 88;
	      {1'd0, 7'd25}: s2wr1 <= 89;
	      {1'd0, 7'd26}: s2wr1 <= 90;
	      {1'd0, 7'd27}: s2wr1 <= 91;
	      {1'd0, 7'd28}: s2wr1 <= 92;
	      {1'd0, 7'd29}: s2wr1 <= 93;
	      {1'd0, 7'd30}: s2wr1 <= 94;
	      {1'd0, 7'd31}: s2wr1 <= 95;
	      {1'd0, 7'd32}: s2wr1 <= 96;
	      {1'd0, 7'd33}: s2wr1 <= 97;
	      {1'd0, 7'd34}: s2wr1 <= 98;
	      {1'd0, 7'd35}: s2wr1 <= 99;
	      {1'd0, 7'd36}: s2wr1 <= 100;
	      {1'd0, 7'd37}: s2wr1 <= 101;
	      {1'd0, 7'd38}: s2wr1 <= 102;
	      {1'd0, 7'd39}: s2wr1 <= 103;
	      {1'd0, 7'd40}: s2wr1 <= 104;
	      {1'd0, 7'd41}: s2wr1 <= 105;
	      {1'd0, 7'd42}: s2wr1 <= 106;
	      {1'd0, 7'd43}: s2wr1 <= 107;
	      {1'd0, 7'd44}: s2wr1 <= 108;
	      {1'd0, 7'd45}: s2wr1 <= 109;
	      {1'd0, 7'd46}: s2wr1 <= 110;
	      {1'd0, 7'd47}: s2wr1 <= 111;
	      {1'd0, 7'd48}: s2wr1 <= 112;
	      {1'd0, 7'd49}: s2wr1 <= 113;
	      {1'd0, 7'd50}: s2wr1 <= 114;
	      {1'd0, 7'd51}: s2wr1 <= 115;
	      {1'd0, 7'd52}: s2wr1 <= 116;
	      {1'd0, 7'd53}: s2wr1 <= 117;
	      {1'd0, 7'd54}: s2wr1 <= 118;
	      {1'd0, 7'd55}: s2wr1 <= 119;
	      {1'd0, 7'd56}: s2wr1 <= 120;
	      {1'd0, 7'd57}: s2wr1 <= 121;
	      {1'd0, 7'd58}: s2wr1 <= 122;
	      {1'd0, 7'd59}: s2wr1 <= 123;
	      {1'd0, 7'd60}: s2wr1 <= 124;
	      {1'd0, 7'd61}: s2wr1 <= 125;
	      {1'd0, 7'd62}: s2wr1 <= 126;
	      {1'd0, 7'd63}: s2wr1 <= 127;
	      {1'd0, 7'd64}: s2wr1 <= 0;
	      {1'd0, 7'd65}: s2wr1 <= 1;
	      {1'd0, 7'd66}: s2wr1 <= 2;
	      {1'd0, 7'd67}: s2wr1 <= 3;
	      {1'd0, 7'd68}: s2wr1 <= 4;
	      {1'd0, 7'd69}: s2wr1 <= 5;
	      {1'd0, 7'd70}: s2wr1 <= 6;
	      {1'd0, 7'd71}: s2wr1 <= 7;
	      {1'd0, 7'd72}: s2wr1 <= 8;
	      {1'd0, 7'd73}: s2wr1 <= 9;
	      {1'd0, 7'd74}: s2wr1 <= 10;
	      {1'd0, 7'd75}: s2wr1 <= 11;
	      {1'd0, 7'd76}: s2wr1 <= 12;
	      {1'd0, 7'd77}: s2wr1 <= 13;
	      {1'd0, 7'd78}: s2wr1 <= 14;
	      {1'd0, 7'd79}: s2wr1 <= 15;
	      {1'd0, 7'd80}: s2wr1 <= 16;
	      {1'd0, 7'd81}: s2wr1 <= 17;
	      {1'd0, 7'd82}: s2wr1 <= 18;
	      {1'd0, 7'd83}: s2wr1 <= 19;
	      {1'd0, 7'd84}: s2wr1 <= 20;
	      {1'd0, 7'd85}: s2wr1 <= 21;
	      {1'd0, 7'd86}: s2wr1 <= 22;
	      {1'd0, 7'd87}: s2wr1 <= 23;
	      {1'd0, 7'd88}: s2wr1 <= 24;
	      {1'd0, 7'd89}: s2wr1 <= 25;
	      {1'd0, 7'd90}: s2wr1 <= 26;
	      {1'd0, 7'd91}: s2wr1 <= 27;
	      {1'd0, 7'd92}: s2wr1 <= 28;
	      {1'd0, 7'd93}: s2wr1 <= 29;
	      {1'd0, 7'd94}: s2wr1 <= 30;
	      {1'd0, 7'd95}: s2wr1 <= 31;
	      {1'd0, 7'd96}: s2wr1 <= 32;
	      {1'd0, 7'd97}: s2wr1 <= 33;
	      {1'd0, 7'd98}: s2wr1 <= 34;
	      {1'd0, 7'd99}: s2wr1 <= 35;
	      {1'd0, 7'd100}: s2wr1 <= 36;
	      {1'd0, 7'd101}: s2wr1 <= 37;
	      {1'd0, 7'd102}: s2wr1 <= 38;
	      {1'd0, 7'd103}: s2wr1 <= 39;
	      {1'd0, 7'd104}: s2wr1 <= 40;
	      {1'd0, 7'd105}: s2wr1 <= 41;
	      {1'd0, 7'd106}: s2wr1 <= 42;
	      {1'd0, 7'd107}: s2wr1 <= 43;
	      {1'd0, 7'd108}: s2wr1 <= 44;
	      {1'd0, 7'd109}: s2wr1 <= 45;
	      {1'd0, 7'd110}: s2wr1 <= 46;
	      {1'd0, 7'd111}: s2wr1 <= 47;
	      {1'd0, 7'd112}: s2wr1 <= 48;
	      {1'd0, 7'd113}: s2wr1 <= 49;
	      {1'd0, 7'd114}: s2wr1 <= 50;
	      {1'd0, 7'd115}: s2wr1 <= 51;
	      {1'd0, 7'd116}: s2wr1 <= 52;
	      {1'd0, 7'd117}: s2wr1 <= 53;
	      {1'd0, 7'd118}: s2wr1 <= 54;
	      {1'd0, 7'd119}: s2wr1 <= 55;
	      {1'd0, 7'd120}: s2wr1 <= 56;
	      {1'd0, 7'd121}: s2wr1 <= 57;
	      {1'd0, 7'd122}: s2wr1 <= 58;
	      {1'd0, 7'd123}: s2wr1 <= 59;
	      {1'd0, 7'd124}: s2wr1 <= 60;
	      {1'd0, 7'd125}: s2wr1 <= 61;
	      {1'd0, 7'd126}: s2wr1 <= 62;
	      {1'd0, 7'd127}: s2wr1 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr1 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr2 <= 64;
	      {1'd0, 7'd1}: s2wr2 <= 65;
	      {1'd0, 7'd2}: s2wr2 <= 66;
	      {1'd0, 7'd3}: s2wr2 <= 67;
	      {1'd0, 7'd4}: s2wr2 <= 68;
	      {1'd0, 7'd5}: s2wr2 <= 69;
	      {1'd0, 7'd6}: s2wr2 <= 70;
	      {1'd0, 7'd7}: s2wr2 <= 71;
	      {1'd0, 7'd8}: s2wr2 <= 72;
	      {1'd0, 7'd9}: s2wr2 <= 73;
	      {1'd0, 7'd10}: s2wr2 <= 74;
	      {1'd0, 7'd11}: s2wr2 <= 75;
	      {1'd0, 7'd12}: s2wr2 <= 76;
	      {1'd0, 7'd13}: s2wr2 <= 77;
	      {1'd0, 7'd14}: s2wr2 <= 78;
	      {1'd0, 7'd15}: s2wr2 <= 79;
	      {1'd0, 7'd16}: s2wr2 <= 80;
	      {1'd0, 7'd17}: s2wr2 <= 81;
	      {1'd0, 7'd18}: s2wr2 <= 82;
	      {1'd0, 7'd19}: s2wr2 <= 83;
	      {1'd0, 7'd20}: s2wr2 <= 84;
	      {1'd0, 7'd21}: s2wr2 <= 85;
	      {1'd0, 7'd22}: s2wr2 <= 86;
	      {1'd0, 7'd23}: s2wr2 <= 87;
	      {1'd0, 7'd24}: s2wr2 <= 88;
	      {1'd0, 7'd25}: s2wr2 <= 89;
	      {1'd0, 7'd26}: s2wr2 <= 90;
	      {1'd0, 7'd27}: s2wr2 <= 91;
	      {1'd0, 7'd28}: s2wr2 <= 92;
	      {1'd0, 7'd29}: s2wr2 <= 93;
	      {1'd0, 7'd30}: s2wr2 <= 94;
	      {1'd0, 7'd31}: s2wr2 <= 95;
	      {1'd0, 7'd32}: s2wr2 <= 96;
	      {1'd0, 7'd33}: s2wr2 <= 97;
	      {1'd0, 7'd34}: s2wr2 <= 98;
	      {1'd0, 7'd35}: s2wr2 <= 99;
	      {1'd0, 7'd36}: s2wr2 <= 100;
	      {1'd0, 7'd37}: s2wr2 <= 101;
	      {1'd0, 7'd38}: s2wr2 <= 102;
	      {1'd0, 7'd39}: s2wr2 <= 103;
	      {1'd0, 7'd40}: s2wr2 <= 104;
	      {1'd0, 7'd41}: s2wr2 <= 105;
	      {1'd0, 7'd42}: s2wr2 <= 106;
	      {1'd0, 7'd43}: s2wr2 <= 107;
	      {1'd0, 7'd44}: s2wr2 <= 108;
	      {1'd0, 7'd45}: s2wr2 <= 109;
	      {1'd0, 7'd46}: s2wr2 <= 110;
	      {1'd0, 7'd47}: s2wr2 <= 111;
	      {1'd0, 7'd48}: s2wr2 <= 112;
	      {1'd0, 7'd49}: s2wr2 <= 113;
	      {1'd0, 7'd50}: s2wr2 <= 114;
	      {1'd0, 7'd51}: s2wr2 <= 115;
	      {1'd0, 7'd52}: s2wr2 <= 116;
	      {1'd0, 7'd53}: s2wr2 <= 117;
	      {1'd0, 7'd54}: s2wr2 <= 118;
	      {1'd0, 7'd55}: s2wr2 <= 119;
	      {1'd0, 7'd56}: s2wr2 <= 120;
	      {1'd0, 7'd57}: s2wr2 <= 121;
	      {1'd0, 7'd58}: s2wr2 <= 122;
	      {1'd0, 7'd59}: s2wr2 <= 123;
	      {1'd0, 7'd60}: s2wr2 <= 124;
	      {1'd0, 7'd61}: s2wr2 <= 125;
	      {1'd0, 7'd62}: s2wr2 <= 126;
	      {1'd0, 7'd63}: s2wr2 <= 127;
	      {1'd0, 7'd64}: s2wr2 <= 0;
	      {1'd0, 7'd65}: s2wr2 <= 1;
	      {1'd0, 7'd66}: s2wr2 <= 2;
	      {1'd0, 7'd67}: s2wr2 <= 3;
	      {1'd0, 7'd68}: s2wr2 <= 4;
	      {1'd0, 7'd69}: s2wr2 <= 5;
	      {1'd0, 7'd70}: s2wr2 <= 6;
	      {1'd0, 7'd71}: s2wr2 <= 7;
	      {1'd0, 7'd72}: s2wr2 <= 8;
	      {1'd0, 7'd73}: s2wr2 <= 9;
	      {1'd0, 7'd74}: s2wr2 <= 10;
	      {1'd0, 7'd75}: s2wr2 <= 11;
	      {1'd0, 7'd76}: s2wr2 <= 12;
	      {1'd0, 7'd77}: s2wr2 <= 13;
	      {1'd0, 7'd78}: s2wr2 <= 14;
	      {1'd0, 7'd79}: s2wr2 <= 15;
	      {1'd0, 7'd80}: s2wr2 <= 16;
	      {1'd0, 7'd81}: s2wr2 <= 17;
	      {1'd0, 7'd82}: s2wr2 <= 18;
	      {1'd0, 7'd83}: s2wr2 <= 19;
	      {1'd0, 7'd84}: s2wr2 <= 20;
	      {1'd0, 7'd85}: s2wr2 <= 21;
	      {1'd0, 7'd86}: s2wr2 <= 22;
	      {1'd0, 7'd87}: s2wr2 <= 23;
	      {1'd0, 7'd88}: s2wr2 <= 24;
	      {1'd0, 7'd89}: s2wr2 <= 25;
	      {1'd0, 7'd90}: s2wr2 <= 26;
	      {1'd0, 7'd91}: s2wr2 <= 27;
	      {1'd0, 7'd92}: s2wr2 <= 28;
	      {1'd0, 7'd93}: s2wr2 <= 29;
	      {1'd0, 7'd94}: s2wr2 <= 30;
	      {1'd0, 7'd95}: s2wr2 <= 31;
	      {1'd0, 7'd96}: s2wr2 <= 32;
	      {1'd0, 7'd97}: s2wr2 <= 33;
	      {1'd0, 7'd98}: s2wr2 <= 34;
	      {1'd0, 7'd99}: s2wr2 <= 35;
	      {1'd0, 7'd100}: s2wr2 <= 36;
	      {1'd0, 7'd101}: s2wr2 <= 37;
	      {1'd0, 7'd102}: s2wr2 <= 38;
	      {1'd0, 7'd103}: s2wr2 <= 39;
	      {1'd0, 7'd104}: s2wr2 <= 40;
	      {1'd0, 7'd105}: s2wr2 <= 41;
	      {1'd0, 7'd106}: s2wr2 <= 42;
	      {1'd0, 7'd107}: s2wr2 <= 43;
	      {1'd0, 7'd108}: s2wr2 <= 44;
	      {1'd0, 7'd109}: s2wr2 <= 45;
	      {1'd0, 7'd110}: s2wr2 <= 46;
	      {1'd0, 7'd111}: s2wr2 <= 47;
	      {1'd0, 7'd112}: s2wr2 <= 48;
	      {1'd0, 7'd113}: s2wr2 <= 49;
	      {1'd0, 7'd114}: s2wr2 <= 50;
	      {1'd0, 7'd115}: s2wr2 <= 51;
	      {1'd0, 7'd116}: s2wr2 <= 52;
	      {1'd0, 7'd117}: s2wr2 <= 53;
	      {1'd0, 7'd118}: s2wr2 <= 54;
	      {1'd0, 7'd119}: s2wr2 <= 55;
	      {1'd0, 7'd120}: s2wr2 <= 56;
	      {1'd0, 7'd121}: s2wr2 <= 57;
	      {1'd0, 7'd122}: s2wr2 <= 58;
	      {1'd0, 7'd123}: s2wr2 <= 59;
	      {1'd0, 7'd124}: s2wr2 <= 60;
	      {1'd0, 7'd125}: s2wr2 <= 61;
	      {1'd0, 7'd126}: s2wr2 <= 62;
	      {1'd0, 7'd127}: s2wr2 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr2 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr3 <= 64;
	      {1'd0, 7'd1}: s2wr3 <= 65;
	      {1'd0, 7'd2}: s2wr3 <= 66;
	      {1'd0, 7'd3}: s2wr3 <= 67;
	      {1'd0, 7'd4}: s2wr3 <= 68;
	      {1'd0, 7'd5}: s2wr3 <= 69;
	      {1'd0, 7'd6}: s2wr3 <= 70;
	      {1'd0, 7'd7}: s2wr3 <= 71;
	      {1'd0, 7'd8}: s2wr3 <= 72;
	      {1'd0, 7'd9}: s2wr3 <= 73;
	      {1'd0, 7'd10}: s2wr3 <= 74;
	      {1'd0, 7'd11}: s2wr3 <= 75;
	      {1'd0, 7'd12}: s2wr3 <= 76;
	      {1'd0, 7'd13}: s2wr3 <= 77;
	      {1'd0, 7'd14}: s2wr3 <= 78;
	      {1'd0, 7'd15}: s2wr3 <= 79;
	      {1'd0, 7'd16}: s2wr3 <= 80;
	      {1'd0, 7'd17}: s2wr3 <= 81;
	      {1'd0, 7'd18}: s2wr3 <= 82;
	      {1'd0, 7'd19}: s2wr3 <= 83;
	      {1'd0, 7'd20}: s2wr3 <= 84;
	      {1'd0, 7'd21}: s2wr3 <= 85;
	      {1'd0, 7'd22}: s2wr3 <= 86;
	      {1'd0, 7'd23}: s2wr3 <= 87;
	      {1'd0, 7'd24}: s2wr3 <= 88;
	      {1'd0, 7'd25}: s2wr3 <= 89;
	      {1'd0, 7'd26}: s2wr3 <= 90;
	      {1'd0, 7'd27}: s2wr3 <= 91;
	      {1'd0, 7'd28}: s2wr3 <= 92;
	      {1'd0, 7'd29}: s2wr3 <= 93;
	      {1'd0, 7'd30}: s2wr3 <= 94;
	      {1'd0, 7'd31}: s2wr3 <= 95;
	      {1'd0, 7'd32}: s2wr3 <= 96;
	      {1'd0, 7'd33}: s2wr3 <= 97;
	      {1'd0, 7'd34}: s2wr3 <= 98;
	      {1'd0, 7'd35}: s2wr3 <= 99;
	      {1'd0, 7'd36}: s2wr3 <= 100;
	      {1'd0, 7'd37}: s2wr3 <= 101;
	      {1'd0, 7'd38}: s2wr3 <= 102;
	      {1'd0, 7'd39}: s2wr3 <= 103;
	      {1'd0, 7'd40}: s2wr3 <= 104;
	      {1'd0, 7'd41}: s2wr3 <= 105;
	      {1'd0, 7'd42}: s2wr3 <= 106;
	      {1'd0, 7'd43}: s2wr3 <= 107;
	      {1'd0, 7'd44}: s2wr3 <= 108;
	      {1'd0, 7'd45}: s2wr3 <= 109;
	      {1'd0, 7'd46}: s2wr3 <= 110;
	      {1'd0, 7'd47}: s2wr3 <= 111;
	      {1'd0, 7'd48}: s2wr3 <= 112;
	      {1'd0, 7'd49}: s2wr3 <= 113;
	      {1'd0, 7'd50}: s2wr3 <= 114;
	      {1'd0, 7'd51}: s2wr3 <= 115;
	      {1'd0, 7'd52}: s2wr3 <= 116;
	      {1'd0, 7'd53}: s2wr3 <= 117;
	      {1'd0, 7'd54}: s2wr3 <= 118;
	      {1'd0, 7'd55}: s2wr3 <= 119;
	      {1'd0, 7'd56}: s2wr3 <= 120;
	      {1'd0, 7'd57}: s2wr3 <= 121;
	      {1'd0, 7'd58}: s2wr3 <= 122;
	      {1'd0, 7'd59}: s2wr3 <= 123;
	      {1'd0, 7'd60}: s2wr3 <= 124;
	      {1'd0, 7'd61}: s2wr3 <= 125;
	      {1'd0, 7'd62}: s2wr3 <= 126;
	      {1'd0, 7'd63}: s2wr3 <= 127;
	      {1'd0, 7'd64}: s2wr3 <= 0;
	      {1'd0, 7'd65}: s2wr3 <= 1;
	      {1'd0, 7'd66}: s2wr3 <= 2;
	      {1'd0, 7'd67}: s2wr3 <= 3;
	      {1'd0, 7'd68}: s2wr3 <= 4;
	      {1'd0, 7'd69}: s2wr3 <= 5;
	      {1'd0, 7'd70}: s2wr3 <= 6;
	      {1'd0, 7'd71}: s2wr3 <= 7;
	      {1'd0, 7'd72}: s2wr3 <= 8;
	      {1'd0, 7'd73}: s2wr3 <= 9;
	      {1'd0, 7'd74}: s2wr3 <= 10;
	      {1'd0, 7'd75}: s2wr3 <= 11;
	      {1'd0, 7'd76}: s2wr3 <= 12;
	      {1'd0, 7'd77}: s2wr3 <= 13;
	      {1'd0, 7'd78}: s2wr3 <= 14;
	      {1'd0, 7'd79}: s2wr3 <= 15;
	      {1'd0, 7'd80}: s2wr3 <= 16;
	      {1'd0, 7'd81}: s2wr3 <= 17;
	      {1'd0, 7'd82}: s2wr3 <= 18;
	      {1'd0, 7'd83}: s2wr3 <= 19;
	      {1'd0, 7'd84}: s2wr3 <= 20;
	      {1'd0, 7'd85}: s2wr3 <= 21;
	      {1'd0, 7'd86}: s2wr3 <= 22;
	      {1'd0, 7'd87}: s2wr3 <= 23;
	      {1'd0, 7'd88}: s2wr3 <= 24;
	      {1'd0, 7'd89}: s2wr3 <= 25;
	      {1'd0, 7'd90}: s2wr3 <= 26;
	      {1'd0, 7'd91}: s2wr3 <= 27;
	      {1'd0, 7'd92}: s2wr3 <= 28;
	      {1'd0, 7'd93}: s2wr3 <= 29;
	      {1'd0, 7'd94}: s2wr3 <= 30;
	      {1'd0, 7'd95}: s2wr3 <= 31;
	      {1'd0, 7'd96}: s2wr3 <= 32;
	      {1'd0, 7'd97}: s2wr3 <= 33;
	      {1'd0, 7'd98}: s2wr3 <= 34;
	      {1'd0, 7'd99}: s2wr3 <= 35;
	      {1'd0, 7'd100}: s2wr3 <= 36;
	      {1'd0, 7'd101}: s2wr3 <= 37;
	      {1'd0, 7'd102}: s2wr3 <= 38;
	      {1'd0, 7'd103}: s2wr3 <= 39;
	      {1'd0, 7'd104}: s2wr3 <= 40;
	      {1'd0, 7'd105}: s2wr3 <= 41;
	      {1'd0, 7'd106}: s2wr3 <= 42;
	      {1'd0, 7'd107}: s2wr3 <= 43;
	      {1'd0, 7'd108}: s2wr3 <= 44;
	      {1'd0, 7'd109}: s2wr3 <= 45;
	      {1'd0, 7'd110}: s2wr3 <= 46;
	      {1'd0, 7'd111}: s2wr3 <= 47;
	      {1'd0, 7'd112}: s2wr3 <= 48;
	      {1'd0, 7'd113}: s2wr3 <= 49;
	      {1'd0, 7'd114}: s2wr3 <= 50;
	      {1'd0, 7'd115}: s2wr3 <= 51;
	      {1'd0, 7'd116}: s2wr3 <= 52;
	      {1'd0, 7'd117}: s2wr3 <= 53;
	      {1'd0, 7'd118}: s2wr3 <= 54;
	      {1'd0, 7'd119}: s2wr3 <= 55;
	      {1'd0, 7'd120}: s2wr3 <= 56;
	      {1'd0, 7'd121}: s2wr3 <= 57;
	      {1'd0, 7'd122}: s2wr3 <= 58;
	      {1'd0, 7'd123}: s2wr3 <= 59;
	      {1'd0, 7'd124}: s2wr3 <= 60;
	      {1'd0, 7'd125}: s2wr3 <= 61;
	      {1'd0, 7'd126}: s2wr3 <= 62;
	      {1'd0, 7'd127}: s2wr3 <= 63;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr3 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr4 <= 0;
	      {1'd0, 7'd1}: s2wr4 <= 1;
	      {1'd0, 7'd2}: s2wr4 <= 2;
	      {1'd0, 7'd3}: s2wr4 <= 3;
	      {1'd0, 7'd4}: s2wr4 <= 4;
	      {1'd0, 7'd5}: s2wr4 <= 5;
	      {1'd0, 7'd6}: s2wr4 <= 6;
	      {1'd0, 7'd7}: s2wr4 <= 7;
	      {1'd0, 7'd8}: s2wr4 <= 8;
	      {1'd0, 7'd9}: s2wr4 <= 9;
	      {1'd0, 7'd10}: s2wr4 <= 10;
	      {1'd0, 7'd11}: s2wr4 <= 11;
	      {1'd0, 7'd12}: s2wr4 <= 12;
	      {1'd0, 7'd13}: s2wr4 <= 13;
	      {1'd0, 7'd14}: s2wr4 <= 14;
	      {1'd0, 7'd15}: s2wr4 <= 15;
	      {1'd0, 7'd16}: s2wr4 <= 16;
	      {1'd0, 7'd17}: s2wr4 <= 17;
	      {1'd0, 7'd18}: s2wr4 <= 18;
	      {1'd0, 7'd19}: s2wr4 <= 19;
	      {1'd0, 7'd20}: s2wr4 <= 20;
	      {1'd0, 7'd21}: s2wr4 <= 21;
	      {1'd0, 7'd22}: s2wr4 <= 22;
	      {1'd0, 7'd23}: s2wr4 <= 23;
	      {1'd0, 7'd24}: s2wr4 <= 24;
	      {1'd0, 7'd25}: s2wr4 <= 25;
	      {1'd0, 7'd26}: s2wr4 <= 26;
	      {1'd0, 7'd27}: s2wr4 <= 27;
	      {1'd0, 7'd28}: s2wr4 <= 28;
	      {1'd0, 7'd29}: s2wr4 <= 29;
	      {1'd0, 7'd30}: s2wr4 <= 30;
	      {1'd0, 7'd31}: s2wr4 <= 31;
	      {1'd0, 7'd32}: s2wr4 <= 32;
	      {1'd0, 7'd33}: s2wr4 <= 33;
	      {1'd0, 7'd34}: s2wr4 <= 34;
	      {1'd0, 7'd35}: s2wr4 <= 35;
	      {1'd0, 7'd36}: s2wr4 <= 36;
	      {1'd0, 7'd37}: s2wr4 <= 37;
	      {1'd0, 7'd38}: s2wr4 <= 38;
	      {1'd0, 7'd39}: s2wr4 <= 39;
	      {1'd0, 7'd40}: s2wr4 <= 40;
	      {1'd0, 7'd41}: s2wr4 <= 41;
	      {1'd0, 7'd42}: s2wr4 <= 42;
	      {1'd0, 7'd43}: s2wr4 <= 43;
	      {1'd0, 7'd44}: s2wr4 <= 44;
	      {1'd0, 7'd45}: s2wr4 <= 45;
	      {1'd0, 7'd46}: s2wr4 <= 46;
	      {1'd0, 7'd47}: s2wr4 <= 47;
	      {1'd0, 7'd48}: s2wr4 <= 48;
	      {1'd0, 7'd49}: s2wr4 <= 49;
	      {1'd0, 7'd50}: s2wr4 <= 50;
	      {1'd0, 7'd51}: s2wr4 <= 51;
	      {1'd0, 7'd52}: s2wr4 <= 52;
	      {1'd0, 7'd53}: s2wr4 <= 53;
	      {1'd0, 7'd54}: s2wr4 <= 54;
	      {1'd0, 7'd55}: s2wr4 <= 55;
	      {1'd0, 7'd56}: s2wr4 <= 56;
	      {1'd0, 7'd57}: s2wr4 <= 57;
	      {1'd0, 7'd58}: s2wr4 <= 58;
	      {1'd0, 7'd59}: s2wr4 <= 59;
	      {1'd0, 7'd60}: s2wr4 <= 60;
	      {1'd0, 7'd61}: s2wr4 <= 61;
	      {1'd0, 7'd62}: s2wr4 <= 62;
	      {1'd0, 7'd63}: s2wr4 <= 63;
	      {1'd0, 7'd64}: s2wr4 <= 64;
	      {1'd0, 7'd65}: s2wr4 <= 65;
	      {1'd0, 7'd66}: s2wr4 <= 66;
	      {1'd0, 7'd67}: s2wr4 <= 67;
	      {1'd0, 7'd68}: s2wr4 <= 68;
	      {1'd0, 7'd69}: s2wr4 <= 69;
	      {1'd0, 7'd70}: s2wr4 <= 70;
	      {1'd0, 7'd71}: s2wr4 <= 71;
	      {1'd0, 7'd72}: s2wr4 <= 72;
	      {1'd0, 7'd73}: s2wr4 <= 73;
	      {1'd0, 7'd74}: s2wr4 <= 74;
	      {1'd0, 7'd75}: s2wr4 <= 75;
	      {1'd0, 7'd76}: s2wr4 <= 76;
	      {1'd0, 7'd77}: s2wr4 <= 77;
	      {1'd0, 7'd78}: s2wr4 <= 78;
	      {1'd0, 7'd79}: s2wr4 <= 79;
	      {1'd0, 7'd80}: s2wr4 <= 80;
	      {1'd0, 7'd81}: s2wr4 <= 81;
	      {1'd0, 7'd82}: s2wr4 <= 82;
	      {1'd0, 7'd83}: s2wr4 <= 83;
	      {1'd0, 7'd84}: s2wr4 <= 84;
	      {1'd0, 7'd85}: s2wr4 <= 85;
	      {1'd0, 7'd86}: s2wr4 <= 86;
	      {1'd0, 7'd87}: s2wr4 <= 87;
	      {1'd0, 7'd88}: s2wr4 <= 88;
	      {1'd0, 7'd89}: s2wr4 <= 89;
	      {1'd0, 7'd90}: s2wr4 <= 90;
	      {1'd0, 7'd91}: s2wr4 <= 91;
	      {1'd0, 7'd92}: s2wr4 <= 92;
	      {1'd0, 7'd93}: s2wr4 <= 93;
	      {1'd0, 7'd94}: s2wr4 <= 94;
	      {1'd0, 7'd95}: s2wr4 <= 95;
	      {1'd0, 7'd96}: s2wr4 <= 96;
	      {1'd0, 7'd97}: s2wr4 <= 97;
	      {1'd0, 7'd98}: s2wr4 <= 98;
	      {1'd0, 7'd99}: s2wr4 <= 99;
	      {1'd0, 7'd100}: s2wr4 <= 100;
	      {1'd0, 7'd101}: s2wr4 <= 101;
	      {1'd0, 7'd102}: s2wr4 <= 102;
	      {1'd0, 7'd103}: s2wr4 <= 103;
	      {1'd0, 7'd104}: s2wr4 <= 104;
	      {1'd0, 7'd105}: s2wr4 <= 105;
	      {1'd0, 7'd106}: s2wr4 <= 106;
	      {1'd0, 7'd107}: s2wr4 <= 107;
	      {1'd0, 7'd108}: s2wr4 <= 108;
	      {1'd0, 7'd109}: s2wr4 <= 109;
	      {1'd0, 7'd110}: s2wr4 <= 110;
	      {1'd0, 7'd111}: s2wr4 <= 111;
	      {1'd0, 7'd112}: s2wr4 <= 112;
	      {1'd0, 7'd113}: s2wr4 <= 113;
	      {1'd0, 7'd114}: s2wr4 <= 114;
	      {1'd0, 7'd115}: s2wr4 <= 115;
	      {1'd0, 7'd116}: s2wr4 <= 116;
	      {1'd0, 7'd117}: s2wr4 <= 117;
	      {1'd0, 7'd118}: s2wr4 <= 118;
	      {1'd0, 7'd119}: s2wr4 <= 119;
	      {1'd0, 7'd120}: s2wr4 <= 120;
	      {1'd0, 7'd121}: s2wr4 <= 121;
	      {1'd0, 7'd122}: s2wr4 <= 122;
	      {1'd0, 7'd123}: s2wr4 <= 123;
	      {1'd0, 7'd124}: s2wr4 <= 124;
	      {1'd0, 7'd125}: s2wr4 <= 125;
	      {1'd0, 7'd126}: s2wr4 <= 126;
	      {1'd0, 7'd127}: s2wr4 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr4 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr5 <= 0;
	      {1'd0, 7'd1}: s2wr5 <= 1;
	      {1'd0, 7'd2}: s2wr5 <= 2;
	      {1'd0, 7'd3}: s2wr5 <= 3;
	      {1'd0, 7'd4}: s2wr5 <= 4;
	      {1'd0, 7'd5}: s2wr5 <= 5;
	      {1'd0, 7'd6}: s2wr5 <= 6;
	      {1'd0, 7'd7}: s2wr5 <= 7;
	      {1'd0, 7'd8}: s2wr5 <= 8;
	      {1'd0, 7'd9}: s2wr5 <= 9;
	      {1'd0, 7'd10}: s2wr5 <= 10;
	      {1'd0, 7'd11}: s2wr5 <= 11;
	      {1'd0, 7'd12}: s2wr5 <= 12;
	      {1'd0, 7'd13}: s2wr5 <= 13;
	      {1'd0, 7'd14}: s2wr5 <= 14;
	      {1'd0, 7'd15}: s2wr5 <= 15;
	      {1'd0, 7'd16}: s2wr5 <= 16;
	      {1'd0, 7'd17}: s2wr5 <= 17;
	      {1'd0, 7'd18}: s2wr5 <= 18;
	      {1'd0, 7'd19}: s2wr5 <= 19;
	      {1'd0, 7'd20}: s2wr5 <= 20;
	      {1'd0, 7'd21}: s2wr5 <= 21;
	      {1'd0, 7'd22}: s2wr5 <= 22;
	      {1'd0, 7'd23}: s2wr5 <= 23;
	      {1'd0, 7'd24}: s2wr5 <= 24;
	      {1'd0, 7'd25}: s2wr5 <= 25;
	      {1'd0, 7'd26}: s2wr5 <= 26;
	      {1'd0, 7'd27}: s2wr5 <= 27;
	      {1'd0, 7'd28}: s2wr5 <= 28;
	      {1'd0, 7'd29}: s2wr5 <= 29;
	      {1'd0, 7'd30}: s2wr5 <= 30;
	      {1'd0, 7'd31}: s2wr5 <= 31;
	      {1'd0, 7'd32}: s2wr5 <= 32;
	      {1'd0, 7'd33}: s2wr5 <= 33;
	      {1'd0, 7'd34}: s2wr5 <= 34;
	      {1'd0, 7'd35}: s2wr5 <= 35;
	      {1'd0, 7'd36}: s2wr5 <= 36;
	      {1'd0, 7'd37}: s2wr5 <= 37;
	      {1'd0, 7'd38}: s2wr5 <= 38;
	      {1'd0, 7'd39}: s2wr5 <= 39;
	      {1'd0, 7'd40}: s2wr5 <= 40;
	      {1'd0, 7'd41}: s2wr5 <= 41;
	      {1'd0, 7'd42}: s2wr5 <= 42;
	      {1'd0, 7'd43}: s2wr5 <= 43;
	      {1'd0, 7'd44}: s2wr5 <= 44;
	      {1'd0, 7'd45}: s2wr5 <= 45;
	      {1'd0, 7'd46}: s2wr5 <= 46;
	      {1'd0, 7'd47}: s2wr5 <= 47;
	      {1'd0, 7'd48}: s2wr5 <= 48;
	      {1'd0, 7'd49}: s2wr5 <= 49;
	      {1'd0, 7'd50}: s2wr5 <= 50;
	      {1'd0, 7'd51}: s2wr5 <= 51;
	      {1'd0, 7'd52}: s2wr5 <= 52;
	      {1'd0, 7'd53}: s2wr5 <= 53;
	      {1'd0, 7'd54}: s2wr5 <= 54;
	      {1'd0, 7'd55}: s2wr5 <= 55;
	      {1'd0, 7'd56}: s2wr5 <= 56;
	      {1'd0, 7'd57}: s2wr5 <= 57;
	      {1'd0, 7'd58}: s2wr5 <= 58;
	      {1'd0, 7'd59}: s2wr5 <= 59;
	      {1'd0, 7'd60}: s2wr5 <= 60;
	      {1'd0, 7'd61}: s2wr5 <= 61;
	      {1'd0, 7'd62}: s2wr5 <= 62;
	      {1'd0, 7'd63}: s2wr5 <= 63;
	      {1'd0, 7'd64}: s2wr5 <= 64;
	      {1'd0, 7'd65}: s2wr5 <= 65;
	      {1'd0, 7'd66}: s2wr5 <= 66;
	      {1'd0, 7'd67}: s2wr5 <= 67;
	      {1'd0, 7'd68}: s2wr5 <= 68;
	      {1'd0, 7'd69}: s2wr5 <= 69;
	      {1'd0, 7'd70}: s2wr5 <= 70;
	      {1'd0, 7'd71}: s2wr5 <= 71;
	      {1'd0, 7'd72}: s2wr5 <= 72;
	      {1'd0, 7'd73}: s2wr5 <= 73;
	      {1'd0, 7'd74}: s2wr5 <= 74;
	      {1'd0, 7'd75}: s2wr5 <= 75;
	      {1'd0, 7'd76}: s2wr5 <= 76;
	      {1'd0, 7'd77}: s2wr5 <= 77;
	      {1'd0, 7'd78}: s2wr5 <= 78;
	      {1'd0, 7'd79}: s2wr5 <= 79;
	      {1'd0, 7'd80}: s2wr5 <= 80;
	      {1'd0, 7'd81}: s2wr5 <= 81;
	      {1'd0, 7'd82}: s2wr5 <= 82;
	      {1'd0, 7'd83}: s2wr5 <= 83;
	      {1'd0, 7'd84}: s2wr5 <= 84;
	      {1'd0, 7'd85}: s2wr5 <= 85;
	      {1'd0, 7'd86}: s2wr5 <= 86;
	      {1'd0, 7'd87}: s2wr5 <= 87;
	      {1'd0, 7'd88}: s2wr5 <= 88;
	      {1'd0, 7'd89}: s2wr5 <= 89;
	      {1'd0, 7'd90}: s2wr5 <= 90;
	      {1'd0, 7'd91}: s2wr5 <= 91;
	      {1'd0, 7'd92}: s2wr5 <= 92;
	      {1'd0, 7'd93}: s2wr5 <= 93;
	      {1'd0, 7'd94}: s2wr5 <= 94;
	      {1'd0, 7'd95}: s2wr5 <= 95;
	      {1'd0, 7'd96}: s2wr5 <= 96;
	      {1'd0, 7'd97}: s2wr5 <= 97;
	      {1'd0, 7'd98}: s2wr5 <= 98;
	      {1'd0, 7'd99}: s2wr5 <= 99;
	      {1'd0, 7'd100}: s2wr5 <= 100;
	      {1'd0, 7'd101}: s2wr5 <= 101;
	      {1'd0, 7'd102}: s2wr5 <= 102;
	      {1'd0, 7'd103}: s2wr5 <= 103;
	      {1'd0, 7'd104}: s2wr5 <= 104;
	      {1'd0, 7'd105}: s2wr5 <= 105;
	      {1'd0, 7'd106}: s2wr5 <= 106;
	      {1'd0, 7'd107}: s2wr5 <= 107;
	      {1'd0, 7'd108}: s2wr5 <= 108;
	      {1'd0, 7'd109}: s2wr5 <= 109;
	      {1'd0, 7'd110}: s2wr5 <= 110;
	      {1'd0, 7'd111}: s2wr5 <= 111;
	      {1'd0, 7'd112}: s2wr5 <= 112;
	      {1'd0, 7'd113}: s2wr5 <= 113;
	      {1'd0, 7'd114}: s2wr5 <= 114;
	      {1'd0, 7'd115}: s2wr5 <= 115;
	      {1'd0, 7'd116}: s2wr5 <= 116;
	      {1'd0, 7'd117}: s2wr5 <= 117;
	      {1'd0, 7'd118}: s2wr5 <= 118;
	      {1'd0, 7'd119}: s2wr5 <= 119;
	      {1'd0, 7'd120}: s2wr5 <= 120;
	      {1'd0, 7'd121}: s2wr5 <= 121;
	      {1'd0, 7'd122}: s2wr5 <= 122;
	      {1'd0, 7'd123}: s2wr5 <= 123;
	      {1'd0, 7'd124}: s2wr5 <= 124;
	      {1'd0, 7'd125}: s2wr5 <= 125;
	      {1'd0, 7'd126}: s2wr5 <= 126;
	      {1'd0, 7'd127}: s2wr5 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr5 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr6 <= 0;
	      {1'd0, 7'd1}: s2wr6 <= 1;
	      {1'd0, 7'd2}: s2wr6 <= 2;
	      {1'd0, 7'd3}: s2wr6 <= 3;
	      {1'd0, 7'd4}: s2wr6 <= 4;
	      {1'd0, 7'd5}: s2wr6 <= 5;
	      {1'd0, 7'd6}: s2wr6 <= 6;
	      {1'd0, 7'd7}: s2wr6 <= 7;
	      {1'd0, 7'd8}: s2wr6 <= 8;
	      {1'd0, 7'd9}: s2wr6 <= 9;
	      {1'd0, 7'd10}: s2wr6 <= 10;
	      {1'd0, 7'd11}: s2wr6 <= 11;
	      {1'd0, 7'd12}: s2wr6 <= 12;
	      {1'd0, 7'd13}: s2wr6 <= 13;
	      {1'd0, 7'd14}: s2wr6 <= 14;
	      {1'd0, 7'd15}: s2wr6 <= 15;
	      {1'd0, 7'd16}: s2wr6 <= 16;
	      {1'd0, 7'd17}: s2wr6 <= 17;
	      {1'd0, 7'd18}: s2wr6 <= 18;
	      {1'd0, 7'd19}: s2wr6 <= 19;
	      {1'd0, 7'd20}: s2wr6 <= 20;
	      {1'd0, 7'd21}: s2wr6 <= 21;
	      {1'd0, 7'd22}: s2wr6 <= 22;
	      {1'd0, 7'd23}: s2wr6 <= 23;
	      {1'd0, 7'd24}: s2wr6 <= 24;
	      {1'd0, 7'd25}: s2wr6 <= 25;
	      {1'd0, 7'd26}: s2wr6 <= 26;
	      {1'd0, 7'd27}: s2wr6 <= 27;
	      {1'd0, 7'd28}: s2wr6 <= 28;
	      {1'd0, 7'd29}: s2wr6 <= 29;
	      {1'd0, 7'd30}: s2wr6 <= 30;
	      {1'd0, 7'd31}: s2wr6 <= 31;
	      {1'd0, 7'd32}: s2wr6 <= 32;
	      {1'd0, 7'd33}: s2wr6 <= 33;
	      {1'd0, 7'd34}: s2wr6 <= 34;
	      {1'd0, 7'd35}: s2wr6 <= 35;
	      {1'd0, 7'd36}: s2wr6 <= 36;
	      {1'd0, 7'd37}: s2wr6 <= 37;
	      {1'd0, 7'd38}: s2wr6 <= 38;
	      {1'd0, 7'd39}: s2wr6 <= 39;
	      {1'd0, 7'd40}: s2wr6 <= 40;
	      {1'd0, 7'd41}: s2wr6 <= 41;
	      {1'd0, 7'd42}: s2wr6 <= 42;
	      {1'd0, 7'd43}: s2wr6 <= 43;
	      {1'd0, 7'd44}: s2wr6 <= 44;
	      {1'd0, 7'd45}: s2wr6 <= 45;
	      {1'd0, 7'd46}: s2wr6 <= 46;
	      {1'd0, 7'd47}: s2wr6 <= 47;
	      {1'd0, 7'd48}: s2wr6 <= 48;
	      {1'd0, 7'd49}: s2wr6 <= 49;
	      {1'd0, 7'd50}: s2wr6 <= 50;
	      {1'd0, 7'd51}: s2wr6 <= 51;
	      {1'd0, 7'd52}: s2wr6 <= 52;
	      {1'd0, 7'd53}: s2wr6 <= 53;
	      {1'd0, 7'd54}: s2wr6 <= 54;
	      {1'd0, 7'd55}: s2wr6 <= 55;
	      {1'd0, 7'd56}: s2wr6 <= 56;
	      {1'd0, 7'd57}: s2wr6 <= 57;
	      {1'd0, 7'd58}: s2wr6 <= 58;
	      {1'd0, 7'd59}: s2wr6 <= 59;
	      {1'd0, 7'd60}: s2wr6 <= 60;
	      {1'd0, 7'd61}: s2wr6 <= 61;
	      {1'd0, 7'd62}: s2wr6 <= 62;
	      {1'd0, 7'd63}: s2wr6 <= 63;
	      {1'd0, 7'd64}: s2wr6 <= 64;
	      {1'd0, 7'd65}: s2wr6 <= 65;
	      {1'd0, 7'd66}: s2wr6 <= 66;
	      {1'd0, 7'd67}: s2wr6 <= 67;
	      {1'd0, 7'd68}: s2wr6 <= 68;
	      {1'd0, 7'd69}: s2wr6 <= 69;
	      {1'd0, 7'd70}: s2wr6 <= 70;
	      {1'd0, 7'd71}: s2wr6 <= 71;
	      {1'd0, 7'd72}: s2wr6 <= 72;
	      {1'd0, 7'd73}: s2wr6 <= 73;
	      {1'd0, 7'd74}: s2wr6 <= 74;
	      {1'd0, 7'd75}: s2wr6 <= 75;
	      {1'd0, 7'd76}: s2wr6 <= 76;
	      {1'd0, 7'd77}: s2wr6 <= 77;
	      {1'd0, 7'd78}: s2wr6 <= 78;
	      {1'd0, 7'd79}: s2wr6 <= 79;
	      {1'd0, 7'd80}: s2wr6 <= 80;
	      {1'd0, 7'd81}: s2wr6 <= 81;
	      {1'd0, 7'd82}: s2wr6 <= 82;
	      {1'd0, 7'd83}: s2wr6 <= 83;
	      {1'd0, 7'd84}: s2wr6 <= 84;
	      {1'd0, 7'd85}: s2wr6 <= 85;
	      {1'd0, 7'd86}: s2wr6 <= 86;
	      {1'd0, 7'd87}: s2wr6 <= 87;
	      {1'd0, 7'd88}: s2wr6 <= 88;
	      {1'd0, 7'd89}: s2wr6 <= 89;
	      {1'd0, 7'd90}: s2wr6 <= 90;
	      {1'd0, 7'd91}: s2wr6 <= 91;
	      {1'd0, 7'd92}: s2wr6 <= 92;
	      {1'd0, 7'd93}: s2wr6 <= 93;
	      {1'd0, 7'd94}: s2wr6 <= 94;
	      {1'd0, 7'd95}: s2wr6 <= 95;
	      {1'd0, 7'd96}: s2wr6 <= 96;
	      {1'd0, 7'd97}: s2wr6 <= 97;
	      {1'd0, 7'd98}: s2wr6 <= 98;
	      {1'd0, 7'd99}: s2wr6 <= 99;
	      {1'd0, 7'd100}: s2wr6 <= 100;
	      {1'd0, 7'd101}: s2wr6 <= 101;
	      {1'd0, 7'd102}: s2wr6 <= 102;
	      {1'd0, 7'd103}: s2wr6 <= 103;
	      {1'd0, 7'd104}: s2wr6 <= 104;
	      {1'd0, 7'd105}: s2wr6 <= 105;
	      {1'd0, 7'd106}: s2wr6 <= 106;
	      {1'd0, 7'd107}: s2wr6 <= 107;
	      {1'd0, 7'd108}: s2wr6 <= 108;
	      {1'd0, 7'd109}: s2wr6 <= 109;
	      {1'd0, 7'd110}: s2wr6 <= 110;
	      {1'd0, 7'd111}: s2wr6 <= 111;
	      {1'd0, 7'd112}: s2wr6 <= 112;
	      {1'd0, 7'd113}: s2wr6 <= 113;
	      {1'd0, 7'd114}: s2wr6 <= 114;
	      {1'd0, 7'd115}: s2wr6 <= 115;
	      {1'd0, 7'd116}: s2wr6 <= 116;
	      {1'd0, 7'd117}: s2wr6 <= 117;
	      {1'd0, 7'd118}: s2wr6 <= 118;
	      {1'd0, 7'd119}: s2wr6 <= 119;
	      {1'd0, 7'd120}: s2wr6 <= 120;
	      {1'd0, 7'd121}: s2wr6 <= 121;
	      {1'd0, 7'd122}: s2wr6 <= 122;
	      {1'd0, 7'd123}: s2wr6 <= 123;
	      {1'd0, 7'd124}: s2wr6 <= 124;
	      {1'd0, 7'd125}: s2wr6 <= 125;
	      {1'd0, 7'd126}: s2wr6 <= 126;
	      {1'd0, 7'd127}: s2wr6 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr6 is "block"
   always @(posedge clk) begin
      case({tm124_dd, writeCycle})
	      {1'd0, 7'd0}: s2wr7 <= 0;
	      {1'd0, 7'd1}: s2wr7 <= 1;
	      {1'd0, 7'd2}: s2wr7 <= 2;
	      {1'd0, 7'd3}: s2wr7 <= 3;
	      {1'd0, 7'd4}: s2wr7 <= 4;
	      {1'd0, 7'd5}: s2wr7 <= 5;
	      {1'd0, 7'd6}: s2wr7 <= 6;
	      {1'd0, 7'd7}: s2wr7 <= 7;
	      {1'd0, 7'd8}: s2wr7 <= 8;
	      {1'd0, 7'd9}: s2wr7 <= 9;
	      {1'd0, 7'd10}: s2wr7 <= 10;
	      {1'd0, 7'd11}: s2wr7 <= 11;
	      {1'd0, 7'd12}: s2wr7 <= 12;
	      {1'd0, 7'd13}: s2wr7 <= 13;
	      {1'd0, 7'd14}: s2wr7 <= 14;
	      {1'd0, 7'd15}: s2wr7 <= 15;
	      {1'd0, 7'd16}: s2wr7 <= 16;
	      {1'd0, 7'd17}: s2wr7 <= 17;
	      {1'd0, 7'd18}: s2wr7 <= 18;
	      {1'd0, 7'd19}: s2wr7 <= 19;
	      {1'd0, 7'd20}: s2wr7 <= 20;
	      {1'd0, 7'd21}: s2wr7 <= 21;
	      {1'd0, 7'd22}: s2wr7 <= 22;
	      {1'd0, 7'd23}: s2wr7 <= 23;
	      {1'd0, 7'd24}: s2wr7 <= 24;
	      {1'd0, 7'd25}: s2wr7 <= 25;
	      {1'd0, 7'd26}: s2wr7 <= 26;
	      {1'd0, 7'd27}: s2wr7 <= 27;
	      {1'd0, 7'd28}: s2wr7 <= 28;
	      {1'd0, 7'd29}: s2wr7 <= 29;
	      {1'd0, 7'd30}: s2wr7 <= 30;
	      {1'd0, 7'd31}: s2wr7 <= 31;
	      {1'd0, 7'd32}: s2wr7 <= 32;
	      {1'd0, 7'd33}: s2wr7 <= 33;
	      {1'd0, 7'd34}: s2wr7 <= 34;
	      {1'd0, 7'd35}: s2wr7 <= 35;
	      {1'd0, 7'd36}: s2wr7 <= 36;
	      {1'd0, 7'd37}: s2wr7 <= 37;
	      {1'd0, 7'd38}: s2wr7 <= 38;
	      {1'd0, 7'd39}: s2wr7 <= 39;
	      {1'd0, 7'd40}: s2wr7 <= 40;
	      {1'd0, 7'd41}: s2wr7 <= 41;
	      {1'd0, 7'd42}: s2wr7 <= 42;
	      {1'd0, 7'd43}: s2wr7 <= 43;
	      {1'd0, 7'd44}: s2wr7 <= 44;
	      {1'd0, 7'd45}: s2wr7 <= 45;
	      {1'd0, 7'd46}: s2wr7 <= 46;
	      {1'd0, 7'd47}: s2wr7 <= 47;
	      {1'd0, 7'd48}: s2wr7 <= 48;
	      {1'd0, 7'd49}: s2wr7 <= 49;
	      {1'd0, 7'd50}: s2wr7 <= 50;
	      {1'd0, 7'd51}: s2wr7 <= 51;
	      {1'd0, 7'd52}: s2wr7 <= 52;
	      {1'd0, 7'd53}: s2wr7 <= 53;
	      {1'd0, 7'd54}: s2wr7 <= 54;
	      {1'd0, 7'd55}: s2wr7 <= 55;
	      {1'd0, 7'd56}: s2wr7 <= 56;
	      {1'd0, 7'd57}: s2wr7 <= 57;
	      {1'd0, 7'd58}: s2wr7 <= 58;
	      {1'd0, 7'd59}: s2wr7 <= 59;
	      {1'd0, 7'd60}: s2wr7 <= 60;
	      {1'd0, 7'd61}: s2wr7 <= 61;
	      {1'd0, 7'd62}: s2wr7 <= 62;
	      {1'd0, 7'd63}: s2wr7 <= 63;
	      {1'd0, 7'd64}: s2wr7 <= 64;
	      {1'd0, 7'd65}: s2wr7 <= 65;
	      {1'd0, 7'd66}: s2wr7 <= 66;
	      {1'd0, 7'd67}: s2wr7 <= 67;
	      {1'd0, 7'd68}: s2wr7 <= 68;
	      {1'd0, 7'd69}: s2wr7 <= 69;
	      {1'd0, 7'd70}: s2wr7 <= 70;
	      {1'd0, 7'd71}: s2wr7 <= 71;
	      {1'd0, 7'd72}: s2wr7 <= 72;
	      {1'd0, 7'd73}: s2wr7 <= 73;
	      {1'd0, 7'd74}: s2wr7 <= 74;
	      {1'd0, 7'd75}: s2wr7 <= 75;
	      {1'd0, 7'd76}: s2wr7 <= 76;
	      {1'd0, 7'd77}: s2wr7 <= 77;
	      {1'd0, 7'd78}: s2wr7 <= 78;
	      {1'd0, 7'd79}: s2wr7 <= 79;
	      {1'd0, 7'd80}: s2wr7 <= 80;
	      {1'd0, 7'd81}: s2wr7 <= 81;
	      {1'd0, 7'd82}: s2wr7 <= 82;
	      {1'd0, 7'd83}: s2wr7 <= 83;
	      {1'd0, 7'd84}: s2wr7 <= 84;
	      {1'd0, 7'd85}: s2wr7 <= 85;
	      {1'd0, 7'd86}: s2wr7 <= 86;
	      {1'd0, 7'd87}: s2wr7 <= 87;
	      {1'd0, 7'd88}: s2wr7 <= 88;
	      {1'd0, 7'd89}: s2wr7 <= 89;
	      {1'd0, 7'd90}: s2wr7 <= 90;
	      {1'd0, 7'd91}: s2wr7 <= 91;
	      {1'd0, 7'd92}: s2wr7 <= 92;
	      {1'd0, 7'd93}: s2wr7 <= 93;
	      {1'd0, 7'd94}: s2wr7 <= 94;
	      {1'd0, 7'd95}: s2wr7 <= 95;
	      {1'd0, 7'd96}: s2wr7 <= 96;
	      {1'd0, 7'd97}: s2wr7 <= 97;
	      {1'd0, 7'd98}: s2wr7 <= 98;
	      {1'd0, 7'd99}: s2wr7 <= 99;
	      {1'd0, 7'd100}: s2wr7 <= 100;
	      {1'd0, 7'd101}: s2wr7 <= 101;
	      {1'd0, 7'd102}: s2wr7 <= 102;
	      {1'd0, 7'd103}: s2wr7 <= 103;
	      {1'd0, 7'd104}: s2wr7 <= 104;
	      {1'd0, 7'd105}: s2wr7 <= 105;
	      {1'd0, 7'd106}: s2wr7 <= 106;
	      {1'd0, 7'd107}: s2wr7 <= 107;
	      {1'd0, 7'd108}: s2wr7 <= 108;
	      {1'd0, 7'd109}: s2wr7 <= 109;
	      {1'd0, 7'd110}: s2wr7 <= 110;
	      {1'd0, 7'd111}: s2wr7 <= 111;
	      {1'd0, 7'd112}: s2wr7 <= 112;
	      {1'd0, 7'd113}: s2wr7 <= 113;
	      {1'd0, 7'd114}: s2wr7 <= 114;
	      {1'd0, 7'd115}: s2wr7 <= 115;
	      {1'd0, 7'd116}: s2wr7 <= 116;
	      {1'd0, 7'd117}: s2wr7 <= 117;
	      {1'd0, 7'd118}: s2wr7 <= 118;
	      {1'd0, 7'd119}: s2wr7 <= 119;
	      {1'd0, 7'd120}: s2wr7 <= 120;
	      {1'd0, 7'd121}: s2wr7 <= 121;
	      {1'd0, 7'd122}: s2wr7 <= 122;
	      {1'd0, 7'd123}: s2wr7 <= 123;
	      {1'd0, 7'd124}: s2wr7 <= 124;
	      {1'd0, 7'd125}: s2wr7 <= 125;
	      {1'd0, 7'd126}: s2wr7 <= 126;
	      {1'd0, 7'd127}: s2wr7 <= 127;
      endcase // case(writeCycle)
   end // always @ (posedge clk)

// synthesis attribute rom_style of s2wr7 is "block"
endmodule



						module multfix(clk, rst, a, b, q_sc, q_unsc);
						   parameter WIDTH=35, CYCLES=6;

						   input signed [WIDTH-1:0]    a,b;
						   output [WIDTH-1:0]          q_sc;
						   output [WIDTH-1:0]              q_unsc;

						   input                       clk, rst;
						   
						   reg signed [2*WIDTH-1:0]    q[CYCLES-1:0];
						   wire signed [2*WIDTH-1:0]   res;   
						   integer                     i;

						   assign                      res = q[CYCLES-1];   
						   
						   assign                      q_unsc = res[WIDTH-1:0];
						   assign                      q_sc = {res[2*WIDTH-1], res[2*WIDTH-4:WIDTH-2]};
						      
						   always @(posedge clk) begin
						      q[0] <= a * b;
						      for (i = 1; i < CYCLES; i=i+1) begin
						         q[i] <= q[i-1];
						      end
						   end
						                  
						endmodule 
module addfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a+b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
   
endmodule

module subfxp(a, b, q, clk);

   parameter width = 16, cycles=1;
   
   input signed [width-1:0]  a, b;
   input                     clk;   
   output signed [width-1:0] q;
   reg signed [width-1:0]    res[cycles-1:0];

   assign                    q = res[cycles-1];
   
   integer                   i;   
   
   always @(posedge clk) begin
     res[0] <= a-b;
      for (i=1; i < cycles; i = i+1)
        res[i] <= res[i-1];
      
   end
  
endmodule

