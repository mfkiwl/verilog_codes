Found an implementation here: https://github.com/westonb/OV7670-Verilog

it configure the data as RGB565,
the sioc and siod has to be pulled up by an external 3.3V supply,
so you need pull up resistors (4.7k). siod and sioc pulls low that signal
or use a high impedance to keep it up
also pclk is an output of OV7670 so you need to introduce it in the 
fpga via a clock capable pin 


-----------------------------------------------------------------
The module work at most 30fps
resolution 640x480 vga
VCC = 0.3
support RGB, RGB (GRB 4:2:2, RGB565/555/444), 
YUV (4:2:2) and YCbCr (4:2:2) formats  

SCCB = serial camera control bus, compatible with i2c


PINS:
    SCL (input)     :   serial clk
    SDA (bi dir)    :   serial data
    VSYNC (output)  :   high->frame valid   (VS) vertical sync
    HREF (otuput)   :   high->line valid    (HS) horizontal sync
    PCLK (output)   :   pixel clock
    XCLK (input)    :   master clock for the chip (MCLK)
    D7-D0(output)   :   pixel data
    RESET (input)   :   active low
    PWDN (input)    :   active high


input clk freq : min 10, typ 24, max 48 MHz

input sckl  :   max 400KHz; typical 100KHz

Check datasheet for the i2c address.. 

Important ones:
    11 (pag 13) :   use external clk?, define prescalers
    12 (pag 13) :   output type
    3e (pag 18) :   pclk dividers
    40 (pag 18) :   output range values
    6B (pag 21) :   PLL control


Some diagrams of the diferet formats:

RGB555: (needs 2 cycles per pxl)
    d7  d6  d5  d4  d3  d2  d1  d0
    x   R4  R3  R2  R1  R0  G4  G3
    G2  G1  G0  B4  B3  B2  B1  B0

RGB565:
    d7  d6  d5  d4  d3  d2  d1  d0
    R4  R3  R2  R1  R0  G5  G4  G3
    G2  G1  G0  B4  B3  B2  B1  B0

YUV422: Each has [7:0] bits
    Every 2 cycles the Y gets updated
    but U,V gets updated 4 cycles.. so consecutive bits
    share some U,V component but not the Y

    1clk 2clk 3clk 4clk 5clk 6clk
    Y    U    Y    V    Y    U

    Ex:
    Px0     Y1  U_{01}  V_{01}
    Px1     Y2  U_{23}  v_{01}
    Px2     Y3  U_{23}  V_{23}
    Px3     Y4  U_{45}  V_{23}
    
    In this case the px even gets updated the V component
    and the odd one updated the U


Translate YUV to RGB:
    R = 1.164(Y-16)+1.596(V-128)
    G = 1.164(Y-16)-0.813(V-128)-0.391(U-128)
    B = 1.164(Y-16)+2.018(U-128)


SCCB:
    SCCB_E: 1 when the bus is idle
    SIOC  : 1 when the bus is idle. when transmiting act as clk line
    SIOD  : 1 when the bus is idle. when transmiting act as data line

    Our module only has access to sioc and siod

init transmition: siod 1, sioc 1; siod 0, sioc 0; next send data+clk
    cycles  |0 |1 |2 |3 | 

    siod  -----\__/--\__/---
    
    sioc  zz---\__ d7    d6 ...   


end transmition:after last data you have to put sioc 1, and 
mantaining it you have to make a 0-1 transition in siod
    

    cycles  |0 |1 |2 |3 |
    
    siod  __/--\__/------

    sioc    d7 \____/--- 
     

The scheme of the communication is:
    id address, reg address, wr_data
    
    Seems that the device address is 0x42 (check!!)




----------------------------------------------
Road map:
    1.- Configure chip (i2c master)
    2.- xclk freq?
    3.- rst, wait until posedge in the vsync
    4.- start collecting data :)
        always@(posedge pclk)begin
            if(v_sync&h_ref)
                addr<= addr+1;
                pxl[addr] <= din
        end
        //something like that (reset status, addressing checking, etc)
    5.- parse the data according the format selected
    


















